{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/about/index/test.png","path":"about/index/test.png","modified":1,"renderable":0},{"_id":"source/about/index/wechat.jpg","path":"about/index/wechat.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-daisy/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-daisy/source/img/BZLogo.png","path":"img/BZLogo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-daisy/source/img/body_bg.png","path":"img/body_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-daisy/source/img/user_icon.jpg","path":"img/user_icon.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-daisy/README.md","hash":"6016f505af318a1f7674c5d5b9315528d22ba5c3","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/_config.yml","hash":"0536526385ca51f0a574cfa6a7118ac68fd296df","modified":1552812147311},{"_id":"source/_posts/Bitmap-RGB24-4字节对齐.md","hash":"e8510e9969bdbb3a2283f5f9cb41ead6c64b532c","modified":1553006551441},{"_id":"source/_posts/Bitmap每个像素值由指定的掩码决定.md","hash":"66d8f52b55d8b0ba2934cdd41c02370538aee57b","modified":1553008616969},{"_id":"source/_posts/Hide-Data-into-bitmap-with-ARGB8888-format.md","hash":"8eb179193e9f92ffa82bcc7ced19368540ff6eb2","modified":1552920368153},{"_id":"source/_posts/My-First-Linux-Module.md","hash":"17519cd880fb01e92e356520f2f5f0967a13d229","modified":1552919290196},{"_id":"source/_posts/Socket编程基础.md","hash":"67746bd17fd0dd27a5272b437405d3667f7458ef","modified":1552820276747},{"_id":"source/_posts/binary-and-out-mode-to-open-a-file.md","hash":"2d8b6d8f795f307631905243477d00eb0bc5cf40","modified":1552919674968},{"_id":"source/_posts/三星S8-刷机记录.md","hash":"29bf3fe89a40d14864e165208368a06d800e1244","modified":1552820718159},{"_id":"source/_posts/三星S8相机黑画面解决.md","hash":"f38c836842e3945ad534f414989581cd8522a6c4","modified":1552818755751},{"_id":"source/_posts/两相双极性步进电机驱动.md","hash":"2f26975557f8e3cce077e57972cd7117d89af0d6","modified":1552808593062},{"_id":"source/_posts/基础算法总结.md","hash":"f5e9a0737cf42a98395ce66de9c9797a5f9100c0","modified":1562484228098},{"_id":"source/_posts/嵌入式开发一个月随笔.md","hash":"4fada13153f179b1515ab5d85d75f6bd2c563321","modified":1552816001991},{"_id":"source/_posts/工作至今.md","hash":"dd9a31938b7b80ea6a102edfe46604545c0f5710","modified":1552820812927},{"_id":"source/_posts/巧用std-shared-ptr全局对象释放单例内存.md","hash":"0f76d139882379dad24d4e20dec1fcdaa669914e","modified":1553527893931},{"_id":"source/_posts/自动喂鱼机.md","hash":"f85c7f87a14249de24ccc0f9213aad1c88ee47b2","modified":1553528056226},{"_id":"source/_posts/读取文件时，使用file-eof-判断结尾注意事项.md","hash":"1246e8fddc58a472168e528de5847707a1fd1bb0","modified":1553008914021},{"_id":"source/about/index.md","hash":"23a2d21b41de1c231dec4ec5f8be77f47807b5ec","modified":1552815217989},{"_id":"themes/hexo-theme-daisy/languages/default.yml","hash":"feb1dd022dc8897d65baa5b927de2a3d4178d798","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/languages/zh-CN.yml","hash":"751f1a2bbfb6736c71e846493ae0fb7ef7dc778d","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1552703215453},{"_id":"themes/hexo-theme-daisy/layout/index.ejs","hash":"598620c0882b1554d93086b789421866532509f8","modified":1552811002169},{"_id":"themes/hexo-theme-daisy/layout/layout.ejs","hash":"d9b8038cc353dcdab56812e618edbd2b601b742e","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1552400394027},{"_id":"source/_posts/Bitmap每个像素值由指定的掩码决定/compare.png","hash":"9affee6eca7c77f6a7acbcfa13643d13f3d62466","modified":1553006920330},{"_id":"source/_posts/My-First-Linux-Module/example.png","hash":"5cd79fa9ac36d7761e9560831a1a9fe5055920a4","modified":1552816398559},{"_id":"source/_posts/Socket编程基础/shake_hands.png","hash":"0dfc99f0a81b404dac0172dcdc5c956a9cb158d9","modified":1552819930324},{"_id":"source/_posts/三星S8相机黑画面解决/camera_error.jpg","hash":"c5a9b9d170347c1ff7d75b6b4767033a9ee0f8d3","modified":1552818454525},{"_id":"source/_posts/三星S8相机黑画面解决/log1.jpg","hash":"49395254c86c15a65b51401a78d3bb0ddfbff634","modified":1552816625193},{"_id":"source/_posts/三星S8相机黑画面解决/log2.jpg","hash":"4ffc89d48a57ec1e74cb23de7afe02db0f15df5f","modified":1552816629873},{"_id":"source/_posts/两相双极性步进电机驱动/steper_run.png","hash":"5b5643087dce9aeb94c4520b38e4e4ee1eaf12f4","modified":1552716432617},{"_id":"source/_posts/两相双极性步进电机驱动/steper_schematic_static.png","hash":"d4c79c2a4d7f2767b04f520775a8a16859ee350f","modified":1552716421866},{"_id":"source/_posts/基础算法总结/BucketSort.png","hash":"e5ee5babb88573d8e8b572f65528c4f5e4359b6a","modified":1562481584834},{"_id":"source/_posts/基础算法总结/sort.png","hash":"6715e230cf07bdd8325533807559b65e45063fd2","modified":1562481054089},{"_id":"source/_posts/巧用std-shared-ptr全局对象释放单例内存/result.png","hash":"c1ee80fc565b82185b46438d1c9f134899fc08ca","modified":1552823968890},{"_id":"source/_posts/自动喂鱼机/flowchart.png","hash":"f7ac5e25b9b70351b2e03a2e4e9ab8f38de516f4","modified":1553527732377},{"_id":"source/about/index/test.png","hash":"d4c79c2a4d7f2767b04f520775a8a16859ee350f","modified":1552716421866},{"_id":"source/about/index/wechat.jpg","hash":"0ba1e285219de8cb7326274185e5454ff1d5c177","modified":1552813011810},{"_id":"themes/hexo-theme-daisy/source/css/style.styl","hash":"a3da7a39eb3ae494d1a659cdd46d877e55499b2c","modified":1552806211609},{"_id":"themes/hexo-theme-daisy/source/img/BZLogo.png","hash":"546193de24ab82581f744aca8451f7958df2d07b","modified":1552808706563},{"_id":"themes/hexo-theme-daisy/source/img/body_bg.png","hash":"ed45094367e2957041df66f86032f3a53c1d6bb5","modified":1552400394043},{"_id":"themes/hexo-theme-daisy/source/img/user_icon.jpg","hash":"f7aff6511994f58e1f8e2002d8e14834e3bef7f4","modified":1552790740124},{"_id":"themes/hexo-theme-daisy/layout/_partial/after_footer.ejs","hash":"0acafd1d158c33c3f953a3e2c633bad414e730fa","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/layout/_partial/archive.ejs","hash":"6fd1774eb27fe8fa6ef02e0454e7b65250c8f8e7","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/layout/_partial/article.ejs","hash":"fd4c72f903b05d4066c9872e7fde03b94d6265c2","modified":1552810921196},{"_id":"themes/hexo-theme-daisy/layout/_partial/footer.ejs","hash":"d5fa870e3cf1089c8ec6208f74ab5315a100a030","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/layout/_partial/google_analytics.ejs","hash":"fa555ea9a066f441f10e13523c675f87691874c3","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/layout/_partial/head.ejs","hash":"8042ecfc04ac539a430510c3eba99736cec5add0","modified":1552808720530},{"_id":"themes/hexo-theme-daisy/layout/_partial/header.ejs","hash":"5d97540ecf6b2bacb32089ec64b267b5f8c0413f","modified":1552790818803},{"_id":"themes/hexo-theme-daisy/layout/_partial/pagination.ejs","hash":"d19e2785568dc9e2ed84e911fe25067520ed7bdd","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/layout/_partial/sidebar.ejs","hash":"016441ca9534769d8e151cffe4027686e9c86f18","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/_partial/tail.ejs","hash":"071fffe449f066499a5537fff8c41ac487792d07","modified":1553559613602},{"_id":"themes/hexo-theme-daisy/layout/_widget/category.ejs","hash":"c163a146b0f963f257ddcc244f413bef281fe0a0","modified":1552810189022},{"_id":"themes/hexo-theme-daisy/layout/_widget/recent_posts.ejs","hash":"59f6f8362fa23a6215e3381151a59c2e2a5fd0d3","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/_widget/search.ejs","hash":"93d4a690494dfa405024f23511846ea00d647be7","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/_widget/tag.ejs","hash":"6bf8214fedb8d6306e017e07ad67aab956496500","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/_widget/tagcloud.ejs","hash":"139e91b1e6abcc1e3883bcc03a9a1a7f1d891d7a","modified":1552400394027},{"_id":"source/_posts/Socket编程基础/socket_process.png","hash":"b72cf812d0fedfd1b80a1f646e16c0eebbeab658","modified":1552819917652},{"_id":"source/_posts/三星S8-刷机记录/GMS1.jpg","hash":"60fa0715c1457dbf0f690420529c81a6205d3e01","modified":1552819266148},{"_id":"source/_posts/三星S8相机黑画面解决/light_error.jpg","hash":"f164ddc54c44db55e5ccd8e0eb3b099688e9177e","modified":1552818486419},{"_id":"source/_posts/两相双极性步进电机驱动/steper_schematic.gif","hash":"3701d95a5acc644473f2ac07a2e870e815cb82be","modified":1552716440532},{"_id":"source/_posts/自动喂鱼机/motor.png","hash":"3b47d06111ba0183d3cbd2668e60bc6f6d09d004","modified":1553525463203},{"_id":"themes/hexo-theme-daisy/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1552400394027},{"_id":"source/_posts/三星S8-刷机记录/GMS2.jpg","hash":"13f1cf16f2137736aa3a7df27168b93a1145509e","modified":1552819289793},{"_id":"source/_posts/三星S8-刷机记录/battery.jpg","hash":"9f4504a65976b8186962962c2ef7cb5d395e1c24","modified":1552819318236},{"_id":"source/_posts/自动喂鱼机/drive_board.png","hash":"083757b2cd889c7ebe18ef858bd039490d72dde1","modified":1553525644063},{"_id":"themes/hexo-theme-daisy/source/css/_base/layout.styl","hash":"4535e7a4a7be607ae25101cacefd6f6dcd09719a","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/source/css/_base/variable.styl","hash":"ee727c67ba013c002bce032f528e83328169a212","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/source/css/_partial/archive.styl","hash":"2260b88b9ccde39fe0689239133b81412de05602","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/source/css/_partial/article.styl","hash":"04b21f674874daa80c52652ca268a6dac9c6dc9f","modified":1552400394043},{"_id":"themes/hexo-theme-daisy/source/css/_partial/footer.styl","hash":"258b889b96d71af8ddc05028c7096ed2ed166952","modified":1552400394043},{"_id":"themes/hexo-theme-daisy/source/css/_partial/header.styl","hash":"736923e0cfda2f35837aa7bfe7408e014d62c7a3","modified":1552400394043},{"_id":"themes/hexo-theme-daisy/source/css/_partial/index.styl","hash":"6bd7cd6a12a04b8a361173610281901088e59aaf","modified":1552747548929},{"_id":"themes/hexo-theme-daisy/source/css/_partial/sidebar.styl","hash":"51b50fe95b0536c946ae94df8c80b60641d53cd0","modified":1552810179050},{"_id":"themes/hexo-theme-daisy/source/css/_partial/syntax.styl","hash":"0fd1ffb87149663707a44d469ebde6860d9b68b3","modified":1552400394043},{"_id":"themes/hexo-theme-daisy/source/css/_partial/tail.styl","hash":"767573d9dd47ecf2f33a5bdd4dde08fe729b68e4","modified":1552806237820},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/category.ejs","hash":"8bb3f6ee6296df5a0d527b30d5a46a2387b97cb7","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/gallery.ejs","hash":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1552400394012},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/share.ejs","hash":"991cf130c37f08c7e948772fb45587592b165b55","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/tag.ejs","hash":"b21bbfb5479bd5968a610ba8bdb2bdf10d7a40e9","modified":1552400394027},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/title.ejs","hash":"7f93b310927d6238effdde15234d8cb242940893","modified":1552400394027},{"_id":"source/_posts/两相双极性步进电机驱动/steper.png","hash":"f76e8b635604251c722971e74346dee536ead8cb","modified":1552716395181},{"_id":"source/_posts/基础算法总结/RadixSort.gif","hash":"c1fb6b874f066ec2cf7fcd565051ec9d61896a79","modified":1562481560777},{"_id":"source/_posts/自动喂鱼机/feed_storage.png","hash":"a0fabea3ecd56503b1da1880a8f806717ac495bb","modified":1553525568747},{"_id":"source/_posts/自动喂鱼机/main_board.png","hash":"6aa3d670bf8546dca50c3a91f03e6e8047c8299a","modified":1553525672075},{"_id":"source/_posts/基础算法总结/CountSort.gif","hash":"f51b9cc8cf02c104e695753f50229c6d2ba4ab91","modified":1562481444526},{"_id":"source/_posts/基础算法总结/QuickSort.gif","hash":"59872dea97baee80e4333917f80c48627f888ed2","modified":1562481389961},{"_id":"source/_posts/基础算法总结/MergeSort.gif","hash":"5f153792344405f72f8f04d1f62c61c54b09c58e","modified":1562481372787},{"_id":"source/_posts/自动喂鱼机/feeder.png","hash":"19bd0980239659b0a1940a7d0e0735a6f8333702","modified":1553524015373},{"_id":"source/_posts/基础算法总结/InsertSort.gif","hash":"ca62c4dc80eac486ff5ab2807f76e825228b6951","modified":1562481354367},{"_id":"source/_posts/基础算法总结/BubbleSort.gif","hash":"fd6590aecff7c33327ce82b348004d88d56c6a84","modified":1562478231631},{"_id":"source/_posts/基础算法总结/SelectSort.gif","hash":"a52157c0615c58066467795c4cd29b6b55a367dc","modified":1562481347324},{"_id":"source/_posts/基础算法总结/ShellSort.gif","hash":"82dad0408f3c8f708e6ad1ac40628c7521a70a0f","modified":1562481366147},{"_id":"source/_posts/基础算法总结/HeapSort.gif","hash":"ef85422ba616c31be79468551be2091f0fede721","modified":1562481410648},{"_id":"source/_posts/自动喂鱼机/feeder.gif","hash":"79bb792640c5029b196bb6b3aafc2af71adf3b67","modified":1553524084014},{"_id":"public/about/index.html","hash":"81c9c71e52df46816e45173f6d01887b3d58f50f","modified":1562484298182},{"_id":"public/2019/06/07/基础算法总结/index.html","hash":"229d7e6b04ad38a6b397391229372995a8ff9f3e","modified":1562484298182},{"_id":"public/2019/02/28/三星S8相机黑画面解决/index.html","hash":"b7b86d98760374923cd16f95ec6447b4b191be3c","modified":1562484298196},{"_id":"public/2019/02/26/三星S8-刷机记录/index.html","hash":"5aabc2ed9656da8b1cdcc5478d1bc9757df4cf5c","modified":1562484298197},{"_id":"public/2018/09/05/工作至今/index.html","hash":"a5f01f2113f27936095b443f62281dbd0ea37270","modified":1562484298197},{"_id":"public/2017/12/21/binary-and-out-mode-to-open-a-file/index.html","hash":"5aa16fb397b3da516abe422f5b0ba52fa0c4246e","modified":1562484298198},{"_id":"public/2017/07/13/My-First-Linux-Module/index.html","hash":"1ebdb0e1643c16c2cab2e61ce9eb510eb87fa585","modified":1562484298198},{"_id":"public/2017/06/22/Bitmap每个像素值由指定的掩码决定/index.html","hash":"f0dc230551dd79b2e7d4d83f0506c5c61cecefc0","modified":1562484298198},{"_id":"public/2017/06/22/Bitmap-RGB24-4字节对齐/index.html","hash":"3ee15a75bcf615eb3c0c24f6f1074db67adcd34d","modified":1562484298198},{"_id":"public/2017/06/21/读取文件时，使用file-eof-判断结尾注意事项/index.html","hash":"f2640d45b96c2bbbc6e8160b05c4004f2c4c0ff0","modified":1562484298198},{"_id":"public/2016/09/21/嵌入式开发一个月随笔/index.html","hash":"8110ced055eb84341ca25d083da8e11f544f459a","modified":1562484298198},{"_id":"public/archives/index.html","hash":"8c7bbbdb75aca492f5e9316e074d051928161726","modified":1562484298198},{"_id":"public/archives/page/2/index.html","hash":"a0c4027574a5100f3d749d29a23fd121c137601a","modified":1562484298199},{"_id":"public/archives/2016/index.html","hash":"789a305ade62946343f6b9f9f4d32747d5c6e53e","modified":1562484298199},{"_id":"public/archives/2016/09/index.html","hash":"a9609b1ed52a501825ddf961d77d34c0638dca26","modified":1562484298199},{"_id":"public/archives/2017/index.html","hash":"2531943420e70d83f73e7fd9d25941312000e9d4","modified":1562484298199},{"_id":"public/archives/2017/06/index.html","hash":"d5f58095dbe11c4698bfa6ae00506935553ddd11","modified":1562484298199},{"_id":"public/archives/2017/07/index.html","hash":"f4741103c6e20b1a5fa4e2b1e54de569718a8f5b","modified":1562484298199},{"_id":"public/archives/2017/12/index.html","hash":"6ab9e9aa588351b5bc241fa9bf9296fa12b3712d","modified":1562484298199},{"_id":"public/archives/2018/index.html","hash":"7c394d77a48b7439a39dc912050da4418df5fdcc","modified":1562484298199},{"_id":"public/archives/2018/04/index.html","hash":"5f69acc25f0d23150652492995d08fa698fcdee8","modified":1562484298199},{"_id":"public/archives/2018/08/index.html","hash":"83ecd474edec10e71e7085ce8b915fac3dfc0b08","modified":1562484298199},{"_id":"public/archives/2018/09/index.html","hash":"2b2eee8407b5656d7e5243855da15e60abc8e76f","modified":1562484298200},{"_id":"public/archives/2018/12/index.html","hash":"11e0e269e9af1cbb9f8bc4c6bec837362c4bed8d","modified":1562484298200},{"_id":"public/archives/2019/index.html","hash":"df57ced574a21287ec39f4d9f8f9501db65c6d3b","modified":1562484298200},{"_id":"public/archives/2019/02/index.html","hash":"05c7b9a57096120300887007df979c03912530fa","modified":1562484298200},{"_id":"public/archives/2019/03/index.html","hash":"69b512854bec498d3d41219fc47a0780538110d9","modified":1562484298200},{"_id":"public/archives/2019/06/index.html","hash":"edb8ff68434870a455bd0ca5c57243c08e7b59ee","modified":1562484298200},{"_id":"public/categories/技术/index.html","hash":"f939d81ff923d8836a835012b8533e8d639e37d4","modified":1562484298200},{"_id":"public/categories/技术/page/2/index.html","hash":"615dd0ad0691546593b3ae8e537de3a97e3b6d4d","modified":1562484298200},{"_id":"public/categories/技术/linux/index.html","hash":"21771d89b07926420591327b0e831baadb1e101b","modified":1562484298200},{"_id":"public/categories/技术/图像/index.html","hash":"4ba70da436ddb9fa26ebedad1a5c3979a39cc6e7","modified":1562484298200},{"_id":"public/categories/技术/C/index.html","hash":"034c10bcdb1dadd0e4a6451451cce93fdef22c75","modified":1562484298200},{"_id":"public/categories/技术/杂技/index.html","hash":"0fdfda0916ae404abab388461f373f67f8c6b213","modified":1562484298201},{"_id":"public/categories/技术/杂记/index.html","hash":"5d5a0df8777113c55d4d1894fc35be7fe2f1c1ee","modified":1562484298201},{"_id":"public/categories/技术/嵌入式/index.html","hash":"dc2f98f06aff2257049448dbb8c17815b9025672","modified":1562484298201},{"_id":"public/categories/技术/Linux/index.html","hash":"e3749602aa016296864074732eeab7a739678806","modified":1562484298201},{"_id":"public/categories/技术/随笔/index.html","hash":"05c1b471a1154db212326ca8f5f63f8129abaca1","modified":1562484298201},{"_id":"public/categories/技术/linux/网络/index.html","hash":"c0712fd5e290c3f3b910d364bb24ecf739362b88","modified":1562484298201},{"_id":"public/categories/生活/index.html","hash":"3a7059ccfc13358af6724252361f1d7f4c112834","modified":1562484298201},{"_id":"public/categories/技术/图像/C/index.html","hash":"1e21708fa794f2846aed4603e49a3128d8d1bf7a","modified":1562484298201},{"_id":"public/categories/技术/嵌入式/C51/index.html","hash":"a6b3a4ed5889de5ba28ac565ce809f36d00af22b","modified":1562484298201},{"_id":"public/categories/生活/随笔/index.html","hash":"175b9a40887cf8d553e7238f19f0cb6095f65bd1","modified":1562484298201},{"_id":"public/tags/C/index.html","hash":"1d0e843d4577c77d50b93c757dda8e59c50ca0e1","modified":1562484298202},{"_id":"public/tags/Bitmap/index.html","hash":"315e01cb6c2ef41e475dc6d4b6a2562fe811989c","modified":1562484298202},{"_id":"public/tags/Linux/index.html","hash":"c4f44cace51a090a78f229d7579c712a567cb03d","modified":1562484298202},{"_id":"public/tags/Kernel-Module/index.html","hash":"978cfb7863c6c5432f12cfda23944838e3025af7","modified":1562484298202},{"_id":"public/tags/Socket/index.html","hash":"bc5fdca83c9b2567102040a3a7f4f03d0b10eda0","modified":1562484298202},{"_id":"public/tags/Input-Output/index.html","hash":"8ec824ccfd9760a1cf19f9f91bbd57827934c241","modified":1562484298202},{"_id":"public/tags/玩弄手机/index.html","hash":"079b63810d3ed630f14101b68f06896760d83eb8","modified":1562484298202},{"_id":"public/tags/嵌入式/index.html","hash":"db351f27c41cf0bf1ecd5750793f95449ca3b0f6","modified":1562484298211},{"_id":"public/tags/步进电机/index.html","hash":"a40991258e1e3d06920c9a4ea6e8bc9e6856dbee","modified":1562484298211},{"_id":"public/tags/C51/index.html","hash":"24a0c80a92c2ed281d00ca896b860a3e3c4c3cbd","modified":1562484298211},{"_id":"public/tags/总结/index.html","hash":"b6d1afe6b7598dc6da332a132c39db0d9f6eb7f9","modified":1562484298211},{"_id":"public/tags/随笔/index.html","hash":"4781667d246455f6b1be858282b83784bc8fe02c","modified":1562484298211},{"_id":"public/tags/算法/index.html","hash":"867747a8e495af9f33871b0eabeceea7270e8b9d","modified":1562484298212},{"_id":"public/tags/感想/index.html","hash":"42a63a12759f902d5ad9166da937841df18c6328","modified":1562484298212},{"_id":"public/tags/IO/index.html","hash":"4f389500b8ff7b179305fd265f6e66fea6f0155a","modified":1562484298212},{"_id":"public/2019/03/05/自动喂鱼机/index.html","hash":"419b7b5e34b542455a489eb4f8fa3c2c2db24eb9","modified":1562484298212},{"_id":"public/2018/12/02/Socket编程基础/index.html","hash":"ab3bb06807cf62364a6320b7eed061b0d7238bab","modified":1562484298213},{"_id":"public/2018/08/27/巧用std-shared-ptr全局对象释放单例内存/index.html","hash":"f90c1ba855d37ed69a3b51e5694f63ba424a406a","modified":1562484298213},{"_id":"public/2018/04/06/两相双极性步进电机驱动/index.html","hash":"edb6fe0a5c9ef947904185724dbd1bf406d11f94","modified":1562484298214},{"_id":"public/2017/12/21/Hide-Data-into-bitmap-with-ARGB8888-format/index.html","hash":"f18b35b36a0749ff4ba655f38b33de0e42c1ff49","modified":1562484298214},{"_id":"public/page/2/index.html","hash":"abae97a3e94f06fd3e80c67590a4e4c030ca7cd9","modified":1562484298229},{"_id":"public/index.html","hash":"cd39715f31e3197d67faf69dbfea623244abaf84","modified":1562484298229},{"_id":"public/about/index/test.png","hash":"d4c79c2a4d7f2767b04f520775a8a16859ee350f","modified":1562484298229},{"_id":"public/about/index/wechat.jpg","hash":"0ba1e285219de8cb7326274185e5454ff1d5c177","modified":1562484298229},{"_id":"public/img/BZLogo.png","hash":"546193de24ab82581f744aca8451f7958df2d07b","modified":1562484298230},{"_id":"public/img/body_bg.png","hash":"ed45094367e2957041df66f86032f3a53c1d6bb5","modified":1562484298230},{"_id":"public/img/user_icon.jpg","hash":"f7aff6511994f58e1f8e2002d8e14834e3bef7f4","modified":1562484298230},{"_id":"public/2017/06/22/Bitmap每个像素值由指定的掩码决定/compare.png","hash":"9affee6eca7c77f6a7acbcfa13643d13f3d62466","modified":1562484298230},{"_id":"public/2017/07/13/My-First-Linux-Module/example.png","hash":"5cd79fa9ac36d7761e9560831a1a9fe5055920a4","modified":1562484298230},{"_id":"public/2018/08/27/巧用std-shared-ptr全局对象释放单例内存/result.png","hash":"c1ee80fc565b82185b46438d1c9f134899fc08ca","modified":1562484298230},{"_id":"public/2018/12/02/Socket编程基础/shake_hands.png","hash":"0dfc99f0a81b404dac0172dcdc5c956a9cb158d9","modified":1562484298231},{"_id":"public/2019/02/28/三星S8相机黑画面解决/camera_error.jpg","hash":"c5a9b9d170347c1ff7d75b6b4767033a9ee0f8d3","modified":1562484298231},{"_id":"public/2019/02/28/三星S8相机黑画面解决/log1.jpg","hash":"49395254c86c15a65b51401a78d3bb0ddfbff634","modified":1562484298231},{"_id":"public/2019/02/28/三星S8相机黑画面解决/log2.jpg","hash":"4ffc89d48a57ec1e74cb23de7afe02db0f15df5f","modified":1562484298231},{"_id":"public/2018/04/06/两相双极性步进电机驱动/steper_run.png","hash":"5b5643087dce9aeb94c4520b38e4e4ee1eaf12f4","modified":1562484298231},{"_id":"public/2018/04/06/两相双极性步进电机驱动/steper_schematic_static.png","hash":"d4c79c2a4d7f2767b04f520775a8a16859ee350f","modified":1562484298231},{"_id":"public/2019/03/05/自动喂鱼机/flowchart.png","hash":"f7ac5e25b9b70351b2e03a2e4e9ab8f38de516f4","modified":1562484298231},{"_id":"public/2019/06/07/基础算法总结/BucketSort.png","hash":"e5ee5babb88573d8e8b572f65528c4f5e4359b6a","modified":1562484298231},{"_id":"public/2019/06/07/基础算法总结/sort.png","hash":"6715e230cf07bdd8325533807559b65e45063fd2","modified":1562484298232},{"_id":"public/2018/12/02/Socket编程基础/socket_process.png","hash":"b72cf812d0fedfd1b80a1f646e16c0eebbeab658","modified":1562484298926},{"_id":"public/2019/02/26/三星S8-刷机记录/GMS1.jpg","hash":"60fa0715c1457dbf0f690420529c81a6205d3e01","modified":1562484298926},{"_id":"public/2019/02/26/三星S8-刷机记录/GMS2.jpg","hash":"13f1cf16f2137736aa3a7df27168b93a1145509e","modified":1562484298926},{"_id":"public/2019/02/28/三星S8相机黑画面解决/light_error.jpg","hash":"f164ddc54c44db55e5ccd8e0eb3b099688e9177e","modified":1562484298926},{"_id":"public/2018/04/06/两相双极性步进电机驱动/steper_schematic.gif","hash":"3701d95a5acc644473f2ac07a2e870e815cb82be","modified":1562484298926},{"_id":"public/2019/03/05/自动喂鱼机/motor.png","hash":"3b47d06111ba0183d3cbd2668e60bc6f6d09d004","modified":1562484298927},{"_id":"public/css/style.css","hash":"0bbf7e0970401d96b4371eea63eb4bb97dd73b96","modified":1562484298941},{"_id":"public/2019/03/05/自动喂鱼机/feed_storage.png","hash":"a0fabea3ecd56503b1da1880a8f806717ac495bb","modified":1562484298941},{"_id":"public/2019/02/26/三星S8-刷机记录/battery.jpg","hash":"9f4504a65976b8186962962c2ef7cb5d395e1c24","modified":1562484298941},{"_id":"public/2019/03/05/自动喂鱼机/drive_board.png","hash":"083757b2cd889c7ebe18ef858bd039490d72dde1","modified":1562484298942},{"_id":"public/2018/04/06/两相双极性步进电机驱动/steper.png","hash":"f76e8b635604251c722971e74346dee536ead8cb","modified":1562484298962},{"_id":"public/2019/06/07/基础算法总结/RadixSort.gif","hash":"c1fb6b874f066ec2cf7fcd565051ec9d61896a79","modified":1562484298962},{"_id":"public/2019/03/05/自动喂鱼机/main_board.png","hash":"6aa3d670bf8546dca50c3a91f03e6e8047c8299a","modified":1562484298962},{"_id":"public/2019/06/07/基础算法总结/QuickSort.gif","hash":"59872dea97baee80e4333917f80c48627f888ed2","modified":1562484299006},{"_id":"public/2019/06/07/基础算法总结/CountSort.gif","hash":"f51b9cc8cf02c104e695753f50229c6d2ba4ab91","modified":1562484299022},{"_id":"public/2019/06/07/基础算法总结/InsertSort.gif","hash":"ca62c4dc80eac486ff5ab2807f76e825228b6951","modified":1562484299022},{"_id":"public/2019/06/07/基础算法总结/MergeSort.gif","hash":"5f153792344405f72f8f04d1f62c61c54b09c58e","modified":1562484299022},{"_id":"public/2019/03/05/自动喂鱼机/feeder.png","hash":"19bd0980239659b0a1940a7d0e0735a6f8333702","modified":1562484299052},{"_id":"public/2019/06/07/基础算法总结/BubbleSort.gif","hash":"fd6590aecff7c33327ce82b348004d88d56c6a84","modified":1562484299061},{"_id":"public/2019/06/07/基础算法总结/SelectSort.gif","hash":"a52157c0615c58066467795c4cd29b6b55a367dc","modified":1562484299067},{"_id":"public/2019/06/07/基础算法总结/ShellSort.gif","hash":"82dad0408f3c8f708e6ad1ac40628c7521a70a0f","modified":1562484299084},{"_id":"public/2019/06/07/基础算法总结/HeapSort.gif","hash":"ef85422ba616c31be79468551be2091f0fede721","modified":1562484299097},{"_id":"public/2019/03/05/自动喂鱼机/feeder.gif","hash":"79bb792640c5029b196bb6b3aafc2af71adf3b67","modified":1562484299113}],"Category":[{"name":"技术","_id":"cjxsmt2yo0002zs1kg0tauxwl"},{"name":"linux","parent":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt305000gzs1kcj4st5v5"},{"name":"图像","parent":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt30d000lzs1k80byx7qm"},{"name":"C++","parent":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt30m000szs1k8ojjmrjh"},{"name":"杂技","parent":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt30s000vzs1k5ykn01jx"},{"name":"杂记","parent":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt30z0014zs1kjxkpglc7"},{"name":"嵌入式","parent":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt312001bzs1kvsy5ua38"},{"name":"Linux","parent":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt315001gzs1k1jd6xw4o"},{"name":"随笔","parent":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt319001lzs1koz2cuc0h"},{"name":"网络","parent":"cjxsmt305000gzs1kcj4st5v5","_id":"cjxsmt31c001pzs1k9d9lyk0i"},{"name":"生活","_id":"cjxsmt31e001tzs1knryfz603"},{"name":"C++","parent":"cjxsmt30d000lzs1k80byx7qm","_id":"cjxsmt31j0022zs1kq1r1ivwb"},{"name":"C51","parent":"cjxsmt312001bzs1kvsy5ua38","_id":"cjxsmt31x002fzs1k2mczw4s9"},{"name":"随笔","parent":"cjxsmt31e001tzs1knryfz603","_id":"cjxsmt320002lzs1kjh6q0rxz"}],"Data":[],"Page":[{"title":"About Me","date":"2019-03-17T08:48:19.000Z","_content":"# 基本信息\n* 中文名： 张航\n\n* 英文名： Bob Zhang\n\n* 学校： 西华大学\n\n* 专业： 计算机科学与技术\n\n* 方向： **C/C++** **Linux**\n---\n# 自我介绍：\n\n对技术充满好奇，对生活充满向往。\n---\n# 联系信息\n邮箱：zhanghang_1992@qq.com\n\n二维码：\n![test](https://github.com/SadCPPCoder/SadCPPCoder.github.io/blob/master/about/index/wechat.jpg?raw=true)","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2019-03-17 16:48:19\n---\n# 基本信息\n* 中文名： 张航\n\n* 英文名： Bob Zhang\n\n* 学校： 西华大学\n\n* 专业： 计算机科学与技术\n\n* 方向： **C/C++** **Linux**\n---\n# 自我介绍：\n\n对技术充满好奇，对生活充满向往。\n---\n# 联系信息\n邮箱：zhanghang_1992@qq.com\n\n二维码：\n![test](https://github.com/SadCPPCoder/SadCPPCoder.github.io/blob/master/about/index/wechat.jpg?raw=true)","updated":"2019-03-17T09:33:37.989Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjxsmt32x003czs1kssqa0slp","content":"<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><ul>\n<li><p>中文名： 张航</p>\n</li>\n<li><p>英文名： Bob Zhang</p>\n</li>\n<li><p>学校： 西华大学</p>\n</li>\n<li><p>专业： 计算机科学与技术</p>\n</li>\n<li><p>方向： <strong>C/C++</strong> <strong>Linux</strong></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"自我介绍：\"><a href=\"#自我介绍：\" class=\"headerlink\" title=\"自我介绍：\"></a>自我介绍：</h1><h2 id=\"对技术充满好奇，对生活充满向往。\"><a href=\"#对技术充满好奇，对生活充满向往。\" class=\"headerlink\" title=\"对技术充满好奇，对生活充满向往。\"></a>对技术充满好奇，对生活充满向往。</h2><h1 id=\"联系信息\"><a href=\"#联系信息\" class=\"headerlink\" title=\"联系信息\"></a>联系信息</h1><p>邮箱：<a href=\"mailto:zhanghang_1992@qq.com\" target=\"_blank\" rel=\"noopener\">zhanghang_1992@qq.com</a></p>\n<p>二维码：<br><img src=\"https://github.com/SadCPPCoder/SadCPPCoder.github.io/blob/master/about/index/wechat.jpg?raw=true\" alt=\"test\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><ul>\n<li><p>中文名： 张航</p>\n</li>\n<li><p>英文名： Bob Zhang</p>\n</li>\n<li><p>学校： 西华大学</p>\n</li>\n<li><p>专业： 计算机科学与技术</p>\n</li>\n<li><p>方向： <strong>C/C++</strong> <strong>Linux</strong></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"自我介绍：\"><a href=\"#自我介绍：\" class=\"headerlink\" title=\"自我介绍：\"></a>自我介绍：</h1><h2 id=\"对技术充满好奇，对生活充满向往。\"><a href=\"#对技术充满好奇，对生活充满向往。\" class=\"headerlink\" title=\"对技术充满好奇，对生活充满向往。\"></a>对技术充满好奇，对生活充满向往。</h2><h1 id=\"联系信息\"><a href=\"#联系信息\" class=\"headerlink\" title=\"联系信息\"></a>联系信息</h1><p>邮箱：<a href=\"mailto:zhanghang_1992@qq.com\" target=\"_blank\" rel=\"noopener\">zhanghang_1992@qq.com</a></p>\n<p>二维码：<br><img src=\"https://github.com/SadCPPCoder/SadCPPCoder.github.io/blob/master/about/index/wechat.jpg?raw=true\" alt=\"test\"></p>\n"}],"Post":[{"title":"Bitmap RGB24 4字节对齐","date":"2017-06-22T01:54:15.000Z","_content":"# Bitmap RGB24 4字节对齐\n\n因为Bitmap支持最少2种颜色，并且可以支持RLC等压缩方式，所以Bitmap在嵌入式领域使用还是比较广泛的。\n最近在写一个Bitmap相关的小工具时，发现自己处理出来的Bitmap，系统总是不能正常地识别，但是读出来的数据又都是正确的。而且同样的图片，通过系统工具生成的Bitmap，总会大一些，大小也超过图片`LengthxWidthXColotBit + Header`。\n\n## 问题\n\n需求：**将RGB32或RGB24的Bitmap转换成为RGB565的Bitmap，并且可以将RGB565转成RGB32和RGB24。**\n实现算法：\n\n``` cpp\npixel565[0] = color[0] >> 3;// R\npixel565[1] = color[1] >> 2;// G\npixel565[2] = color[2] >> 3;// B\n```\n代码在RGB32、RGB24转RGB565和RGB565转RGB32过程中没有问题，但是在RGB565转RGB24时，出现了问题。\n使用高宽均为10px的图片，转出来的图片，系统不能正确识别显示。但是用Windows绘图程序绘制出来的同样大小的图片却能正确显示。通过比较文件大小发现：\n<table style=\"border=1 cellspacing=0\"><tr><th>自己工具生成图片大小</td><th>绘图生成图片大小</td></tr><tr><td>374</td><td>354</td></tr></table>\n<!--more-->\n## 查阅\n\n通过查阅资料，了解到这其实时Bitmap的一个特性，<font color=#ff0000>Bitmap每一行像素数据都要4字节对齐</font>，如果不够则用0x00填充。\n对于10x10的图片，每行有10个像素，每个像素是24bit，所以一行数据是`10x24b=30B`，但是要对齐4字节的话需要将每行数据对齐到`32Byte`，总共有10行，所以会多出20Bytes。\n\n## 解决\n\n所以修改处理算法code：\n``` cpp\nint count = 0;\nint alignNum = 4 - (pixelMat.cols % 4);\nint alignData = 0;\nMatConstIterator_<Vec3b> pixel, colorend;\nfor(pixel = pixelMat.begin<Vec3b>(), colorend = pixelMat.end<Vec3b>();pixel != colorend;++pixel)\n{\n    outFile.write((char*) &(*pixel)[0], 1);\n    outFile.write((char*) &(*pixel)[1], 1);\n    outFile.write((char*) &(*pixel)[2], 1);\n    if(++count % pixelMat.cols == 0)\n    {\n        // 4 bytes align\n        outFile.write((char *) &alignData, alignNum);\n    }\n}\n```\n**由此联想，在读取或存储Bitmap图片时需要关注图片一行数据的像素值所占的空间是否进行4字节对齐！**\n\n\n","source":"_posts/Bitmap-RGB24-4字节对齐.md","raw":"---\ntitle: Bitmap RGB24 4字节对齐\ndate: 2017-06-22 09:54:15\ntags:\n\t- C++\n\t- Bitmap\ncategories:\n\t- 技术\n\t- 图像\n\t- C++\n---\n# Bitmap RGB24 4字节对齐\n\n因为Bitmap支持最少2种颜色，并且可以支持RLC等压缩方式，所以Bitmap在嵌入式领域使用还是比较广泛的。\n最近在写一个Bitmap相关的小工具时，发现自己处理出来的Bitmap，系统总是不能正常地识别，但是读出来的数据又都是正确的。而且同样的图片，通过系统工具生成的Bitmap，总会大一些，大小也超过图片`LengthxWidthXColotBit + Header`。\n\n## 问题\n\n需求：**将RGB32或RGB24的Bitmap转换成为RGB565的Bitmap，并且可以将RGB565转成RGB32和RGB24。**\n实现算法：\n\n``` cpp\npixel565[0] = color[0] >> 3;// R\npixel565[1] = color[1] >> 2;// G\npixel565[2] = color[2] >> 3;// B\n```\n代码在RGB32、RGB24转RGB565和RGB565转RGB32过程中没有问题，但是在RGB565转RGB24时，出现了问题。\n使用高宽均为10px的图片，转出来的图片，系统不能正确识别显示。但是用Windows绘图程序绘制出来的同样大小的图片却能正确显示。通过比较文件大小发现：\n<table style=\"border=1 cellspacing=0\"><tr><th>自己工具生成图片大小</td><th>绘图生成图片大小</td></tr><tr><td>374</td><td>354</td></tr></table>\n<!--more-->\n## 查阅\n\n通过查阅资料，了解到这其实时Bitmap的一个特性，<font color=#ff0000>Bitmap每一行像素数据都要4字节对齐</font>，如果不够则用0x00填充。\n对于10x10的图片，每行有10个像素，每个像素是24bit，所以一行数据是`10x24b=30B`，但是要对齐4字节的话需要将每行数据对齐到`32Byte`，总共有10行，所以会多出20Bytes。\n\n## 解决\n\n所以修改处理算法code：\n``` cpp\nint count = 0;\nint alignNum = 4 - (pixelMat.cols % 4);\nint alignData = 0;\nMatConstIterator_<Vec3b> pixel, colorend;\nfor(pixel = pixelMat.begin<Vec3b>(), colorend = pixelMat.end<Vec3b>();pixel != colorend;++pixel)\n{\n    outFile.write((char*) &(*pixel)[0], 1);\n    outFile.write((char*) &(*pixel)[1], 1);\n    outFile.write((char*) &(*pixel)[2], 1);\n    if(++count % pixelMat.cols == 0)\n    {\n        // 4 bytes align\n        outFile.write((char *) &alignData, alignNum);\n    }\n}\n```\n**由此联想，在读取或存储Bitmap图片时需要关注图片一行数据的像素值所占的空间是否进行4字节对齐！**\n\n\n","slug":"Bitmap-RGB24-4字节对齐","published":1,"updated":"2019-03-19T14:42:31.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt2y70000zs1kirsdro73","content":"<h1 id=\"Bitmap-RGB24-4字节对齐\"><a href=\"#Bitmap-RGB24-4字节对齐\" class=\"headerlink\" title=\"Bitmap RGB24 4字节对齐\"></a>Bitmap RGB24 4字节对齐</h1><p>因为Bitmap支持最少2种颜色，并且可以支持RLC等压缩方式，所以Bitmap在嵌入式领域使用还是比较广泛的。<br>最近在写一个Bitmap相关的小工具时，发现自己处理出来的Bitmap，系统总是不能正常地识别，但是读出来的数据又都是正确的。而且同样的图片，通过系统工具生成的Bitmap，总会大一些，大小也超过图片<code>LengthxWidthXColotBit + Header</code>。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>需求：<strong>将RGB32或RGB24的Bitmap转换成为RGB565的Bitmap，并且可以将RGB565转成RGB32和RGB24。</strong><br>实现算法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pixel565[<span class=\"number\">0</span>] = color[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">3</span>;<span class=\"comment\">// R</span></span><br><span class=\"line\">pixel565[<span class=\"number\">1</span>] = color[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">2</span>;<span class=\"comment\">// G</span></span><br><span class=\"line\">pixel565[<span class=\"number\">2</span>] = color[<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">3</span>;<span class=\"comment\">// B</span></span><br></pre></td></tr></table></figure>\n<p>代码在RGB32、RGB24转RGB565和RGB565转RGB32过程中没有问题，但是在RGB565转RGB24时，出现了问题。<br>使用高宽均为10px的图片，转出来的图片，系统不能正确识别显示。但是用Windows绘图程序绘制出来的同样大小的图片却能正确显示。通过比较文件大小发现：</p>\n<p><table style=\"border=1 cellspacing=0\"><tr><th>自己工具生成图片大小</th><th>绘图生成图片大小</th></tr><tr><td>374</td><td>354</td></tr></table><br><a id=\"more\"></a></p>\n<h2 id=\"查阅\"><a href=\"#查阅\" class=\"headerlink\" title=\"查阅\"></a>查阅</h2><p>通过查阅资料，了解到这其实时Bitmap的一个特性，<font color=\"#ff0000\">Bitmap每一行像素数据都要4字节对齐</font>，如果不够则用0x00填充。<br>对于10x10的图片，每行有10个像素，每个像素是24bit，所以一行数据是<code>10x24b=30B</code>，但是要对齐4字节的话需要将每行数据对齐到<code>32Byte</code>，总共有10行，所以会多出20Bytes。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>所以修改处理算法code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> alignNum = <span class=\"number\">4</span> - (pixelMat.cols % <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> alignData = <span class=\"number\">0</span>;</span><br><span class=\"line\">MatConstIterator_&lt;Vec3b&gt; pixel, colorend;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(pixel = pixelMat.begin&lt;Vec3b&gt;(), colorend = pixelMat.end&lt;Vec3b&gt;();pixel != colorend;++pixel)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    outFile.write((<span class=\"keyword\">char</span>*) &amp;(*pixel)[<span class=\"number\">0</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    outFile.write((<span class=\"keyword\">char</span>*) &amp;(*pixel)[<span class=\"number\">1</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    outFile.write((<span class=\"keyword\">char</span>*) &amp;(*pixel)[<span class=\"number\">2</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(++count % pixelMat.cols == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 4 bytes align</span></span><br><span class=\"line\">        outFile.write((<span class=\"keyword\">char</span> *) &amp;alignData, alignNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>由此联想，在读取或存储Bitmap图片时需要关注图片一行数据的像素值所占的空间是否进行4字节对齐！</strong></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Bitmap-RGB24-4字节对齐\"><a href=\"#Bitmap-RGB24-4字节对齐\" class=\"headerlink\" title=\"Bitmap RGB24 4字节对齐\"></a>Bitmap RGB24 4字节对齐</h1><p>因为Bitmap支持最少2种颜色，并且可以支持RLC等压缩方式，所以Bitmap在嵌入式领域使用还是比较广泛的。<br>最近在写一个Bitmap相关的小工具时，发现自己处理出来的Bitmap，系统总是不能正常地识别，但是读出来的数据又都是正确的。而且同样的图片，通过系统工具生成的Bitmap，总会大一些，大小也超过图片<code>LengthxWidthXColotBit + Header</code>。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>需求：<strong>将RGB32或RGB24的Bitmap转换成为RGB565的Bitmap，并且可以将RGB565转成RGB32和RGB24。</strong><br>实现算法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pixel565[<span class=\"number\">0</span>] = color[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">3</span>;<span class=\"comment\">// R</span></span><br><span class=\"line\">pixel565[<span class=\"number\">1</span>] = color[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">2</span>;<span class=\"comment\">// G</span></span><br><span class=\"line\">pixel565[<span class=\"number\">2</span>] = color[<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">3</span>;<span class=\"comment\">// B</span></span><br></pre></td></tr></table></figure>\n<p>代码在RGB32、RGB24转RGB565和RGB565转RGB32过程中没有问题，但是在RGB565转RGB24时，出现了问题。<br>使用高宽均为10px的图片，转出来的图片，系统不能正确识别显示。但是用Windows绘图程序绘制出来的同样大小的图片却能正确显示。通过比较文件大小发现：</p>\n<p><table style=\"border=1 cellspacing=0\"><tr><th>自己工具生成图片大小</th><th>绘图生成图片大小</th></tr><tr><td>374</td><td>354</td></tr></table><br>","more":"</p>\n<h2 id=\"查阅\"><a href=\"#查阅\" class=\"headerlink\" title=\"查阅\"></a>查阅</h2><p>通过查阅资料，了解到这其实时Bitmap的一个特性，<font color=\"#ff0000\">Bitmap每一行像素数据都要4字节对齐</font>，如果不够则用0x00填充。<br>对于10x10的图片，每行有10个像素，每个像素是24bit，所以一行数据是<code>10x24b=30B</code>，但是要对齐4字节的话需要将每行数据对齐到<code>32Byte</code>，总共有10行，所以会多出20Bytes。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>所以修改处理算法code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> alignNum = <span class=\"number\">4</span> - (pixelMat.cols % <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> alignData = <span class=\"number\">0</span>;</span><br><span class=\"line\">MatConstIterator_&lt;Vec3b&gt; pixel, colorend;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(pixel = pixelMat.begin&lt;Vec3b&gt;(), colorend = pixelMat.end&lt;Vec3b&gt;();pixel != colorend;++pixel)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    outFile.write((<span class=\"keyword\">char</span>*) &amp;(*pixel)[<span class=\"number\">0</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    outFile.write((<span class=\"keyword\">char</span>*) &amp;(*pixel)[<span class=\"number\">1</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    outFile.write((<span class=\"keyword\">char</span>*) &amp;(*pixel)[<span class=\"number\">2</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(++count % pixelMat.cols == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 4 bytes align</span></span><br><span class=\"line\">        outFile.write((<span class=\"keyword\">char</span> *) &amp;alignData, alignNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>由此联想，在读取或存储Bitmap图片时需要关注图片一行数据的像素值所占的空间是否进行4字节对齐！</strong></p>"},{"title":"Bitmap每个像素值由指定的掩码决定","date":"2017-06-22T10:31:59.000Z","_content":"# Bitmap每个像素值由指定的掩码决定\n\n前面写了一个小工具来转换Bitmap到不同的颜色深度，程序主要的逻辑是：\n`Bitmap文件头 + Bitmap信息头 + Bitmap数据`。\n在RGB32（RGB888）转RGB565的过程中也有遇到一个小问题：输出的颜色和原图的颜色显示不正确，但是像素值是正确的。\n但是使用GIMP导出的图片又是正确的。\n\n通过比较发现内容上有一定的差异，如下图，左边是不正确的图片，右边是正确的图片：\n{% asset_img compare.png %}\n\n<font size=\"2px\" color=#ff0000>**注:**图中使用的是[MadEdit](https://sourceforge.net/projects/madedit/ \"MadEdit\")工具查看二进制数据。</font>\n\n比较发现差异的地方在于：***biCompression = 3***\n\n查阅资料发现：表示每个像素值由指定的掩码决定。\n\n而多余的16个字节依次就是RGBA的颜色掩码，这个掩码来与颜色值进行与运算，得到颜色值。 ","source":"_posts/Bitmap每个像素值由指定的掩码决定.md","raw":"---\ntitle: Bitmap每个像素值由指定的掩码决定\ndate: 2017-06-22 18:31:59\ntags:\n\t- C++\n\t- Bitmap\ncategories:\n\t- 技术\n\t- 图像\n\t- C++\n---\n# Bitmap每个像素值由指定的掩码决定\n\n前面写了一个小工具来转换Bitmap到不同的颜色深度，程序主要的逻辑是：\n`Bitmap文件头 + Bitmap信息头 + Bitmap数据`。\n在RGB32（RGB888）转RGB565的过程中也有遇到一个小问题：输出的颜色和原图的颜色显示不正确，但是像素值是正确的。\n但是使用GIMP导出的图片又是正确的。\n\n通过比较发现内容上有一定的差异，如下图，左边是不正确的图片，右边是正确的图片：\n{% asset_img compare.png %}\n\n<font size=\"2px\" color=#ff0000>**注:**图中使用的是[MadEdit](https://sourceforge.net/projects/madedit/ \"MadEdit\")工具查看二进制数据。</font>\n\n比较发现差异的地方在于：***biCompression = 3***\n\n查阅资料发现：表示每个像素值由指定的掩码决定。\n\n而多余的16个字节依次就是RGBA的颜色掩码，这个掩码来与颜色值进行与运算，得到颜色值。 ","slug":"Bitmap每个像素值由指定的掩码决定","published":1,"updated":"2019-03-19T15:16:56.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt2yi0001zs1kdbw88x8x","content":"<h1 id=\"Bitmap每个像素值由指定的掩码决定\"><a href=\"#Bitmap每个像素值由指定的掩码决定\" class=\"headerlink\" title=\"Bitmap每个像素值由指定的掩码决定\"></a>Bitmap每个像素值由指定的掩码决定</h1><p>前面写了一个小工具来转换Bitmap到不同的颜色深度，程序主要的逻辑是：<br><code>Bitmap文件头 + Bitmap信息头 + Bitmap数据</code>。<br>在RGB32（RGB888）转RGB565的过程中也有遇到一个小问题：输出的颜色和原图的颜色显示不正确，但是像素值是正确的。<br>但是使用GIMP导出的图片又是正确的。</p>\n<p>通过比较发现内容上有一定的差异，如下图，左边是不正确的图片，右边是正确的图片：<br><img src=\"/2017/06/22/Bitmap每个像素值由指定的掩码决定/compare.png\"></p>\n<font size=\"2px\" color=\"#ff0000\"><strong>注:</strong>图中使用的是<a href=\"https://sourceforge.net/projects/madedit/\" title=\"MadEdit\" target=\"_blank\" rel=\"noopener\">MadEdit</a>工具查看二进制数据。</font>\n\n<p>比较发现差异的地方在于：<strong><em>biCompression = 3</em></strong></p>\n<p>查阅资料发现：表示每个像素值由指定的掩码决定。</p>\n<p>而多余的16个字节依次就是RGBA的颜色掩码，这个掩码来与颜色值进行与运算，得到颜色值。 </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Bitmap每个像素值由指定的掩码决定\"><a href=\"#Bitmap每个像素值由指定的掩码决定\" class=\"headerlink\" title=\"Bitmap每个像素值由指定的掩码决定\"></a>Bitmap每个像素值由指定的掩码决定</h1><p>前面写了一个小工具来转换Bitmap到不同的颜色深度，程序主要的逻辑是：<br><code>Bitmap文件头 + Bitmap信息头 + Bitmap数据</code>。<br>在RGB32（RGB888）转RGB565的过程中也有遇到一个小问题：输出的颜色和原图的颜色显示不正确，但是像素值是正确的。<br>但是使用GIMP导出的图片又是正确的。</p>\n<p>通过比较发现内容上有一定的差异，如下图，左边是不正确的图片，右边是正确的图片：<br><img src=\"/2017/06/22/Bitmap每个像素值由指定的掩码决定/compare.png\"></p>\n<font size=\"2px\" color=\"#ff0000\"><strong>注:</strong>图中使用的是<a href=\"https://sourceforge.net/projects/madedit/\" title=\"MadEdit\" target=\"_blank\" rel=\"noopener\">MadEdit</a>工具查看二进制数据。</font>\n\n<p>比较发现差异的地方在于：<strong><em>biCompression = 3</em></strong></p>\n<p>查阅资料发现：表示每个像素值由指定的掩码决定。</p>\n<p>而多余的16个字节依次就是RGBA的颜色掩码，这个掩码来与颜色值进行与运算，得到颜色值。 </p>\n"},{"title":"My First Linux Module","date":"2017-07-13T05:26:29.000Z","_content":"# My First Linux Module\nToday, I successfully build my first linux hello module.\nSo, I write this blog to record this process.\n\n1. First of all add a directory named hello in the kernel/driver, and add a file hello.c, write codes like bellow:\n\n<!--more-->\n```c\n#include <linux/init.h>\n#include <linux/module.h>\n\nstatic int __init hello_init(void)\n{\n    printk(KERN_ERR \" Hello, world!\\n\");\n    return 0;\n}\nstatic void __exit hello_exit(void)\n{\n    printk(KERN_ERR \" Goodbye, world!\\n\");\n}\n\nmodule_init(hello_init);\nmodule_exit(hello_exit);\n\nMODULE_AUTHOR(\"Bob, Zhang\");\nMODULE_LICENSE(\"Dual BSD/GPL\");\n\nMODULE_DESCRIPTION(\"A simple hello world demo\");\nMODULE_ALIAS(\"A simple module\");\n```\n\n2. Then create a Kconfig file:\n```\nconfig HELLO\n    tristate \"HELLO WORLD Driver!\"\n    default m\n    help\n        HELLO WORLD\n```\n3. And create a Makefile file:\n```\nobj-m += hello.o\n```\n4. Next Add the Kconfig and Makefile into the Kconfig file and Makefile file in parent directory.\n\n5. Finally run the commands bellow:\n```\nmake ARCH=arm CROSS_COMPILE=$tool_prefix my_kernel_defconfig\nmake ARCH=arm CROSS_COMPILE=$tool_prefix modules\nmkdir ./moduls_temp\nmake ARCH=arm CROSS_COMPILE=$tool_prefix modules_install INSTALL_MOD_PATH=./modules_temp\n```\n\nAt last, the demo run like this:\n{% asset_img example.png %}","source":"_posts/My-First-Linux-Module.md","raw":"---\ntitle: My First Linux Module\ndate: 2017-07-13 13:26:29\ntags:\n\t- Linux\n\t- Kernel Module\ncategories:\n\t- 技术\n\t- Linux\n---\n# My First Linux Module\nToday, I successfully build my first linux hello module.\nSo, I write this blog to record this process.\n\n1. First of all add a directory named hello in the kernel/driver, and add a file hello.c, write codes like bellow:\n\n<!--more-->\n```c\n#include <linux/init.h>\n#include <linux/module.h>\n\nstatic int __init hello_init(void)\n{\n    printk(KERN_ERR \" Hello, world!\\n\");\n    return 0;\n}\nstatic void __exit hello_exit(void)\n{\n    printk(KERN_ERR \" Goodbye, world!\\n\");\n}\n\nmodule_init(hello_init);\nmodule_exit(hello_exit);\n\nMODULE_AUTHOR(\"Bob, Zhang\");\nMODULE_LICENSE(\"Dual BSD/GPL\");\n\nMODULE_DESCRIPTION(\"A simple hello world demo\");\nMODULE_ALIAS(\"A simple module\");\n```\n\n2. Then create a Kconfig file:\n```\nconfig HELLO\n    tristate \"HELLO WORLD Driver!\"\n    default m\n    help\n        HELLO WORLD\n```\n3. And create a Makefile file:\n```\nobj-m += hello.o\n```\n4. Next Add the Kconfig and Makefile into the Kconfig file and Makefile file in parent directory.\n\n5. Finally run the commands bellow:\n```\nmake ARCH=arm CROSS_COMPILE=$tool_prefix my_kernel_defconfig\nmake ARCH=arm CROSS_COMPILE=$tool_prefix modules\nmkdir ./moduls_temp\nmake ARCH=arm CROSS_COMPILE=$tool_prefix modules_install INSTALL_MOD_PATH=./modules_temp\n```\n\nAt last, the demo run like this:\n{% asset_img example.png %}","slug":"My-First-Linux-Module","published":1,"updated":"2019-03-18T14:28:10.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt2yt0004zs1kxnmduy0o","content":"<h1 id=\"My-First-Linux-Module\"><a href=\"#My-First-Linux-Module\" class=\"headerlink\" title=\"My First Linux Module\"></a>My First Linux Module</h1><p>Today, I successfully build my first linux hello module.<br>So, I write this blog to record this process.</p>\n<ol>\n<li>First of all add a directory named hello in the kernel/driver, and add a file hello.c, write codes like bellow:</li>\n</ol>\n<a id=\"more\"></a>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">hello_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(KERN_ERR <span class=\"string\">\" Hello, world!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __<span class=\"function\"><span class=\"built_in\">exit</span> <span class=\"title\">hello_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(KERN_ERR <span class=\"string\">\" Goodbye, world!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(hello_init);</span><br><span class=\"line\">module_exit(hello_exit);</span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">\"Bob, Zhang\"</span>);</span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"Dual BSD/GPL\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_DESCRIPTION(<span class=\"string\">\"A simple hello world demo\"</span>);</span><br><span class=\"line\">MODULE_ALIAS(<span class=\"string\">\"A simple module\"</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>Then create a Kconfig file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config HELLO</span><br><span class=\"line\">    tristate &quot;HELLO WORLD Driver!&quot;</span><br><span class=\"line\">    default m</span><br><span class=\"line\">    help</span><br><span class=\"line\">        HELLO WORLD</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>And create a Makefile file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj-m += hello.o</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Next Add the Kconfig and Makefile into the Kconfig file and Makefile file in parent directory.</p>\n</li>\n<li><p>Finally run the commands bellow:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make ARCH=arm CROSS_COMPILE=$tool_prefix my_kernel_defconfig</span><br><span class=\"line\">make ARCH=arm CROSS_COMPILE=$tool_prefix modules</span><br><span class=\"line\">mkdir ./moduls_temp</span><br><span class=\"line\">make ARCH=arm CROSS_COMPILE=$tool_prefix modules_install INSTALL_MOD_PATH=./modules_temp</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>At last, the demo run like this:<br><img src=\"/2017/07/13/My-First-Linux-Module/example.png\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"My-First-Linux-Module\"><a href=\"#My-First-Linux-Module\" class=\"headerlink\" title=\"My First Linux Module\"></a>My First Linux Module</h1><p>Today, I successfully build my first linux hello module.<br>So, I write this blog to record this process.</p>\n<ol>\n<li>First of all add a directory named hello in the kernel/driver, and add a file hello.c, write codes like bellow:</li>\n</ol>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">hello_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(KERN_ERR <span class=\"string\">\" Hello, world!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __<span class=\"function\"><span class=\"built_in\">exit</span> <span class=\"title\">hello_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(KERN_ERR <span class=\"string\">\" Goodbye, world!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(hello_init);</span><br><span class=\"line\">module_exit(hello_exit);</span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">\"Bob, Zhang\"</span>);</span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"Dual BSD/GPL\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_DESCRIPTION(<span class=\"string\">\"A simple hello world demo\"</span>);</span><br><span class=\"line\">MODULE_ALIAS(<span class=\"string\">\"A simple module\"</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>Then create a Kconfig file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config HELLO</span><br><span class=\"line\">    tristate &quot;HELLO WORLD Driver!&quot;</span><br><span class=\"line\">    default m</span><br><span class=\"line\">    help</span><br><span class=\"line\">        HELLO WORLD</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>And create a Makefile file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj-m += hello.o</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Next Add the Kconfig and Makefile into the Kconfig file and Makefile file in parent directory.</p>\n</li>\n<li><p>Finally run the commands bellow:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make ARCH=arm CROSS_COMPILE=$tool_prefix my_kernel_defconfig</span><br><span class=\"line\">make ARCH=arm CROSS_COMPILE=$tool_prefix modules</span><br><span class=\"line\">mkdir ./moduls_temp</span><br><span class=\"line\">make ARCH=arm CROSS_COMPILE=$tool_prefix modules_install INSTALL_MOD_PATH=./modules_temp</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>At last, the demo run like this:<br><img src=\"/2017/07/13/My-First-Linux-Module/example.png\"></p>"},{"title":"Socket编程基础","date":"2018-12-02T14:12:21.000Z","_content":"# Socket编程之Socket基础\n\n## 前言\nSocket编程主要分为TCP／UDP／SCTP三种，每一种都有各自的优点，所以会根据实际情况决定选用何种Socket。\n之后会抽取空余时间来开始深入学习Socket编程。\n\n今天学习的是TCP编程。\n\n## 基本流程：\nTCP基本客户端与服务端的套接字函数：\n* Client: \n\t\t* socket\n\t\t* connect\n\t\t* write/read\n\t\t* close.\n<!--more-->\n* Server: \n\t\t* socket\n\t\t* bind\n\t\t* listen\n\t\t* accept\n\t\t* read/write\n\t\t* close.\n\n整个TCP过程，可以参见下图。\n{% asset_img socket_process.png %}\n\n## 三次握手\n三次握手是指客户端调用connect函数发起连接请求，服务端accept函数响应时，发生的3次数据交换过程。\n\n{% asset_img shake_hands.png %} \n\n## 例子\n简单客户端code例子：https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_client.c\n```c\n// simple client: send two number to server, and the server reply the add result.\n// author: SanCPPCoder\n// date: 2018.12.02\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <string.h>\n#include <unistd.h>\n\n#define ADD_SERVER_PORT \t( 8888 )\n#define ADD_SERVER_IP\t\t( \"127.0.0.1\" )\n#define INPUT_COUNT\t\t( 3 )\n\nint main(int argc, char **argv)\n{\n    // get the input\n    if( INPUT_COUNT != argc )\n    {\n        perror( \"Error input!\\nPlease input like:\\n\\t\\t client numberA numberB\\n\" );\n        return -1;\n    }\n\n    double num[2] = { 0.0 };\n    num[0] = atof( &argv[1][0] );\n    num[1] = atof( &argv[2][0] );\n\n    printf( \"The input data is [%f] and [%f].\\n\", num[0], num[1] );\n\n    // socket\n    int client_sock = socket( AF_INET, SOCK_STREAM, 0 ); // IPV4, Stream, TCP\n\n    // define the socket address of server\n    struct sockaddr_in server_addr;\n    bzero( &server_addr, sizeof(server_addr) );\n    server_addr.sin_family = AF_INET; // IPV4\n    server_addr.sin_port = htons( ADD_SERVER_PORT ); // server port\n    server_addr.sin_addr.s_addr = inet_addr( ADD_SERVER_IP ); // server ip\n\n    // connect\n    if( connect( client_sock, (struct sockaddr*)&server_addr, sizeof(server_addr) ) < 0 )\n    {\n        perror( \"Connect to server failed!\\n\" );\n        // TODO: output error information.\n        close( client_sock );\n        return -1;\n    }\n    \n    // send\n    int send_len = 0;\n    if( (send_len = send( client_sock, (char*)&num, sizeof(num), 0 ) ) <= 0 )\n    {\n        perror( \"Send data failed!\\n\" );\n        close( client_sock );\n        // TODO: resend data\n        return -1;\n    }\n\n    // recv\n    double result = 0.0;\n    if( (send_len = recv( client_sock, (char*)&result, sizeof(result), 0 ) ) < 0 )\n    {\n        perror( \"receive data failed!\\n\" );\n        close( client_sock );\n        return -1;\n    }\n\n    printf( \"Receive the result of [%f] + [%f] = [%f].\\n\", num[0], num[1], result );\n\n    // close\n    close( client_sock );\n}\n```\n简单服务端code例子：https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_server.c\n```c\n// simple server: the server get two number from clients, and then reply the add result of the\n// two numbers to client.\n// author: SadCPPCoder\n// date: 2018.12.02\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <string.h>\n#include <unistd.h>\n\n#define ADD_SERVER_PORT \t( 8888 )\n#define ADD_SERVER_IP\t\t( \"127.0.0.1\" )\n#define INPUT_COUNT\t\t( 3 )\n\nint main(int argc, char **argv)\n{\n    // socket\n    int server_sock = socket( AF_INET, SOCK_STREAM, 0 );\n\n    // define socket address\n    struct sockaddr_in server_addr;\n    bzero( (char*)&server_addr, sizeof(server_addr) );\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons( ADD_SERVER_PORT );\n    server_addr.sin_addr.s_addr = htonl( INADDR_ANY );\n\n    // bind\n    if( bind( server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1 )\n    {\n        perror( \"bind failed!\\n\" );\n        close( server_sock );\n        return -1;\n    }\n\n    // listen\n    while( 1 )\n    {\n\tif( listen( server_sock, 5 ) == -1 )\n\t{\n\t    perror( \"listen failed!\\n\" );\n\t    close( server_sock );\n\t    return -1;\n\t}\n\n\t// client socket\n\tdouble num[2] = { 0.0 };\n\tstruct sockaddr_in client_addr;\n\tbzero( (char*)&client_addr, sizeof(client_addr) );\n\tsocklen_t length = sizeof(client_addr);\n\n\tint connect_fd = 0;\n\tif( (connect_fd = accept( server_sock, (struct sockaddr*)&client_addr, &length ) ) < 0 )\n\t{\n\t    perror( \"Conncet failed!\\n\" );\n\t    close( server_sock );\n\t    return -1;\n\t}\n\n\tint len = 0;\n\tif( (len = recv( connect_fd, (char*)&num, sizeof(num), 0 ) ) < 0 )\n\t{\n\t    perror( \"receive data failed!\\n\" );\n\t    close( connect_fd );\n\t    close( server_sock );\n\t    return -1;\n\t}\n\n\tdouble result = num[0] + num[1];\n\n\t// send data to client\n\tif( (len = send( connect_fd, (char*)&result, sizeof(result), 0 ) ) < 0 )\n\t{\n\t    perror( \"send result failed!\\n\" );\n\t    close( connect_fd );\n\t    close( server_sock );\n\t    return -1;\n\t}\n\n\tclose( connect_fd );\n    }\n    close( server_sock );\n\n    return 0;\n}\n```","source":"_posts/Socket编程基础.md","raw":"---\ntitle: Socket编程基础\ndate: 2018-12-02 22:12:21\ntags:\n\t- Linux\n\t- Socket\ncategories:\n\t- 技术\n\t- linux\n\t- 网络\n---\n# Socket编程之Socket基础\n\n## 前言\nSocket编程主要分为TCP／UDP／SCTP三种，每一种都有各自的优点，所以会根据实际情况决定选用何种Socket。\n之后会抽取空余时间来开始深入学习Socket编程。\n\n今天学习的是TCP编程。\n\n## 基本流程：\nTCP基本客户端与服务端的套接字函数：\n* Client: \n\t\t* socket\n\t\t* connect\n\t\t* write/read\n\t\t* close.\n<!--more-->\n* Server: \n\t\t* socket\n\t\t* bind\n\t\t* listen\n\t\t* accept\n\t\t* read/write\n\t\t* close.\n\n整个TCP过程，可以参见下图。\n{% asset_img socket_process.png %}\n\n## 三次握手\n三次握手是指客户端调用connect函数发起连接请求，服务端accept函数响应时，发生的3次数据交换过程。\n\n{% asset_img shake_hands.png %} \n\n## 例子\n简单客户端code例子：https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_client.c\n```c\n// simple client: send two number to server, and the server reply the add result.\n// author: SanCPPCoder\n// date: 2018.12.02\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <string.h>\n#include <unistd.h>\n\n#define ADD_SERVER_PORT \t( 8888 )\n#define ADD_SERVER_IP\t\t( \"127.0.0.1\" )\n#define INPUT_COUNT\t\t( 3 )\n\nint main(int argc, char **argv)\n{\n    // get the input\n    if( INPUT_COUNT != argc )\n    {\n        perror( \"Error input!\\nPlease input like:\\n\\t\\t client numberA numberB\\n\" );\n        return -1;\n    }\n\n    double num[2] = { 0.0 };\n    num[0] = atof( &argv[1][0] );\n    num[1] = atof( &argv[2][0] );\n\n    printf( \"The input data is [%f] and [%f].\\n\", num[0], num[1] );\n\n    // socket\n    int client_sock = socket( AF_INET, SOCK_STREAM, 0 ); // IPV4, Stream, TCP\n\n    // define the socket address of server\n    struct sockaddr_in server_addr;\n    bzero( &server_addr, sizeof(server_addr) );\n    server_addr.sin_family = AF_INET; // IPV4\n    server_addr.sin_port = htons( ADD_SERVER_PORT ); // server port\n    server_addr.sin_addr.s_addr = inet_addr( ADD_SERVER_IP ); // server ip\n\n    // connect\n    if( connect( client_sock, (struct sockaddr*)&server_addr, sizeof(server_addr) ) < 0 )\n    {\n        perror( \"Connect to server failed!\\n\" );\n        // TODO: output error information.\n        close( client_sock );\n        return -1;\n    }\n    \n    // send\n    int send_len = 0;\n    if( (send_len = send( client_sock, (char*)&num, sizeof(num), 0 ) ) <= 0 )\n    {\n        perror( \"Send data failed!\\n\" );\n        close( client_sock );\n        // TODO: resend data\n        return -1;\n    }\n\n    // recv\n    double result = 0.0;\n    if( (send_len = recv( client_sock, (char*)&result, sizeof(result), 0 ) ) < 0 )\n    {\n        perror( \"receive data failed!\\n\" );\n        close( client_sock );\n        return -1;\n    }\n\n    printf( \"Receive the result of [%f] + [%f] = [%f].\\n\", num[0], num[1], result );\n\n    // close\n    close( client_sock );\n}\n```\n简单服务端code例子：https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_server.c\n```c\n// simple server: the server get two number from clients, and then reply the add result of the\n// two numbers to client.\n// author: SadCPPCoder\n// date: 2018.12.02\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <string.h>\n#include <unistd.h>\n\n#define ADD_SERVER_PORT \t( 8888 )\n#define ADD_SERVER_IP\t\t( \"127.0.0.1\" )\n#define INPUT_COUNT\t\t( 3 )\n\nint main(int argc, char **argv)\n{\n    // socket\n    int server_sock = socket( AF_INET, SOCK_STREAM, 0 );\n\n    // define socket address\n    struct sockaddr_in server_addr;\n    bzero( (char*)&server_addr, sizeof(server_addr) );\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons( ADD_SERVER_PORT );\n    server_addr.sin_addr.s_addr = htonl( INADDR_ANY );\n\n    // bind\n    if( bind( server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1 )\n    {\n        perror( \"bind failed!\\n\" );\n        close( server_sock );\n        return -1;\n    }\n\n    // listen\n    while( 1 )\n    {\n\tif( listen( server_sock, 5 ) == -1 )\n\t{\n\t    perror( \"listen failed!\\n\" );\n\t    close( server_sock );\n\t    return -1;\n\t}\n\n\t// client socket\n\tdouble num[2] = { 0.0 };\n\tstruct sockaddr_in client_addr;\n\tbzero( (char*)&client_addr, sizeof(client_addr) );\n\tsocklen_t length = sizeof(client_addr);\n\n\tint connect_fd = 0;\n\tif( (connect_fd = accept( server_sock, (struct sockaddr*)&client_addr, &length ) ) < 0 )\n\t{\n\t    perror( \"Conncet failed!\\n\" );\n\t    close( server_sock );\n\t    return -1;\n\t}\n\n\tint len = 0;\n\tif( (len = recv( connect_fd, (char*)&num, sizeof(num), 0 ) ) < 0 )\n\t{\n\t    perror( \"receive data failed!\\n\" );\n\t    close( connect_fd );\n\t    close( server_sock );\n\t    return -1;\n\t}\n\n\tdouble result = num[0] + num[1];\n\n\t// send data to client\n\tif( (len = send( connect_fd, (char*)&result, sizeof(result), 0 ) ) < 0 )\n\t{\n\t    perror( \"send result failed!\\n\" );\n\t    close( connect_fd );\n\t    close( server_sock );\n\t    return -1;\n\t}\n\n\tclose( connect_fd );\n    }\n    close( server_sock );\n\n    return 0;\n}\n```","slug":"Socket编程基础","published":1,"updated":"2019-03-17T10:57:56.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt2yx0005zs1ksb4j8xb1","content":"<h1 id=\"Socket编程之Socket基础\"><a href=\"#Socket编程之Socket基础\" class=\"headerlink\" title=\"Socket编程之Socket基础\"></a>Socket编程之Socket基础</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Socket编程主要分为TCP／UDP／SCTP三种，每一种都有各自的优点，所以会根据实际情况决定选用何种Socket。<br>之后会抽取空余时间来开始深入学习Socket编程。</p>\n<p>今天学习的是TCP编程。</p>\n<h2 id=\"基本流程：\"><a href=\"#基本流程：\" class=\"headerlink\" title=\"基本流程：\"></a>基本流程：</h2><p>TCP基本客户端与服务端的套接字函数：</p>\n<ul>\n<li>Client: <pre><code>* socket\n* connect\n* write/read\n* close.\n</code></pre><a id=\"more\"></a></li>\n<li>Server: <pre><code>* socket\n* bind\n* listen\n* accept\n* read/write\n* close.\n</code></pre></li>\n</ul>\n<p>整个TCP过程，可以参见下图。<br><img src=\"/2018/12/02/Socket编程基础/socket_process.png\"></p>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p>三次握手是指客户端调用connect函数发起连接请求，服务端accept函数响应时，发生的3次数据交换过程。</p>\n<img src=\"/2018/12/02/Socket编程基础/shake_hands.png\"> \n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>简单客户端code例子：<a href=\"https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_client.c\" target=\"_blank\" rel=\"noopener\">https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_client.c</a><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// simple client: send two number to server, and the server reply the add result.</span></span><br><span class=\"line\"><span class=\"comment\">// author: SanCPPCoder</span></span><br><span class=\"line\"><span class=\"comment\">// date: 2018.12.02</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD_SERVER_PORT \t( 8888 )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD_SERVER_IP\t\t( <span class=\"meta-string\">\"127.0.0.1\"</span> )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INPUT_COUNT\t\t( 3 )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// get the input</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( INPUT_COUNT != argc )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"Error input!\\nPlease input like:\\n\\t\\t client numberA numberB\\n\"</span> );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">double</span> num[<span class=\"number\">2</span>] = &#123; <span class=\"number\">0.0</span> &#125;;</span><br><span class=\"line\">    num[<span class=\"number\">0</span>] = atof( &amp;argv[<span class=\"number\">1</span>][<span class=\"number\">0</span>] );</span><br><span class=\"line\">    num[<span class=\"number\">1</span>] = atof( &amp;argv[<span class=\"number\">2</span>][<span class=\"number\">0</span>] );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>( <span class=\"string\">\"The input data is [%f] and [%f].\\n\"</span>, num[<span class=\"number\">0</span>], num[<span class=\"number\">1</span>] );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// socket</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> client_sock = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> ); <span class=\"comment\">// IPV4, Stream, TCP</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// define the socket address of server</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    bzero( &amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr) );</span><br><span class=\"line\">    server_addr.sin_family = AF_INET; <span class=\"comment\">// IPV4</span></span><br><span class=\"line\">    server_addr.sin_port = htons( ADD_SERVER_PORT ); <span class=\"comment\">// server port</span></span><br><span class=\"line\">    server_addr.sin_addr.s_addr = inet_addr( ADD_SERVER_IP ); <span class=\"comment\">// server ip</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// connect</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( connect( client_sock, (struct sockaddr*)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"Connect to server failed!\\n\"</span> );</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> output error information.</span></span><br><span class=\"line\">        close( client_sock );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// send</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> send_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( (send_len = send( client_sock, (<span class=\"keyword\">char</span>*)&amp;num, <span class=\"keyword\">sizeof</span>(num), <span class=\"number\">0</span> ) ) &lt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"Send data failed!\\n\"</span> );</span><br><span class=\"line\">        close( client_sock );</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> resend data</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// recv</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( (send_len = recv( client_sock, (<span class=\"keyword\">char</span>*)&amp;result, <span class=\"keyword\">sizeof</span>(result), <span class=\"number\">0</span> ) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"receive data failed!\\n\"</span> );</span><br><span class=\"line\">        close( client_sock );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>( <span class=\"string\">\"Receive the result of [%f] + [%f] = [%f].\\n\"</span>, num[<span class=\"number\">0</span>], num[<span class=\"number\">1</span>], result );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// close</span></span><br><span class=\"line\">    close( client_sock );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>简单服务端code例子：<a href=\"https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_server.c\" target=\"_blank\" rel=\"noopener\">https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_server.c</a><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// simple server: the server get two number from clients, and then reply the add result of the</span></span><br><span class=\"line\"><span class=\"comment\">// two numbers to client.</span></span><br><span class=\"line\"><span class=\"comment\">// author: SadCPPCoder</span></span><br><span class=\"line\"><span class=\"comment\">// date: 2018.12.02</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD_SERVER_PORT \t( 8888 )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD_SERVER_IP\t\t( <span class=\"meta-string\">\"127.0.0.1\"</span> )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INPUT_COUNT\t\t( 3 )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// socket</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> server_sock = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// define socket address</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    bzero( (<span class=\"keyword\">char</span>*)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr) );</span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons( ADD_SERVER_PORT );</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = htonl( INADDR_ANY );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// bind</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( bind( server_sock, (struct sockaddr*)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"bind failed!\\n\"</span> );</span><br><span class=\"line\">        close( server_sock );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// listen</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( listen( server_sock, <span class=\"number\">5</span> ) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    perror( <span class=\"string\">\"listen failed!\\n\"</span> );</span><br><span class=\"line\">\t    close( server_sock );</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// client socket</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> num[<span class=\"number\">2</span>] = &#123; <span class=\"number\">0.0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">client_addr</span>;</span></span><br><span class=\"line\">\tbzero( (<span class=\"keyword\">char</span>*)&amp;client_addr, <span class=\"keyword\">sizeof</span>(client_addr) );</span><br><span class=\"line\">\t<span class=\"keyword\">socklen_t</span> length = <span class=\"keyword\">sizeof</span>(client_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> connect_fd = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( (connect_fd = accept( server_sock, (struct sockaddr*)&amp;client_addr, &amp;length ) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    perror( <span class=\"string\">\"Conncet failed!\\n\"</span> );</span><br><span class=\"line\">\t    close( server_sock );</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( (len = recv( connect_fd, (<span class=\"keyword\">char</span>*)&amp;num, <span class=\"keyword\">sizeof</span>(num), <span class=\"number\">0</span> ) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    perror( <span class=\"string\">\"receive data failed!\\n\"</span> );</span><br><span class=\"line\">\t    close( connect_fd );</span><br><span class=\"line\">\t    close( server_sock );</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> result = num[<span class=\"number\">0</span>] + num[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// send data to client</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( (len = send( connect_fd, (<span class=\"keyword\">char</span>*)&amp;result, <span class=\"keyword\">sizeof</span>(result), <span class=\"number\">0</span> ) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    perror( <span class=\"string\">\"send result failed!\\n\"</span> );</span><br><span class=\"line\">\t    close( connect_fd );</span><br><span class=\"line\">\t    close( server_sock );</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclose( connect_fd );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close( server_sock );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Socket编程之Socket基础\"><a href=\"#Socket编程之Socket基础\" class=\"headerlink\" title=\"Socket编程之Socket基础\"></a>Socket编程之Socket基础</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Socket编程主要分为TCP／UDP／SCTP三种，每一种都有各自的优点，所以会根据实际情况决定选用何种Socket。<br>之后会抽取空余时间来开始深入学习Socket编程。</p>\n<p>今天学习的是TCP编程。</p>\n<h2 id=\"基本流程：\"><a href=\"#基本流程：\" class=\"headerlink\" title=\"基本流程：\"></a>基本流程：</h2><p>TCP基本客户端与服务端的套接字函数：</p>\n<ul>\n<li>Client: <pre><code>* socket\n* connect\n* write/read\n* close.\n</code></pre>","more":"</li>\n<li>Server: <pre><code>* socket\n* bind\n* listen\n* accept\n* read/write\n* close.\n</code></pre></li>\n</ul>\n<p>整个TCP过程，可以参见下图。<br><img src=\"/2018/12/02/Socket编程基础/socket_process.png\"></p>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p>三次握手是指客户端调用connect函数发起连接请求，服务端accept函数响应时，发生的3次数据交换过程。</p>\n<img src=\"/2018/12/02/Socket编程基础/shake_hands.png\"> \n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>简单客户端code例子：<a href=\"https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_client.c\" target=\"_blank\" rel=\"noopener\">https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_client.c</a><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// simple client: send two number to server, and the server reply the add result.</span></span><br><span class=\"line\"><span class=\"comment\">// author: SanCPPCoder</span></span><br><span class=\"line\"><span class=\"comment\">// date: 2018.12.02</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD_SERVER_PORT \t( 8888 )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD_SERVER_IP\t\t( <span class=\"meta-string\">\"127.0.0.1\"</span> )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INPUT_COUNT\t\t( 3 )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// get the input</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( INPUT_COUNT != argc )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"Error input!\\nPlease input like:\\n\\t\\t client numberA numberB\\n\"</span> );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">double</span> num[<span class=\"number\">2</span>] = &#123; <span class=\"number\">0.0</span> &#125;;</span><br><span class=\"line\">    num[<span class=\"number\">0</span>] = atof( &amp;argv[<span class=\"number\">1</span>][<span class=\"number\">0</span>] );</span><br><span class=\"line\">    num[<span class=\"number\">1</span>] = atof( &amp;argv[<span class=\"number\">2</span>][<span class=\"number\">0</span>] );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>( <span class=\"string\">\"The input data is [%f] and [%f].\\n\"</span>, num[<span class=\"number\">0</span>], num[<span class=\"number\">1</span>] );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// socket</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> client_sock = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> ); <span class=\"comment\">// IPV4, Stream, TCP</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// define the socket address of server</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    bzero( &amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr) );</span><br><span class=\"line\">    server_addr.sin_family = AF_INET; <span class=\"comment\">// IPV4</span></span><br><span class=\"line\">    server_addr.sin_port = htons( ADD_SERVER_PORT ); <span class=\"comment\">// server port</span></span><br><span class=\"line\">    server_addr.sin_addr.s_addr = inet_addr( ADD_SERVER_IP ); <span class=\"comment\">// server ip</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// connect</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( connect( client_sock, (struct sockaddr*)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"Connect to server failed!\\n\"</span> );</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> output error information.</span></span><br><span class=\"line\">        close( client_sock );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// send</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> send_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( (send_len = send( client_sock, (<span class=\"keyword\">char</span>*)&amp;num, <span class=\"keyword\">sizeof</span>(num), <span class=\"number\">0</span> ) ) &lt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"Send data failed!\\n\"</span> );</span><br><span class=\"line\">        close( client_sock );</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> resend data</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// recv</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( (send_len = recv( client_sock, (<span class=\"keyword\">char</span>*)&amp;result, <span class=\"keyword\">sizeof</span>(result), <span class=\"number\">0</span> ) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"receive data failed!\\n\"</span> );</span><br><span class=\"line\">        close( client_sock );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>( <span class=\"string\">\"Receive the result of [%f] + [%f] = [%f].\\n\"</span>, num[<span class=\"number\">0</span>], num[<span class=\"number\">1</span>], result );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// close</span></span><br><span class=\"line\">    close( client_sock );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>简单服务端code例子：<a href=\"https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_server.c\" target=\"_blank\" rel=\"noopener\">https://github.com/SadCPPCoder/Socket/blob/master/2018.12.02/tcp/add_server.c</a><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// simple server: the server get two number from clients, and then reply the add result of the</span></span><br><span class=\"line\"><span class=\"comment\">// two numbers to client.</span></span><br><span class=\"line\"><span class=\"comment\">// author: SadCPPCoder</span></span><br><span class=\"line\"><span class=\"comment\">// date: 2018.12.02</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD_SERVER_PORT \t( 8888 )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADD_SERVER_IP\t\t( <span class=\"meta-string\">\"127.0.0.1\"</span> )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INPUT_COUNT\t\t( 3 )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// socket</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> server_sock = socket( AF_INET, SOCK_STREAM, <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// define socket address</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">server_addr</span>;</span></span><br><span class=\"line\">    bzero( (<span class=\"keyword\">char</span>*)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr) );</span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons( ADD_SERVER_PORT );</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = htonl( INADDR_ANY );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// bind</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( bind( server_sock, (struct sockaddr*)&amp;server_addr, <span class=\"keyword\">sizeof</span>(server_addr)) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror( <span class=\"string\">\"bind failed!\\n\"</span> );</span><br><span class=\"line\">        close( server_sock );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// listen</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( listen( server_sock, <span class=\"number\">5</span> ) == <span class=\"number\">-1</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    perror( <span class=\"string\">\"listen failed!\\n\"</span> );</span><br><span class=\"line\">\t    close( server_sock );</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// client socket</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> num[<span class=\"number\">2</span>] = &#123; <span class=\"number\">0.0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">client_addr</span>;</span></span><br><span class=\"line\">\tbzero( (<span class=\"keyword\">char</span>*)&amp;client_addr, <span class=\"keyword\">sizeof</span>(client_addr) );</span><br><span class=\"line\">\t<span class=\"keyword\">socklen_t</span> length = <span class=\"keyword\">sizeof</span>(client_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> connect_fd = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( (connect_fd = accept( server_sock, (struct sockaddr*)&amp;client_addr, &amp;length ) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    perror( <span class=\"string\">\"Conncet failed!\\n\"</span> );</span><br><span class=\"line\">\t    close( server_sock );</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( (len = recv( connect_fd, (<span class=\"keyword\">char</span>*)&amp;num, <span class=\"keyword\">sizeof</span>(num), <span class=\"number\">0</span> ) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    perror( <span class=\"string\">\"receive data failed!\\n\"</span> );</span><br><span class=\"line\">\t    close( connect_fd );</span><br><span class=\"line\">\t    close( server_sock );</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> result = num[<span class=\"number\">0</span>] + num[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// send data to client</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( (len = send( connect_fd, (<span class=\"keyword\">char</span>*)&amp;result, <span class=\"keyword\">sizeof</span>(result), <span class=\"number\">0</span> ) ) &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    perror( <span class=\"string\">\"send result failed!\\n\"</span> );</span><br><span class=\"line\">\t    close( connect_fd );</span><br><span class=\"line\">\t    close( server_sock );</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclose( connect_fd );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close( server_sock );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"binary and out mode to open a file","date":"2017-12-21T02:17:34.000Z","_content":"# binary and out mode to open a file\nWhen I use binary and out mode to open a exist file, and to modify the 4th and 8th byte data to 0x78, I found that the whole file will be rewrite, like below:\n``` cpp\n#include <fstream>\n#include <iostream>\nusing namespace std;\n \nint main(int argc, char **argv)\n{\n    fstream out;\n    out.open(\"./test.txt\", ios_base::binary | ios_base::out);\n \n    uint8_t data = 0x78;\n \n    out.seekp(4, ios_base::beg);\n    out.write((char *)&data, 1);\n \n    out.seekp(8, ios_base::beg);\n    out.write((char *)&data, 1);\n \n    out.close();\n    return 0;\n}\n```\n<!--more-->\nAnd the file original data is :\n\n```\nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\n```\n\nBut the file modified is:\n\n```\n00 00 00 00 78 00 00 00 78\n```\n\nI have tried ios::app and ios::ate, the ios::app will out put my data at the end of the file and the skeep do not work.\n\nFinally, I thought out that the file is just a out file, so the api will not see the original data of the file, so I should add the ios::in.\n\n``` cpp\n#include <fstream>\n#include <iostream>\nusing namespace std;\n \nint main(int argc, char **argv)\n{\n    fstream out;\n    out.open(\"./test.txt\", ios_base::binary | ios_base::out | ios_base::in);\n \n    uint8_t data = 0x78;\n \n    out.seekp(4, ios_base::beg);\n    out.write((char *)&data, 1);\n \n    out.seekp(8, ios_base::beg);\n    out.write((char *)&data, 1);\n \n    out.close();\n    return 0;\n}\n```\n\nAnd finally, I got the right data.\n\n```\nFF FF FF FF 78 FF FF FF 78 FF FF FF FF FF FF FF\n```","source":"_posts/binary-and-out-mode-to-open-a-file.md","raw":"---\ntitle: binary and out mode to open a file\ndate: 2017-12-21 10:17:34\ntags:\n\t- C++\n\t- Input/Output\ncategories:\n\t- 技术\n\t- C++\n---\n# binary and out mode to open a file\nWhen I use binary and out mode to open a exist file, and to modify the 4th and 8th byte data to 0x78, I found that the whole file will be rewrite, like below:\n``` cpp\n#include <fstream>\n#include <iostream>\nusing namespace std;\n \nint main(int argc, char **argv)\n{\n    fstream out;\n    out.open(\"./test.txt\", ios_base::binary | ios_base::out);\n \n    uint8_t data = 0x78;\n \n    out.seekp(4, ios_base::beg);\n    out.write((char *)&data, 1);\n \n    out.seekp(8, ios_base::beg);\n    out.write((char *)&data, 1);\n \n    out.close();\n    return 0;\n}\n```\n<!--more-->\nAnd the file original data is :\n\n```\nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\n```\n\nBut the file modified is:\n\n```\n00 00 00 00 78 00 00 00 78\n```\n\nI have tried ios::app and ios::ate, the ios::app will out put my data at the end of the file and the skeep do not work.\n\nFinally, I thought out that the file is just a out file, so the api will not see the original data of the file, so I should add the ios::in.\n\n``` cpp\n#include <fstream>\n#include <iostream>\nusing namespace std;\n \nint main(int argc, char **argv)\n{\n    fstream out;\n    out.open(\"./test.txt\", ios_base::binary | ios_base::out | ios_base::in);\n \n    uint8_t data = 0x78;\n \n    out.seekp(4, ios_base::beg);\n    out.write((char *)&data, 1);\n \n    out.seekp(8, ios_base::beg);\n    out.write((char *)&data, 1);\n \n    out.close();\n    return 0;\n}\n```\n\nAnd finally, I got the right data.\n\n```\nFF FF FF FF 78 FF FF FF 78 FF FF FF FF FF FF FF\n```","slug":"binary-and-out-mode-to-open-a-file","published":1,"updated":"2019-03-18T14:34:34.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt2z30006zs1kzru3p7ij","content":"<h1 id=\"binary-and-out-mode-to-open-a-file\"><a href=\"#binary-and-out-mode-to-open-a-file\" class=\"headerlink\" title=\"binary and out mode to open a file\"></a>binary and out mode to open a file</h1><p>When I use binary and out mode to open a exist file, and to modify the 4th and 8th byte data to 0x78, I found that the whole file will be rewrite, like below:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fstream out;</span><br><span class=\"line\">    out.open(<span class=\"string\">\"./test.txt\"</span>, ios_base::binary | ios_base::out);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> data = <span class=\"number\">0x78</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.seekp(<span class=\"number\">4</span>, ios_base::beg);</span><br><span class=\"line\">    out.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.seekp(<span class=\"number\">8</span>, ios_base::beg);</span><br><span class=\"line\">    out.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>And the file original data is :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br></pre></td></tr></table></figure>\n<p>But the file modified is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00 00 00 00 78 00 00 00 78</span><br></pre></td></tr></table></figure>\n<p>I have tried ios::app and ios::ate, the ios::app will out put my data at the end of the file and the skeep do not work.</p>\n<p>Finally, I thought out that the file is just a out file, so the api will not see the original data of the file, so I should add the ios::in.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fstream out;</span><br><span class=\"line\">    out.open(<span class=\"string\">\"./test.txt\"</span>, ios_base::binary | ios_base::out | ios_base::in);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> data = <span class=\"number\">0x78</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.seekp(<span class=\"number\">4</span>, ios_base::beg);</span><br><span class=\"line\">    out.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.seekp(<span class=\"number\">8</span>, ios_base::beg);</span><br><span class=\"line\">    out.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And finally, I got the right data.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FF FF FF FF 78 FF FF FF 78 FF FF FF FF FF FF FF</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"binary-and-out-mode-to-open-a-file\"><a href=\"#binary-and-out-mode-to-open-a-file\" class=\"headerlink\" title=\"binary and out mode to open a file\"></a>binary and out mode to open a file</h1><p>When I use binary and out mode to open a exist file, and to modify the 4th and 8th byte data to 0x78, I found that the whole file will be rewrite, like below:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fstream out;</span><br><span class=\"line\">    out.open(<span class=\"string\">\"./test.txt\"</span>, ios_base::binary | ios_base::out);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> data = <span class=\"number\">0x78</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.seekp(<span class=\"number\">4</span>, ios_base::beg);</span><br><span class=\"line\">    out.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.seekp(<span class=\"number\">8</span>, ios_base::beg);</span><br><span class=\"line\">    out.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>And the file original data is :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br></pre></td></tr></table></figure>\n<p>But the file modified is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00 00 00 00 78 00 00 00 78</span><br></pre></td></tr></table></figure>\n<p>I have tried ios::app and ios::ate, the ios::app will out put my data at the end of the file and the skeep do not work.</p>\n<p>Finally, I thought out that the file is just a out file, so the api will not see the original data of the file, so I should add the ios::in.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fstream out;</span><br><span class=\"line\">    out.open(<span class=\"string\">\"./test.txt\"</span>, ios_base::binary | ios_base::out | ios_base::in);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> data = <span class=\"number\">0x78</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.seekp(<span class=\"number\">4</span>, ios_base::beg);</span><br><span class=\"line\">    out.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.seekp(<span class=\"number\">8</span>, ios_base::beg);</span><br><span class=\"line\">    out.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And finally, I got the right data.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FF FF FF FF 78 FF FF FF 78 FF FF FF FF FF FF FF</span><br></pre></td></tr></table></figure>"},{"title":"三星S8 刷机记录","date":"2019-02-26T12:08:34.000Z","_content":"# 三星Galaxy S8 刷机经验记录\n\n这段时间用上了三星S8，由于原生系统太耗电，所以萌生了root的想法。写这篇博客记录下这段时间的各种尝试。\n\n# Root过程说明：\n\n友情提示，**<font color=#FF00ff>道路千万条，安全第一条。开始捣鼓手机之前请一定准备好官方的救砖包。</font>**\n\n1. 解锁手机，我手上这台S8，时需要手机端先下载软件（crom1.0.8.apk)进行解锁；\n\n2. 刷入第三方recovery，我选择的TWRP，在TWRP官网上下载了针对我高通CPU版本的刷机包；\n<!--more-->\n3. 三星有自己的刷机工具ODin，到官网下载了最新版的ODin备用；\n\n4. 下载安装S8的驱动，手机驱动可以到官网下载，或者安装豌豆荚这类的应用；\n\n5. 手机关机->电源+Bixby+音量下->进入刷机模式->连接电脑->打开ODin，识别到手机->在AP中选择TWRP刷机包->开始刷机->手机重启时立马按住电源+Bixby+音量上进入Recovery，避免系统重启后重新覆盖recovery分区；\n\n6. 刷入第三方Kernel（千万记住选择对应手机型号，以及CPU型号），或者第三方Rom来进行刷机。由于我直接刷入Magisk来获取root权限会导致系统无限重启，所以直接使用了第三方的刷机包，刷机包可以到XDA或者GFan论坛查找。\n\n刷入第三方rom后即获得Root权限，所以开始着手于电池电量优化，安装了绿色守护和黑域并行作业，使用自动运行管理对开机启动进行优化，配合内核调校(需要对应CPU的配置）后，开机一晚耗电从原来的十几个点到现在的一晚上4个点左右，最好成绩是没有掉一个电，简直是奇迹。\n\n开启免打扰似乎会减少手机射频耗电。\n\n# 最后记录下一些方便的工具：\n\nAppFreezer：免Root冻结\n\nGScript：脚本执行器\n\nGSamBatteryMonitor：电池监控\n\nPackage NamesView：包名查看器\n\n创建快捷方式：可以将activity创建一个快捷方式\n\n钛备份：可以备份程序和数据，但是恢复的时候我只能一个一个安装\n\nKernel Adiutor：内核参数修改，可以修改CPU，GPU，IO，温控等\n\nEX Kernel Manager：类似内核调校，不过可以将配置保存下来，也可以载入配置。\n\n# 补充:\n\n使用了绿色守护+黑域，一晚上待机的情况下，配合EX KernelManager的省电模式，关闭所有后台后，在没有关wifi的情况下，只耗了一个电(哈哈，不由地露出了欣慰的笑容)。\n{% asset_img battery.jpg %}\n\n{% asset_img GMS1.jpg %}\n\n* 实测发现使用免打扰模式，可以降低手机电话信号耗电。\n\n{% asset_img GMS2.jpg %}","source":"_posts/三星S8-刷机记录.md","raw":"---\ntitle: 三星S8 刷机记录\ndate: 2019-02-26 20:08:34\ntags:\n\t- 玩弄手机\ncategories:\n\t- 技术\n\t- 杂技\n---\n# 三星Galaxy S8 刷机经验记录\n\n这段时间用上了三星S8，由于原生系统太耗电，所以萌生了root的想法。写这篇博客记录下这段时间的各种尝试。\n\n# Root过程说明：\n\n友情提示，**<font color=#FF00ff>道路千万条，安全第一条。开始捣鼓手机之前请一定准备好官方的救砖包。</font>**\n\n1. 解锁手机，我手上这台S8，时需要手机端先下载软件（crom1.0.8.apk)进行解锁；\n\n2. 刷入第三方recovery，我选择的TWRP，在TWRP官网上下载了针对我高通CPU版本的刷机包；\n<!--more-->\n3. 三星有自己的刷机工具ODin，到官网下载了最新版的ODin备用；\n\n4. 下载安装S8的驱动，手机驱动可以到官网下载，或者安装豌豆荚这类的应用；\n\n5. 手机关机->电源+Bixby+音量下->进入刷机模式->连接电脑->打开ODin，识别到手机->在AP中选择TWRP刷机包->开始刷机->手机重启时立马按住电源+Bixby+音量上进入Recovery，避免系统重启后重新覆盖recovery分区；\n\n6. 刷入第三方Kernel（千万记住选择对应手机型号，以及CPU型号），或者第三方Rom来进行刷机。由于我直接刷入Magisk来获取root权限会导致系统无限重启，所以直接使用了第三方的刷机包，刷机包可以到XDA或者GFan论坛查找。\n\n刷入第三方rom后即获得Root权限，所以开始着手于电池电量优化，安装了绿色守护和黑域并行作业，使用自动运行管理对开机启动进行优化，配合内核调校(需要对应CPU的配置）后，开机一晚耗电从原来的十几个点到现在的一晚上4个点左右，最好成绩是没有掉一个电，简直是奇迹。\n\n开启免打扰似乎会减少手机射频耗电。\n\n# 最后记录下一些方便的工具：\n\nAppFreezer：免Root冻结\n\nGScript：脚本执行器\n\nGSamBatteryMonitor：电池监控\n\nPackage NamesView：包名查看器\n\n创建快捷方式：可以将activity创建一个快捷方式\n\n钛备份：可以备份程序和数据，但是恢复的时候我只能一个一个安装\n\nKernel Adiutor：内核参数修改，可以修改CPU，GPU，IO，温控等\n\nEX Kernel Manager：类似内核调校，不过可以将配置保存下来，也可以载入配置。\n\n# 补充:\n\n使用了绿色守护+黑域，一晚上待机的情况下，配合EX KernelManager的省电模式，关闭所有后台后，在没有关wifi的情况下，只耗了一个电(哈哈，不由地露出了欣慰的笑容)。\n{% asset_img battery.jpg %}\n\n{% asset_img GMS1.jpg %}\n\n* 实测发现使用免打扰模式，可以降低手机电话信号耗电。\n\n{% asset_img GMS2.jpg %}","slug":"三星S8-刷机记录","published":1,"updated":"2019-03-17T11:05:18.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt2zi0009zs1k0karidjj","content":"<h1 id=\"三星Galaxy-S8-刷机经验记录\"><a href=\"#三星Galaxy-S8-刷机经验记录\" class=\"headerlink\" title=\"三星Galaxy S8 刷机经验记录\"></a>三星Galaxy S8 刷机经验记录</h1><p>这段时间用上了三星S8，由于原生系统太耗电，所以萌生了root的想法。写这篇博客记录下这段时间的各种尝试。</p>\n<h1 id=\"Root过程说明：\"><a href=\"#Root过程说明：\" class=\"headerlink\" title=\"Root过程说明：\"></a>Root过程说明：</h1><p>友情提示，<strong><font color=\"#FF00ff\">道路千万条，安全第一条。开始捣鼓手机之前请一定准备好官方的救砖包。</font></strong></p>\n<ol>\n<li><p>解锁手机，我手上这台S8，时需要手机端先下载软件（crom1.0.8.apk)进行解锁；</p>\n</li>\n<li><p>刷入第三方recovery，我选择的TWRP，在TWRP官网上下载了针对我高通CPU版本的刷机包；</p>\n<a id=\"more\"></a></li>\n<li><p>三星有自己的刷机工具ODin，到官网下载了最新版的ODin备用；</p>\n</li>\n<li><p>下载安装S8的驱动，手机驱动可以到官网下载，或者安装豌豆荚这类的应用；</p>\n</li>\n<li><p>手机关机-&gt;电源+Bixby+音量下-&gt;进入刷机模式-&gt;连接电脑-&gt;打开ODin，识别到手机-&gt;在AP中选择TWRP刷机包-&gt;开始刷机-&gt;手机重启时立马按住电源+Bixby+音量上进入Recovery，避免系统重启后重新覆盖recovery分区；</p>\n</li>\n<li><p>刷入第三方Kernel（千万记住选择对应手机型号，以及CPU型号），或者第三方Rom来进行刷机。由于我直接刷入Magisk来获取root权限会导致系统无限重启，所以直接使用了第三方的刷机包，刷机包可以到XDA或者GFan论坛查找。</p>\n</li>\n</ol>\n<p>刷入第三方rom后即获得Root权限，所以开始着手于电池电量优化，安装了绿色守护和黑域并行作业，使用自动运行管理对开机启动进行优化，配合内核调校(需要对应CPU的配置）后，开机一晚耗电从原来的十几个点到现在的一晚上4个点左右，最好成绩是没有掉一个电，简直是奇迹。</p>\n<p>开启免打扰似乎会减少手机射频耗电。</p>\n<h1 id=\"最后记录下一些方便的工具：\"><a href=\"#最后记录下一些方便的工具：\" class=\"headerlink\" title=\"最后记录下一些方便的工具：\"></a>最后记录下一些方便的工具：</h1><p>AppFreezer：免Root冻结</p>\n<p>GScript：脚本执行器</p>\n<p>GSamBatteryMonitor：电池监控</p>\n<p>Package NamesView：包名查看器</p>\n<p>创建快捷方式：可以将activity创建一个快捷方式</p>\n<p>钛备份：可以备份程序和数据，但是恢复的时候我只能一个一个安装</p>\n<p>Kernel Adiutor：内核参数修改，可以修改CPU，GPU，IO，温控等</p>\n<p>EX Kernel Manager：类似内核调校，不过可以将配置保存下来，也可以载入配置。</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充:\"></a>补充:</h1><p>使用了绿色守护+黑域，一晚上待机的情况下，配合EX KernelManager的省电模式，关闭所有后台后，在没有关wifi的情况下，只耗了一个电(哈哈，不由地露出了欣慰的笑容)。<br><img src=\"/2019/02/26/三星S8-刷机记录/battery.jpg\"></p>\n<img src=\"/2019/02/26/三星S8-刷机记录/GMS1.jpg\">\n<ul>\n<li>实测发现使用免打扰模式，可以降低手机电话信号耗电。</li>\n</ul>\n<img src=\"/2019/02/26/三星S8-刷机记录/GMS2.jpg\">","site":{"data":{}},"excerpt":"<h1 id=\"三星Galaxy-S8-刷机经验记录\"><a href=\"#三星Galaxy-S8-刷机经验记录\" class=\"headerlink\" title=\"三星Galaxy S8 刷机经验记录\"></a>三星Galaxy S8 刷机经验记录</h1><p>这段时间用上了三星S8，由于原生系统太耗电，所以萌生了root的想法。写这篇博客记录下这段时间的各种尝试。</p>\n<h1 id=\"Root过程说明：\"><a href=\"#Root过程说明：\" class=\"headerlink\" title=\"Root过程说明：\"></a>Root过程说明：</h1><p>友情提示，<strong><font color=\"#FF00ff\">道路千万条，安全第一条。开始捣鼓手机之前请一定准备好官方的救砖包。</font></strong></p>\n<ol>\n<li><p>解锁手机，我手上这台S8，时需要手机端先下载软件（crom1.0.8.apk)进行解锁；</p>\n</li>\n<li><p>刷入第三方recovery，我选择的TWRP，在TWRP官网上下载了针对我高通CPU版本的刷机包；</p>","more":"</li>\n<li><p>三星有自己的刷机工具ODin，到官网下载了最新版的ODin备用；</p>\n</li>\n<li><p>下载安装S8的驱动，手机驱动可以到官网下载，或者安装豌豆荚这类的应用；</p>\n</li>\n<li><p>手机关机-&gt;电源+Bixby+音量下-&gt;进入刷机模式-&gt;连接电脑-&gt;打开ODin，识别到手机-&gt;在AP中选择TWRP刷机包-&gt;开始刷机-&gt;手机重启时立马按住电源+Bixby+音量上进入Recovery，避免系统重启后重新覆盖recovery分区；</p>\n</li>\n<li><p>刷入第三方Kernel（千万记住选择对应手机型号，以及CPU型号），或者第三方Rom来进行刷机。由于我直接刷入Magisk来获取root权限会导致系统无限重启，所以直接使用了第三方的刷机包，刷机包可以到XDA或者GFan论坛查找。</p>\n</li>\n</ol>\n<p>刷入第三方rom后即获得Root权限，所以开始着手于电池电量优化，安装了绿色守护和黑域并行作业，使用自动运行管理对开机启动进行优化，配合内核调校(需要对应CPU的配置）后，开机一晚耗电从原来的十几个点到现在的一晚上4个点左右，最好成绩是没有掉一个电，简直是奇迹。</p>\n<p>开启免打扰似乎会减少手机射频耗电。</p>\n<h1 id=\"最后记录下一些方便的工具：\"><a href=\"#最后记录下一些方便的工具：\" class=\"headerlink\" title=\"最后记录下一些方便的工具：\"></a>最后记录下一些方便的工具：</h1><p>AppFreezer：免Root冻结</p>\n<p>GScript：脚本执行器</p>\n<p>GSamBatteryMonitor：电池监控</p>\n<p>Package NamesView：包名查看器</p>\n<p>创建快捷方式：可以将activity创建一个快捷方式</p>\n<p>钛备份：可以备份程序和数据，但是恢复的时候我只能一个一个安装</p>\n<p>Kernel Adiutor：内核参数修改，可以修改CPU，GPU，IO，温控等</p>\n<p>EX Kernel Manager：类似内核调校，不过可以将配置保存下来，也可以载入配置。</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充:\"></a>补充:</h1><p>使用了绿色守护+黑域，一晚上待机的情况下，配合EX KernelManager的省电模式，关闭所有后台后，在没有关wifi的情况下，只耗了一个电(哈哈，不由地露出了欣慰的笑容)。<br><img src=\"/2019/02/26/三星S8-刷机记录/battery.jpg\"></p>\n<img src=\"/2019/02/26/三星S8-刷机记录/GMS1.jpg\">\n<ul>\n<li>实测发现使用免打扰模式，可以降低手机电话信号耗电。</li>\n</ul>\n<img src=\"/2019/02/26/三星S8-刷机记录/GMS2.jpg\">"},{"title":"三星S8相机黑画面解决","date":"2019-02-28T02:27:00.000Z","_content":"# 三星S8相机黑画面解决\n最近从媳妇儿那里入手了一个三星S8，所以就想着刷机，root试试。\n但是手机刷机卸载系统软件后有遇到相机黑化面不能工作的情况，同时闪光灯也无法开启，人脸识别也无法使用。\n具体情况如下图。\n<!--more-->\t\n{% asset_img camera_error.jpg %}{% asset_img light_error.jpg %}\n\n在网上查询资料都没有找到有用的信息，最后才想到使用Logcat来查看是否有报错信息。\n接上电脑打开logcat，最终发现相机相关的错误，说libquramresize.so无法找到。\n{% asset_img log1.jpg %}\n所以只要能够将相关的文件放到对应的目录，问题有可能迎刃而解。在刷机之前就下载好了官方的固件包，所以便使用蘑菇ROM助手提取了官方5件套中的文件拷贝到相应目录修改权限。\n\n后来有报libSaitRelightingInterface.so没有找到，同样的方法拷贝到相应目录，改权限开机后相机就可以使用了。\n{% asset_img log1.jpg %}\n\n由此得到一个结论，如果安卓手机遇到莫名其妙的问题，不妨试试logcat查看是否有相关的错误信息。\n","source":"_posts/三星S8相机黑画面解决.md","raw":"---\ntitle: 三星S8相机黑画面解决\ndate: 2019-02-28 10:27:00\ntags:\n\t- 玩弄手机\ncategories:\n\t- 技术\n\t- 杂记\n---\n# 三星S8相机黑画面解决\n最近从媳妇儿那里入手了一个三星S8，所以就想着刷机，root试试。\n但是手机刷机卸载系统软件后有遇到相机黑化面不能工作的情况，同时闪光灯也无法开启，人脸识别也无法使用。\n具体情况如下图。\n<!--more-->\t\n{% asset_img camera_error.jpg %}{% asset_img light_error.jpg %}\n\n在网上查询资料都没有找到有用的信息，最后才想到使用Logcat来查看是否有报错信息。\n接上电脑打开logcat，最终发现相机相关的错误，说libquramresize.so无法找到。\n{% asset_img log1.jpg %}\n所以只要能够将相关的文件放到对应的目录，问题有可能迎刃而解。在刷机之前就下载好了官方的固件包，所以便使用蘑菇ROM助手提取了官方5件套中的文件拷贝到相应目录修改权限。\n\n后来有报libSaitRelightingInterface.so没有找到，同样的方法拷贝到相应目录，改权限开机后相机就可以使用了。\n{% asset_img log1.jpg %}\n\n由此得到一个结论，如果安卓手机遇到莫名其妙的问题，不妨试试logcat查看是否有相关的错误信息。\n","slug":"三星S8相机黑画面解决","published":1,"updated":"2019-03-17T10:32:35.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt2zw000azs1kxfuwzuu9","content":"<h1 id=\"三星S8相机黑画面解决\"><a href=\"#三星S8相机黑画面解决\" class=\"headerlink\" title=\"三星S8相机黑画面解决\"></a>三星S8相机黑画面解决</h1><p>最近从媳妇儿那里入手了一个三星S8，所以就想着刷机，root试试。<br>但是手机刷机卸载系统软件后有遇到相机黑化面不能工作的情况，同时闪光灯也无法开启，人脸识别也无法使用。<br>具体情况如下图。<br><a id=\"more\"></a><br><img src=\"/2019/02/28/三星S8相机黑画面解决/camera_error.jpg\"><img src=\"/2019/02/28/三星S8相机黑画面解决/light_error.jpg\"></p>\n<p>在网上查询资料都没有找到有用的信息，最后才想到使用Logcat来查看是否有报错信息。<br>接上电脑打开logcat，最终发现相机相关的错误，说libquramresize.so无法找到。<br><img src=\"/2019/02/28/三星S8相机黑画面解决/log1.jpg\"><br>所以只要能够将相关的文件放到对应的目录，问题有可能迎刃而解。在刷机之前就下载好了官方的固件包，所以便使用蘑菇ROM助手提取了官方5件套中的文件拷贝到相应目录修改权限。</p>\n<p>后来有报libSaitRelightingInterface.so没有找到，同样的方法拷贝到相应目录，改权限开机后相机就可以使用了。<br><img src=\"/2019/02/28/三星S8相机黑画面解决/log1.jpg\"></p>\n<p>由此得到一个结论，如果安卓手机遇到莫名其妙的问题，不妨试试logcat查看是否有相关的错误信息。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"三星S8相机黑画面解决\"><a href=\"#三星S8相机黑画面解决\" class=\"headerlink\" title=\"三星S8相机黑画面解决\"></a>三星S8相机黑画面解决</h1><p>最近从媳妇儿那里入手了一个三星S8，所以就想着刷机，root试试。<br>但是手机刷机卸载系统软件后有遇到相机黑化面不能工作的情况，同时闪光灯也无法开启，人脸识别也无法使用。<br>具体情况如下图。<br>","more":"<br><img src=\"/2019/02/28/三星S8相机黑画面解决/camera_error.jpg\"><img src=\"/2019/02/28/三星S8相机黑画面解决/light_error.jpg\"></p>\n<p>在网上查询资料都没有找到有用的信息，最后才想到使用Logcat来查看是否有报错信息。<br>接上电脑打开logcat，最终发现相机相关的错误，说libquramresize.so无法找到。<br><img src=\"/2019/02/28/三星S8相机黑画面解决/log1.jpg\"><br>所以只要能够将相关的文件放到对应的目录，问题有可能迎刃而解。在刷机之前就下载好了官方的固件包，所以便使用蘑菇ROM助手提取了官方5件套中的文件拷贝到相应目录修改权限。</p>\n<p>后来有报libSaitRelightingInterface.so没有找到，同样的方法拷贝到相应目录，改权限开机后相机就可以使用了。<br><img src=\"/2019/02/28/三星S8相机黑画面解决/log1.jpg\"></p>\n<p>由此得到一个结论，如果安卓手机遇到莫名其妙的问题，不妨试试logcat查看是否有相关的错误信息。</p>"},{"title":"两相双极性步进电机驱动","date":"2018-04-06T08:37:00.000Z","_content":"## 前言\n最近公司报废机器，所以我从要报废的机器中拆了不少零件，其中就在光驱中拆了迷你型步进电机（参见下图），在网上查阅资料了解到这个电机叫**两相双极性步进电机**。\n{% asset_img steper.png %}\n<!--more-->\n## 驱动电机\n有在网上了解到如何驱动**两相双极性步进电机**下面做一个简单的总结。\n### 电机原理图\n将电机简化成如下的原理图，1和2表示两个相位，即两组定子，双极性表示两个定子缠绕的线圈可以两个方向通电，并扭转定子的极性。\n{% asset_img steper_schematic_static.png %}\n### 转动原理\n如果使用原理图简单表示90度(一次转动90°)两相双极性步进电机转动一圈的过程，1表示相1正向通电，1~表示相1反向通电，2和2~同理。\n{% asset_img steper_run.png %}\n1. 相1正向通电，相2断电，使得定子1上部为N极，下部为S极，异性相吸，转子会转动到第一张图的位置；\n2. 相2正向通电，相1断电，使得定子2左部为S极，右部为N极，异性相吸，转子会转动到第二张图的位置；\n3. 相1反向通电，相2断电，使得定子1上部为S极，下部为N极，异性相吸，转子会转动到第三张图的位置；\n4. 相2反向通电，相1断电，使得定子2左部为N极，右部为S极，异性相吸，转子会转动到第二张图的位置。\n\n### 电机仿真\n上面介绍了两相双极性步进电机的工作原理，接下来，使用proteus来仿真Arduino来控制电机。\n**元器件**:\n    * Arduino 328\n    * L298或ULN2004A驱动芯片\n    * 两相双极性步进电机\n**下面贴上proteus仿真过程中使用到的原理图**：\n{% asset_img steper_schematic.gif %}\n**最后贴上上图使用树莓派驱动电机的驱动代码**:\n```c\n/* Main.ino file generated by New Project wizard\n *\n * Created:   Thu Sep 5 2013\n * Processor: ATmega328P\n * Compiler:  Arduino AVR\n */\n\n #define LED ( 13 )\n #define MOTOR_PIN0 ( 0 )\n #define MOTOR_PIN1 ( 1 )\n #define MOTOR_PIN2 ( 2 )\n #define MOTOR_PIN3 ( 3 )\n #define MOTOR_PIN4 ( 4 )\n #define MOTOR_PIN5 ( 5 )\n #define MOTOR_PIN6 ( 6 )\n #define MOTOR_PIN7 ( 7 )\n #define MOTOR_ENA ( 8 )\n #define MOTOR_ENB ( 9 )\n \nvoid setup()\n { // put your setup code here, to run once:\n   pinMode( LED, OUTPUT );\n   pinMode( MOTOR_PIN0, OUTPUT );\n   pinMode( MOTOR_PIN1, OUTPUT );\n   pinMode( MOTOR_PIN2, OUTPUT );\n   pinMode( MOTOR_PIN3, OUTPUT );\n   pinMode( MOTOR_PIN4, OUTPUT );\n   pinMode( MOTOR_PIN5, OUTPUT );\n   pinMode( MOTOR_PIN6, OUTPUT );\n   pinMode( MOTOR_PIN7, OUTPUT );\n   pinMode( MOTOR_ENA, OUTPUT );\n   pinMode( MOTOR_ENB, OUTPUT );\n }\n\n void MotorOne()\n {\n   static int i = 3;\n   \n   switch( i-- )\n   {\n      case 0:\n     digitalWrite( MOTOR_PIN0, HIGH );\n     digitalWrite( MOTOR_PIN1, LOW );\n     digitalWrite( MOTOR_PIN2, LOW );\n     digitalWrite( MOTOR_PIN3, LOW );\n     break;\n      case 1:\n     digitalWrite( MOTOR_PIN0, LOW );\n     digitalWrite( MOTOR_PIN1, HIGH );\n     digitalWrite( MOTOR_PIN2, LOW );\n     digitalWrite( MOTOR_PIN3, LOW );\n     break;\n      case 2:\n     digitalWrite( MOTOR_PIN0, LOW );\n     digitalWrite( MOTOR_PIN1, LOW );\n     digitalWrite( MOTOR_PIN2, HIGH );\n     digitalWrite( MOTOR_PIN3, LOW );\n     break;\n      case 3:\n     digitalWrite( MOTOR_PIN0, LOW );\n     digitalWrite( MOTOR_PIN1, LOW );\n     digitalWrite( MOTOR_PIN2, LOW );\n     digitalWrite( MOTOR_PIN3, HIGH );\n     break;\n      default:\n     break;\n   }\n   \n   if( 0 > i )\n      i = 3;\n }\n \n void LedLight()\n {\n   static int i = 0;\n   if( 0 == i++ )\n      digitalWrite( LED, HIGH );\n   else\n      digitalWrite( LED, LOW );\n      \n   if( 2 <= i )\n      i = 0;\n }\n \n void MotorTwo()\n {\n   static int i = 0;\n   \n   switch( i++ )\n   {\n      case 0:\n     digitalWrite( MOTOR_PIN4, HIGH );\n     digitalWrite( MOTOR_PIN5, LOW );\n     digitalWrite( MOTOR_PIN6, LOW );\n     digitalWrite( MOTOR_PIN7, LOW );\n     break;\n      case 1:\n     digitalWrite( MOTOR_PIN4, LOW );\n     digitalWrite( MOTOR_PIN5, HIGH );\n     digitalWrite( MOTOR_PIN6, LOW );\n     digitalWrite( MOTOR_PIN7, LOW );\n     break;\n      case 2:\n     digitalWrite( MOTOR_PIN4, LOW );\n     digitalWrite( MOTOR_PIN5, LOW );\n     digitalWrite( MOTOR_PIN6, HIGH );\n     digitalWrite( MOTOR_PIN7, LOW );\n     break;\n      case 3:\n     digitalWrite( MOTOR_PIN4, LOW );\n     digitalWrite( MOTOR_PIN5, LOW );\n     digitalWrite( MOTOR_PIN6, LOW );\n     digitalWrite( MOTOR_PIN7, HIGH );\n     break;\n      default:\n     break;\n   }\n   \n   if( 4 <= i )\n      i = 0;\n }\n \nvoid loop()\n { // put your main code here, to run repeatedly:\n \n   MotorOne();\n   LedLight();\n   MotorTwo();\n   \n   delay(500);\n   \n }\n```","source":"_posts/两相双极性步进电机驱动.md","raw":"---\ntitle: 两相双极性步进电机驱动\ndate: 2018-04-06 16:37:00\ntags: \n\t- 嵌入式\n\t- 步进电机\n\t- C51\ncategories: \n\t- 技术\n\t- 嵌入式\n\t- C51\n---\n## 前言\n最近公司报废机器，所以我从要报废的机器中拆了不少零件，其中就在光驱中拆了迷你型步进电机（参见下图），在网上查阅资料了解到这个电机叫**两相双极性步进电机**。\n{% asset_img steper.png %}\n<!--more-->\n## 驱动电机\n有在网上了解到如何驱动**两相双极性步进电机**下面做一个简单的总结。\n### 电机原理图\n将电机简化成如下的原理图，1和2表示两个相位，即两组定子，双极性表示两个定子缠绕的线圈可以两个方向通电，并扭转定子的极性。\n{% asset_img steper_schematic_static.png %}\n### 转动原理\n如果使用原理图简单表示90度(一次转动90°)两相双极性步进电机转动一圈的过程，1表示相1正向通电，1~表示相1反向通电，2和2~同理。\n{% asset_img steper_run.png %}\n1. 相1正向通电，相2断电，使得定子1上部为N极，下部为S极，异性相吸，转子会转动到第一张图的位置；\n2. 相2正向通电，相1断电，使得定子2左部为S极，右部为N极，异性相吸，转子会转动到第二张图的位置；\n3. 相1反向通电，相2断电，使得定子1上部为S极，下部为N极，异性相吸，转子会转动到第三张图的位置；\n4. 相2反向通电，相1断电，使得定子2左部为N极，右部为S极，异性相吸，转子会转动到第二张图的位置。\n\n### 电机仿真\n上面介绍了两相双极性步进电机的工作原理，接下来，使用proteus来仿真Arduino来控制电机。\n**元器件**:\n    * Arduino 328\n    * L298或ULN2004A驱动芯片\n    * 两相双极性步进电机\n**下面贴上proteus仿真过程中使用到的原理图**：\n{% asset_img steper_schematic.gif %}\n**最后贴上上图使用树莓派驱动电机的驱动代码**:\n```c\n/* Main.ino file generated by New Project wizard\n *\n * Created:   Thu Sep 5 2013\n * Processor: ATmega328P\n * Compiler:  Arduino AVR\n */\n\n #define LED ( 13 )\n #define MOTOR_PIN0 ( 0 )\n #define MOTOR_PIN1 ( 1 )\n #define MOTOR_PIN2 ( 2 )\n #define MOTOR_PIN3 ( 3 )\n #define MOTOR_PIN4 ( 4 )\n #define MOTOR_PIN5 ( 5 )\n #define MOTOR_PIN6 ( 6 )\n #define MOTOR_PIN7 ( 7 )\n #define MOTOR_ENA ( 8 )\n #define MOTOR_ENB ( 9 )\n \nvoid setup()\n { // put your setup code here, to run once:\n   pinMode( LED, OUTPUT );\n   pinMode( MOTOR_PIN0, OUTPUT );\n   pinMode( MOTOR_PIN1, OUTPUT );\n   pinMode( MOTOR_PIN2, OUTPUT );\n   pinMode( MOTOR_PIN3, OUTPUT );\n   pinMode( MOTOR_PIN4, OUTPUT );\n   pinMode( MOTOR_PIN5, OUTPUT );\n   pinMode( MOTOR_PIN6, OUTPUT );\n   pinMode( MOTOR_PIN7, OUTPUT );\n   pinMode( MOTOR_ENA, OUTPUT );\n   pinMode( MOTOR_ENB, OUTPUT );\n }\n\n void MotorOne()\n {\n   static int i = 3;\n   \n   switch( i-- )\n   {\n      case 0:\n     digitalWrite( MOTOR_PIN0, HIGH );\n     digitalWrite( MOTOR_PIN1, LOW );\n     digitalWrite( MOTOR_PIN2, LOW );\n     digitalWrite( MOTOR_PIN3, LOW );\n     break;\n      case 1:\n     digitalWrite( MOTOR_PIN0, LOW );\n     digitalWrite( MOTOR_PIN1, HIGH );\n     digitalWrite( MOTOR_PIN2, LOW );\n     digitalWrite( MOTOR_PIN3, LOW );\n     break;\n      case 2:\n     digitalWrite( MOTOR_PIN0, LOW );\n     digitalWrite( MOTOR_PIN1, LOW );\n     digitalWrite( MOTOR_PIN2, HIGH );\n     digitalWrite( MOTOR_PIN3, LOW );\n     break;\n      case 3:\n     digitalWrite( MOTOR_PIN0, LOW );\n     digitalWrite( MOTOR_PIN1, LOW );\n     digitalWrite( MOTOR_PIN2, LOW );\n     digitalWrite( MOTOR_PIN3, HIGH );\n     break;\n      default:\n     break;\n   }\n   \n   if( 0 > i )\n      i = 3;\n }\n \n void LedLight()\n {\n   static int i = 0;\n   if( 0 == i++ )\n      digitalWrite( LED, HIGH );\n   else\n      digitalWrite( LED, LOW );\n      \n   if( 2 <= i )\n      i = 0;\n }\n \n void MotorTwo()\n {\n   static int i = 0;\n   \n   switch( i++ )\n   {\n      case 0:\n     digitalWrite( MOTOR_PIN4, HIGH );\n     digitalWrite( MOTOR_PIN5, LOW );\n     digitalWrite( MOTOR_PIN6, LOW );\n     digitalWrite( MOTOR_PIN7, LOW );\n     break;\n      case 1:\n     digitalWrite( MOTOR_PIN4, LOW );\n     digitalWrite( MOTOR_PIN5, HIGH );\n     digitalWrite( MOTOR_PIN6, LOW );\n     digitalWrite( MOTOR_PIN7, LOW );\n     break;\n      case 2:\n     digitalWrite( MOTOR_PIN4, LOW );\n     digitalWrite( MOTOR_PIN5, LOW );\n     digitalWrite( MOTOR_PIN6, HIGH );\n     digitalWrite( MOTOR_PIN7, LOW );\n     break;\n      case 3:\n     digitalWrite( MOTOR_PIN4, LOW );\n     digitalWrite( MOTOR_PIN5, LOW );\n     digitalWrite( MOTOR_PIN6, LOW );\n     digitalWrite( MOTOR_PIN7, HIGH );\n     break;\n      default:\n     break;\n   }\n   \n   if( 4 <= i )\n      i = 0;\n }\n \nvoid loop()\n { // put your main code here, to run repeatedly:\n \n   MotorOne();\n   LedLight();\n   MotorTwo();\n   \n   delay(500);\n   \n }\n```","slug":"两相双极性步进电机驱动","published":1,"updated":"2019-03-17T07:43:13.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt301000dzs1knvz93cxw","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近公司报废机器，所以我从要报废的机器中拆了不少零件，其中就在光驱中拆了迷你型步进电机（参见下图），在网上查阅资料了解到这个电机叫<strong>两相双极性步进电机</strong>。<br><img src=\"/2018/04/06/两相双极性步进电机驱动/steper.png\"><br><a id=\"more\"></a></p>\n<h2 id=\"驱动电机\"><a href=\"#驱动电机\" class=\"headerlink\" title=\"驱动电机\"></a>驱动电机</h2><p>有在网上了解到如何驱动<strong>两相双极性步进电机</strong>下面做一个简单的总结。</p>\n<h3 id=\"电机原理图\"><a href=\"#电机原理图\" class=\"headerlink\" title=\"电机原理图\"></a>电机原理图</h3><p>将电机简化成如下的原理图，1和2表示两个相位，即两组定子，双极性表示两个定子缠绕的线圈可以两个方向通电，并扭转定子的极性。<br><img src=\"/2018/04/06/两相双极性步进电机驱动/steper_schematic_static.png\"></p>\n<h3 id=\"转动原理\"><a href=\"#转动原理\" class=\"headerlink\" title=\"转动原理\"></a>转动原理</h3><p>如果使用原理图简单表示90度(一次转动90°)两相双极性步进电机转动一圈的过程，1表示相1正向通电，1~表示相1反向通电，2和2~同理。<br><img src=\"/2018/04/06/两相双极性步进电机驱动/steper_run.png\"></p>\n<ol>\n<li>相1正向通电，相2断电，使得定子1上部为N极，下部为S极，异性相吸，转子会转动到第一张图的位置；</li>\n<li>相2正向通电，相1断电，使得定子2左部为S极，右部为N极，异性相吸，转子会转动到第二张图的位置；</li>\n<li>相1反向通电，相2断电，使得定子1上部为S极，下部为N极，异性相吸，转子会转动到第三张图的位置；</li>\n<li>相2反向通电，相1断电，使得定子2左部为N极，右部为S极，异性相吸，转子会转动到第二张图的位置。</li>\n</ol>\n<h3 id=\"电机仿真\"><a href=\"#电机仿真\" class=\"headerlink\" title=\"电机仿真\"></a>电机仿真</h3><p>上面介绍了两相双极性步进电机的工作原理，接下来，使用proteus来仿真Arduino来控制电机。<br><strong>元器件</strong>:</p>\n<pre><code>* Arduino 328\n* L298或ULN2004A驱动芯片\n* 两相双极性步进电机\n</code></pre><p><strong>下面贴上proteus仿真过程中使用到的原理图</strong>：<br><img src=\"/2018/04/06/两相双极性步进电机驱动/steper_schematic.gif\"><br><strong>最后贴上上图使用树莓派驱动电机的驱动代码</strong>:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Main.ino file generated by New Project wizard</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Created:   Thu Sep 5 2013</span></span><br><span class=\"line\"><span class=\"comment\"> * Processor: ATmega328P</span></span><br><span class=\"line\"><span class=\"comment\"> * Compiler:  Arduino AVR</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> LED ( 13 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN0 ( 0 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN1 ( 1 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN2 ( 2 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN3 ( 3 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN4 ( 4 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN5 ( 5 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN6 ( 6 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN7 ( 7 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_ENA ( 8 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_ENB ( 9 )</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123; <span class=\"comment\">// put your setup code here, to run once:</span></span><br><span class=\"line\">   pinMode( LED, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN0, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN1, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN2, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN3, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN4, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN5, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN6, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN7, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_ENA, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_ENB, OUTPUT );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MotorOne</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">switch</span>( i-- )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN0, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN1, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN2, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN3, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN0, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN1, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN2, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN3, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN0, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN1, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN2, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN3, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN0, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN1, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN2, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN3, HIGH );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">if</span>( <span class=\"number\">0</span> &gt; i )</span><br><span class=\"line\">      i = <span class=\"number\">3</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LedLight</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>( <span class=\"number\">0</span> == i++ )</span><br><span class=\"line\">      digitalWrite( LED, HIGH );</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">      digitalWrite( LED, LOW );</span><br><span class=\"line\">      </span><br><span class=\"line\">   <span class=\"keyword\">if</span>( <span class=\"number\">2</span> &lt;= i )</span><br><span class=\"line\">      i = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MotorTwo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">switch</span>( i++ )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN4, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN5, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN6, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN7, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN4, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN5, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN6, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN7, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN4, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN5, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN6, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN7, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN4, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN5, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN6, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN7, HIGH );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">if</span>( <span class=\"number\">4</span> &lt;= i )</span><br><span class=\"line\">      i = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123; <span class=\"comment\">// put your main code here, to run repeatedly:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   MotorOne();</span><br><span class=\"line\">   LedLight();</span><br><span class=\"line\">   MotorTwo();</span><br><span class=\"line\">   </span><br><span class=\"line\">   delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近公司报废机器，所以我从要报废的机器中拆了不少零件，其中就在光驱中拆了迷你型步进电机（参见下图），在网上查阅资料了解到这个电机叫<strong>两相双极性步进电机</strong>。<br><img src=\"/2018/04/06/两相双极性步进电机驱动/steper.png\"><br>","more":"</p>\n<h2 id=\"驱动电机\"><a href=\"#驱动电机\" class=\"headerlink\" title=\"驱动电机\"></a>驱动电机</h2><p>有在网上了解到如何驱动<strong>两相双极性步进电机</strong>下面做一个简单的总结。</p>\n<h3 id=\"电机原理图\"><a href=\"#电机原理图\" class=\"headerlink\" title=\"电机原理图\"></a>电机原理图</h3><p>将电机简化成如下的原理图，1和2表示两个相位，即两组定子，双极性表示两个定子缠绕的线圈可以两个方向通电，并扭转定子的极性。<br><img src=\"/2018/04/06/两相双极性步进电机驱动/steper_schematic_static.png\"></p>\n<h3 id=\"转动原理\"><a href=\"#转动原理\" class=\"headerlink\" title=\"转动原理\"></a>转动原理</h3><p>如果使用原理图简单表示90度(一次转动90°)两相双极性步进电机转动一圈的过程，1表示相1正向通电，1~表示相1反向通电，2和2~同理。<br><img src=\"/2018/04/06/两相双极性步进电机驱动/steper_run.png\"></p>\n<ol>\n<li>相1正向通电，相2断电，使得定子1上部为N极，下部为S极，异性相吸，转子会转动到第一张图的位置；</li>\n<li>相2正向通电，相1断电，使得定子2左部为S极，右部为N极，异性相吸，转子会转动到第二张图的位置；</li>\n<li>相1反向通电，相2断电，使得定子1上部为S极，下部为N极，异性相吸，转子会转动到第三张图的位置；</li>\n<li>相2反向通电，相1断电，使得定子2左部为N极，右部为S极，异性相吸，转子会转动到第二张图的位置。</li>\n</ol>\n<h3 id=\"电机仿真\"><a href=\"#电机仿真\" class=\"headerlink\" title=\"电机仿真\"></a>电机仿真</h3><p>上面介绍了两相双极性步进电机的工作原理，接下来，使用proteus来仿真Arduino来控制电机。<br><strong>元器件</strong>:</p>\n<pre><code>* Arduino 328\n* L298或ULN2004A驱动芯片\n* 两相双极性步进电机\n</code></pre><p><strong>下面贴上proteus仿真过程中使用到的原理图</strong>：<br><img src=\"/2018/04/06/两相双极性步进电机驱动/steper_schematic.gif\"><br><strong>最后贴上上图使用树莓派驱动电机的驱动代码</strong>:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Main.ino file generated by New Project wizard</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Created:   Thu Sep 5 2013</span></span><br><span class=\"line\"><span class=\"comment\"> * Processor: ATmega328P</span></span><br><span class=\"line\"><span class=\"comment\"> * Compiler:  Arduino AVR</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> LED ( 13 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN0 ( 0 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN1 ( 1 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN2 ( 2 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN3 ( 3 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN4 ( 4 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN5 ( 5 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN6 ( 6 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_PIN7 ( 7 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_ENA ( 8 )</span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">define</span> MOTOR_ENB ( 9 )</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123; <span class=\"comment\">// put your setup code here, to run once:</span></span><br><span class=\"line\">   pinMode( LED, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN0, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN1, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN2, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN3, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN4, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN5, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN6, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_PIN7, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_ENA, OUTPUT );</span><br><span class=\"line\">   pinMode( MOTOR_ENB, OUTPUT );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MotorOne</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">switch</span>( i-- )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN0, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN1, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN2, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN3, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN0, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN1, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN2, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN3, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN0, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN1, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN2, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN3, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN0, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN1, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN2, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN3, HIGH );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">if</span>( <span class=\"number\">0</span> &gt; i )</span><br><span class=\"line\">      i = <span class=\"number\">3</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LedLight</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>( <span class=\"number\">0</span> == i++ )</span><br><span class=\"line\">      digitalWrite( LED, HIGH );</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">      digitalWrite( LED, LOW );</span><br><span class=\"line\">      </span><br><span class=\"line\">   <span class=\"keyword\">if</span>( <span class=\"number\">2</span> &lt;= i )</span><br><span class=\"line\">      i = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MotorTwo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">switch</span>( i++ )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN4, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN5, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN6, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN7, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN4, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN5, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN6, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN7, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN4, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN5, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN6, HIGH );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN7, LOW );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN4, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN5, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN6, LOW );</span><br><span class=\"line\">     digitalWrite( MOTOR_PIN7, HIGH );</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">     <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">if</span>( <span class=\"number\">4</span> &lt;= i )</span><br><span class=\"line\">      i = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123; <span class=\"comment\">// put your main code here, to run repeatedly:</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   MotorOne();</span><br><span class=\"line\">   LedLight();</span><br><span class=\"line\">   MotorTwo();</span><br><span class=\"line\">   </span><br><span class=\"line\">   delay(<span class=\"number\">500</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"基础算法总结","date":"2019-06-07T04:05:37.000Z","_content":"# 基础算法总结\n\n前段时间看了一部分《算法-第4版》，加深了我对排序、查找等基础算法的理解，在项目中更能够熟练的使用他们。所以这篇文章主要是按照我自己的理解对这些算法进行叙述，以方便日后浏览。文章可能有不严谨的地方，希望多多包涵。\n## 排序\n有很多操作都是基于有序序列的，所以排序算法可以说是基础中的基础，接下来就进行简单叙述。\n排序算法的稳定性是值在有重复元素的排序操作后，等值有序元素的前后顺序不改变，否则即为不稳定。\n{% asset_img sort.png %}\n### 冒泡排序\n* 中心思想： 对一个长度为N的无序数组进行N次冒泡，每次冒泡是将最大值冒泡到本次冒泡的末尾，每次从0开始到m结束（m=N-n，n表示第几次排序），依次两两比较。由于整个过程是从最大值到最小值依次冒泡到末尾，所以这个算法被形象地称为冒泡排序。\n* 时间复杂度： O(n^2)\n* 动图演示：\n{% asset_img BubbleSort.gif %}\n<!--more-->\n### 选择排序\n* 中心思想：与冒泡排序类似，选择排序是每次选择最小或最大值到数组待排序序列最前方，知道所有地数据排序完毕，如果序列长度为N，那么总共需要进行N次选择最小或最大值地过程，并且每次选择都在剩余数据中进行两两比较。\n* 时间复杂度：O(n^2)\n* 动图演示：\n{% asset_img SelectSort.gif %}\n### 插入排序\n* 中心思想： 将数组分为两部分，前部分为已排序部分，后部分为未排序部分，每次操作是从未排序部分取第一个数插入到已排序部分的正确位置，插入过程是从已排序数组末尾到0，依次与每个索引的元素进行比较，当已排序元素比待插入元素大，则进行数据移位，否则将待插入数据放入当前index所指空间。\n* 时间复杂度：O(n^2)\n* 动图演示：\n{% asset_img InsertSort.gif %}\n### 希尔排序\n* 中心思想： Shell排序又叫减小增量排序，是对简单插入排序的改进，主要操作是依靠一个排序增量序列，这个序列从大到小递减，最终递减为1，如此能减少比较次数。按照增量序列的长度K，对整个序列进行K趟排序。如增量序列为[7, 4, 1]，则总共需要3趟排序：\n1. 第一趟：从index为0开始每次间隔6个元素，到index为6时结束，总共分为N/7个小序列；\n2. 第二趟：从index为0开始每次间隔3个元素，到index为4时结束，总共分为N/4个小序列；\n3. 第三趟：从index为0开始每次间隔0个元素，这一次即把所有元素排序完成。\n* 时间复杂度：O(n^1.3)\n* 动图演示：\n{% asset_img ShellSort.gif %}\n### 归并排序\n* 中心思想：将长度为N的待排序数组分成两部分，每部分长度为N/2，并对两部分分别二分，直到不能细分时，即长度为2时，对两个元素进行排序，然后对两组元素进行归并，即把两个有序数组归并为一个有序数组，依次类推直到归并到一个长度为N的数组，排序即结束。\n* 时间复杂度：O(nlog2n)\n* 动图演示：\n{% asset_img MergeSort.gif %}\n### 快速排序\n* 中心思想：选定未排序序列的第一个为基准值，并且依照该基准值进行**分区**，比基准值小的排在前面，比基准值大的排在后面，再对两部分分别进行分区操作，依次类推，直到无法分区，即只有1个元素，至此排序完成。\n* 时间复杂度：O(nlog2n)\n* 动图演示：\n{% asset_img QuickSort.gif %}\n### 堆排序\n* 中心思想：以优先队列为基础构造长度为N的优先队列，再每次将最大值取出与已经构造的优先队列中右下最末尾数据进行交换，再对剩余数据进行上浮和下沉操作，再取出最大值，依次类推，将所有数据排序完成。\n* 时间复杂度：O(nlog2n)\n* 动图演示：\n* {% asset_img HeapSort.gif %}\n### 计数排序\n* 中心思想：\n* 时间复杂度：\n* 动图演示：\n### 桶排序\n* 中心思想：\n* 时间复杂度：\n* 动图演示：\n### 基数排序\n* 中心思想：\n* 时间复杂度：\n* 动图演示：\n---------------------------------------------未完待续------------------------------------------\n## 查找\n### 无序链表顺序查找\n### 有序数组二分查找\n### 二叉树查找\n### 红黑树\n### 散列表\n## 图\n### 广度优先搜索算法\n### 深度优先搜索算法\n## 字符串\n### 排序\n#### 索引计数\n#### 低位优先排序\n#### 高位优先排序\n### 查找\n#### 单词查找树\n#### 三向单词查找树\n### 子串查找\n### 正则表达式\n## 数据压缩\n\n参考： [https://www.cnblogs.com/onepixel/articles/7674659.html](https://www.cnblogs.com/onepixel/articles/7674659.html \"十大经典排序算法（动图演示）\")","source":"_posts/基础算法总结.md","raw":"---\ntitle: 基础算法总结\ndate: 2019-06-07 12:05:37\ntags:\n\t- 算法\n\t- 总结\ncategories:\n\t- 技术\n---\n# 基础算法总结\n\n前段时间看了一部分《算法-第4版》，加深了我对排序、查找等基础算法的理解，在项目中更能够熟练的使用他们。所以这篇文章主要是按照我自己的理解对这些算法进行叙述，以方便日后浏览。文章可能有不严谨的地方，希望多多包涵。\n## 排序\n有很多操作都是基于有序序列的，所以排序算法可以说是基础中的基础，接下来就进行简单叙述。\n排序算法的稳定性是值在有重复元素的排序操作后，等值有序元素的前后顺序不改变，否则即为不稳定。\n{% asset_img sort.png %}\n### 冒泡排序\n* 中心思想： 对一个长度为N的无序数组进行N次冒泡，每次冒泡是将最大值冒泡到本次冒泡的末尾，每次从0开始到m结束（m=N-n，n表示第几次排序），依次两两比较。由于整个过程是从最大值到最小值依次冒泡到末尾，所以这个算法被形象地称为冒泡排序。\n* 时间复杂度： O(n^2)\n* 动图演示：\n{% asset_img BubbleSort.gif %}\n<!--more-->\n### 选择排序\n* 中心思想：与冒泡排序类似，选择排序是每次选择最小或最大值到数组待排序序列最前方，知道所有地数据排序完毕，如果序列长度为N，那么总共需要进行N次选择最小或最大值地过程，并且每次选择都在剩余数据中进行两两比较。\n* 时间复杂度：O(n^2)\n* 动图演示：\n{% asset_img SelectSort.gif %}\n### 插入排序\n* 中心思想： 将数组分为两部分，前部分为已排序部分，后部分为未排序部分，每次操作是从未排序部分取第一个数插入到已排序部分的正确位置，插入过程是从已排序数组末尾到0，依次与每个索引的元素进行比较，当已排序元素比待插入元素大，则进行数据移位，否则将待插入数据放入当前index所指空间。\n* 时间复杂度：O(n^2)\n* 动图演示：\n{% asset_img InsertSort.gif %}\n### 希尔排序\n* 中心思想： Shell排序又叫减小增量排序，是对简单插入排序的改进，主要操作是依靠一个排序增量序列，这个序列从大到小递减，最终递减为1，如此能减少比较次数。按照增量序列的长度K，对整个序列进行K趟排序。如增量序列为[7, 4, 1]，则总共需要3趟排序：\n1. 第一趟：从index为0开始每次间隔6个元素，到index为6时结束，总共分为N/7个小序列；\n2. 第二趟：从index为0开始每次间隔3个元素，到index为4时结束，总共分为N/4个小序列；\n3. 第三趟：从index为0开始每次间隔0个元素，这一次即把所有元素排序完成。\n* 时间复杂度：O(n^1.3)\n* 动图演示：\n{% asset_img ShellSort.gif %}\n### 归并排序\n* 中心思想：将长度为N的待排序数组分成两部分，每部分长度为N/2，并对两部分分别二分，直到不能细分时，即长度为2时，对两个元素进行排序，然后对两组元素进行归并，即把两个有序数组归并为一个有序数组，依次类推直到归并到一个长度为N的数组，排序即结束。\n* 时间复杂度：O(nlog2n)\n* 动图演示：\n{% asset_img MergeSort.gif %}\n### 快速排序\n* 中心思想：选定未排序序列的第一个为基准值，并且依照该基准值进行**分区**，比基准值小的排在前面，比基准值大的排在后面，再对两部分分别进行分区操作，依次类推，直到无法分区，即只有1个元素，至此排序完成。\n* 时间复杂度：O(nlog2n)\n* 动图演示：\n{% asset_img QuickSort.gif %}\n### 堆排序\n* 中心思想：以优先队列为基础构造长度为N的优先队列，再每次将最大值取出与已经构造的优先队列中右下最末尾数据进行交换，再对剩余数据进行上浮和下沉操作，再取出最大值，依次类推，将所有数据排序完成。\n* 时间复杂度：O(nlog2n)\n* 动图演示：\n* {% asset_img HeapSort.gif %}\n### 计数排序\n* 中心思想：\n* 时间复杂度：\n* 动图演示：\n### 桶排序\n* 中心思想：\n* 时间复杂度：\n* 动图演示：\n### 基数排序\n* 中心思想：\n* 时间复杂度：\n* 动图演示：\n---------------------------------------------未完待续------------------------------------------\n## 查找\n### 无序链表顺序查找\n### 有序数组二分查找\n### 二叉树查找\n### 红黑树\n### 散列表\n## 图\n### 广度优先搜索算法\n### 深度优先搜索算法\n## 字符串\n### 排序\n#### 索引计数\n#### 低位优先排序\n#### 高位优先排序\n### 查找\n#### 单词查找树\n#### 三向单词查找树\n### 子串查找\n### 正则表达式\n## 数据压缩\n\n参考： [https://www.cnblogs.com/onepixel/articles/7674659.html](https://www.cnblogs.com/onepixel/articles/7674659.html \"十大经典排序算法（动图演示）\")","slug":"基础算法总结","published":1,"updated":"2019-07-07T07:23:48.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt303000fzs1k4jv4amx2","content":"<h1 id=\"基础算法总结\"><a href=\"#基础算法总结\" class=\"headerlink\" title=\"基础算法总结\"></a>基础算法总结</h1><p>前段时间看了一部分《算法-第4版》，加深了我对排序、查找等基础算法的理解，在项目中更能够熟练的使用他们。所以这篇文章主要是按照我自己的理解对这些算法进行叙述，以方便日后浏览。文章可能有不严谨的地方，希望多多包涵。</p>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><p>有很多操作都是基于有序序列的，所以排序算法可以说是基础中的基础，接下来就进行简单叙述。<br>排序算法的稳定性是值在有重复元素的排序操作后，等值有序元素的前后顺序不改变，否则即为不稳定。<br><img src=\"/2019/06/07/基础算法总结/sort.png\"></p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><ul>\n<li>中心思想： 对一个长度为N的无序数组进行N次冒泡，每次冒泡是将最大值冒泡到本次冒泡的末尾，每次从0开始到m结束（m=N-n，n表示第几次排序），依次两两比较。由于整个过程是从最大值到最小值依次冒泡到末尾，所以这个算法被形象地称为冒泡排序。</li>\n<li>时间复杂度： O(n^2)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/BubbleSort.gif\">\n<a id=\"more\"></a>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3></li>\n<li>中心思想：与冒泡排序类似，选择排序是每次选择最小或最大值到数组待排序序列最前方，知道所有地数据排序完毕，如果序列长度为N，那么总共需要进行N次选择最小或最大值地过程，并且每次选择都在剩余数据中进行两两比较。</li>\n<li>时间复杂度：O(n^2)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/SelectSort.gif\">\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3></li>\n<li>中心思想： 将数组分为两部分，前部分为已排序部分，后部分为未排序部分，每次操作是从未排序部分取第一个数插入到已排序部分的正确位置，插入过程是从已排序数组末尾到0，依次与每个索引的元素进行比较，当已排序元素比待插入元素大，则进行数据移位，否则将待插入数据放入当前index所指空间。</li>\n<li>时间复杂度：O(n^2)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/InsertSort.gif\">\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3></li>\n<li>中心思想： Shell排序又叫减小增量排序，是对简单插入排序的改进，主要操作是依靠一个排序增量序列，这个序列从大到小递减，最终递减为1，如此能减少比较次数。按照增量序列的长度K，对整个序列进行K趟排序。如增量序列为[7, 4, 1]，则总共需要3趟排序：</li>\n</ul>\n<ol>\n<li>第一趟：从index为0开始每次间隔6个元素，到index为6时结束，总共分为N/7个小序列；</li>\n<li>第二趟：从index为0开始每次间隔3个元素，到index为4时结束，总共分为N/4个小序列；</li>\n<li>第三趟：从index为0开始每次间隔0个元素，这一次即把所有元素排序完成。</li>\n</ol>\n<ul>\n<li>时间复杂度：O(n^1.3)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/ShellSort.gif\">\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3></li>\n<li>中心思想：将长度为N的待排序数组分成两部分，每部分长度为N/2，并对两部分分别二分，直到不能细分时，即长度为2时，对两个元素进行排序，然后对两组元素进行归并，即把两个有序数组归并为一个有序数组，依次类推直到归并到一个长度为N的数组，排序即结束。</li>\n<li>时间复杂度：O(nlog2n)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/MergeSort.gif\">\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3></li>\n<li>中心思想：选定未排序序列的第一个为基准值，并且依照该基准值进行<strong>分区</strong>，比基准值小的排在前面，比基准值大的排在后面，再对两部分分别进行分区操作，依次类推，直到无法分区，即只有1个元素，至此排序完成。</li>\n<li>时间复杂度：O(nlog2n)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/QuickSort.gif\">\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3></li>\n<li>中心思想：以优先队列为基础构造长度为N的优先队列，再每次将最大值取出与已经构造的优先队列中右下最末尾数据进行交换，再对剩余数据进行上浮和下沉操作，再取出最大值，依次类推，将所有数据排序完成。</li>\n<li>时间复杂度：O(nlog2n)</li>\n<li>动图演示：</li>\n<li><img src=\"/2019/06/07/基础算法总结/HeapSort.gif\">\n<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3></li>\n<li>中心思想：</li>\n<li>时间复杂度：</li>\n<li>动图演示：<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3></li>\n<li>中心思想：</li>\n<li>时间复杂度：</li>\n<li>动图演示：<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3></li>\n<li>中心思想：</li>\n<li>时间复杂度：</li>\n<li>动图演示：<br>———————————————未完待续——————————————<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h3 id=\"无序链表顺序查找\"><a href=\"#无序链表顺序查找\" class=\"headerlink\" title=\"无序链表顺序查找\"></a>无序链表顺序查找</h3><h3 id=\"有序数组二分查找\"><a href=\"#有序数组二分查找\" class=\"headerlink\" title=\"有序数组二分查找\"></a>有序数组二分查找</h3><h3 id=\"二叉树查找\"><a href=\"#二叉树查找\" class=\"headerlink\" title=\"二叉树查找\"></a>二叉树查找</h3><h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><h3 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h3><h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><h3 id=\"广度优先搜索算法\"><a href=\"#广度优先搜索算法\" class=\"headerlink\" title=\"广度优先搜索算法\"></a>广度优先搜索算法</h3><h3 id=\"深度优先搜索算法\"><a href=\"#深度优先搜索算法\" class=\"headerlink\" title=\"深度优先搜索算法\"></a>深度优先搜索算法</h3><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"排序-1\"><a href=\"#排序-1\" class=\"headerlink\" title=\"排序\"></a>排序</h3><h4 id=\"索引计数\"><a href=\"#索引计数\" class=\"headerlink\" title=\"索引计数\"></a>索引计数</h4><h4 id=\"低位优先排序\"><a href=\"#低位优先排序\" class=\"headerlink\" title=\"低位优先排序\"></a>低位优先排序</h4><h4 id=\"高位优先排序\"><a href=\"#高位优先排序\" class=\"headerlink\" title=\"高位优先排序\"></a>高位优先排序</h4><h3 id=\"查找-1\"><a href=\"#查找-1\" class=\"headerlink\" title=\"查找\"></a>查找</h3><h4 id=\"单词查找树\"><a href=\"#单词查找树\" class=\"headerlink\" title=\"单词查找树\"></a>单词查找树</h4><h4 id=\"三向单词查找树\"><a href=\"#三向单词查找树\" class=\"headerlink\" title=\"三向单词查找树\"></a>三向单词查找树</h4><h3 id=\"子串查找\"><a href=\"#子串查找\" class=\"headerlink\" title=\"子串查找\"></a>子串查找</h3><h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><h2 id=\"数据压缩\"><a href=\"#数据压缩\" class=\"headerlink\" title=\"数据压缩\"></a>数据压缩</h2></li>\n</ul>\n<p>参考： <a href=\"https://www.cnblogs.com/onepixel/articles/7674659.html\" title=\"十大经典排序算法（动图演示）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/articles/7674659.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"基础算法总结\"><a href=\"#基础算法总结\" class=\"headerlink\" title=\"基础算法总结\"></a>基础算法总结</h1><p>前段时间看了一部分《算法-第4版》，加深了我对排序、查找等基础算法的理解，在项目中更能够熟练的使用他们。所以这篇文章主要是按照我自己的理解对这些算法进行叙述，以方便日后浏览。文章可能有不严谨的地方，希望多多包涵。</p>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><p>有很多操作都是基于有序序列的，所以排序算法可以说是基础中的基础，接下来就进行简单叙述。<br>排序算法的稳定性是值在有重复元素的排序操作后，等值有序元素的前后顺序不改变，否则即为不稳定。<br><img src=\"/2019/06/07/基础算法总结/sort.png\"></p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><ul>\n<li>中心思想： 对一个长度为N的无序数组进行N次冒泡，每次冒泡是将最大值冒泡到本次冒泡的末尾，每次从0开始到m结束（m=N-n，n表示第几次排序），依次两两比较。由于整个过程是从最大值到最小值依次冒泡到末尾，所以这个算法被形象地称为冒泡排序。</li>\n<li>时间复杂度： O(n^2)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/BubbleSort.gif\">","more":"<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3></li>\n<li>中心思想：与冒泡排序类似，选择排序是每次选择最小或最大值到数组待排序序列最前方，知道所有地数据排序完毕，如果序列长度为N，那么总共需要进行N次选择最小或最大值地过程，并且每次选择都在剩余数据中进行两两比较。</li>\n<li>时间复杂度：O(n^2)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/SelectSort.gif\">\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3></li>\n<li>中心思想： 将数组分为两部分，前部分为已排序部分，后部分为未排序部分，每次操作是从未排序部分取第一个数插入到已排序部分的正确位置，插入过程是从已排序数组末尾到0，依次与每个索引的元素进行比较，当已排序元素比待插入元素大，则进行数据移位，否则将待插入数据放入当前index所指空间。</li>\n<li>时间复杂度：O(n^2)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/InsertSort.gif\">\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3></li>\n<li>中心思想： Shell排序又叫减小增量排序，是对简单插入排序的改进，主要操作是依靠一个排序增量序列，这个序列从大到小递减，最终递减为1，如此能减少比较次数。按照增量序列的长度K，对整个序列进行K趟排序。如增量序列为[7, 4, 1]，则总共需要3趟排序：</li>\n</ul>\n<ol>\n<li>第一趟：从index为0开始每次间隔6个元素，到index为6时结束，总共分为N/7个小序列；</li>\n<li>第二趟：从index为0开始每次间隔3个元素，到index为4时结束，总共分为N/4个小序列；</li>\n<li>第三趟：从index为0开始每次间隔0个元素，这一次即把所有元素排序完成。</li>\n</ol>\n<ul>\n<li>时间复杂度：O(n^1.3)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/ShellSort.gif\">\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3></li>\n<li>中心思想：将长度为N的待排序数组分成两部分，每部分长度为N/2，并对两部分分别二分，直到不能细分时，即长度为2时，对两个元素进行排序，然后对两组元素进行归并，即把两个有序数组归并为一个有序数组，依次类推直到归并到一个长度为N的数组，排序即结束。</li>\n<li>时间复杂度：O(nlog2n)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/MergeSort.gif\">\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3></li>\n<li>中心思想：选定未排序序列的第一个为基准值，并且依照该基准值进行<strong>分区</strong>，比基准值小的排在前面，比基准值大的排在后面，再对两部分分别进行分区操作，依次类推，直到无法分区，即只有1个元素，至此排序完成。</li>\n<li>时间复杂度：O(nlog2n)</li>\n<li>动图演示：<img src=\"/2019/06/07/基础算法总结/QuickSort.gif\">\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3></li>\n<li>中心思想：以优先队列为基础构造长度为N的优先队列，再每次将最大值取出与已经构造的优先队列中右下最末尾数据进行交换，再对剩余数据进行上浮和下沉操作，再取出最大值，依次类推，将所有数据排序完成。</li>\n<li>时间复杂度：O(nlog2n)</li>\n<li>动图演示：</li>\n<li><img src=\"/2019/06/07/基础算法总结/HeapSort.gif\">\n<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3></li>\n<li>中心思想：</li>\n<li>时间复杂度：</li>\n<li>动图演示：<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3></li>\n<li>中心思想：</li>\n<li>时间复杂度：</li>\n<li>动图演示：<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3></li>\n<li>中心思想：</li>\n<li>时间复杂度：</li>\n<li>动图演示：<br>———————————————未完待续——————————————<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h3 id=\"无序链表顺序查找\"><a href=\"#无序链表顺序查找\" class=\"headerlink\" title=\"无序链表顺序查找\"></a>无序链表顺序查找</h3><h3 id=\"有序数组二分查找\"><a href=\"#有序数组二分查找\" class=\"headerlink\" title=\"有序数组二分查找\"></a>有序数组二分查找</h3><h3 id=\"二叉树查找\"><a href=\"#二叉树查找\" class=\"headerlink\" title=\"二叉树查找\"></a>二叉树查找</h3><h3 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h3><h3 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h3><h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><h3 id=\"广度优先搜索算法\"><a href=\"#广度优先搜索算法\" class=\"headerlink\" title=\"广度优先搜索算法\"></a>广度优先搜索算法</h3><h3 id=\"深度优先搜索算法\"><a href=\"#深度优先搜索算法\" class=\"headerlink\" title=\"深度优先搜索算法\"></a>深度优先搜索算法</h3><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"排序-1\"><a href=\"#排序-1\" class=\"headerlink\" title=\"排序\"></a>排序</h3><h4 id=\"索引计数\"><a href=\"#索引计数\" class=\"headerlink\" title=\"索引计数\"></a>索引计数</h4><h4 id=\"低位优先排序\"><a href=\"#低位优先排序\" class=\"headerlink\" title=\"低位优先排序\"></a>低位优先排序</h4><h4 id=\"高位优先排序\"><a href=\"#高位优先排序\" class=\"headerlink\" title=\"高位优先排序\"></a>高位优先排序</h4><h3 id=\"查找-1\"><a href=\"#查找-1\" class=\"headerlink\" title=\"查找\"></a>查找</h3><h4 id=\"单词查找树\"><a href=\"#单词查找树\" class=\"headerlink\" title=\"单词查找树\"></a>单词查找树</h4><h4 id=\"三向单词查找树\"><a href=\"#三向单词查找树\" class=\"headerlink\" title=\"三向单词查找树\"></a>三向单词查找树</h4><h3 id=\"子串查找\"><a href=\"#子串查找\" class=\"headerlink\" title=\"子串查找\"></a>子串查找</h3><h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><h2 id=\"数据压缩\"><a href=\"#数据压缩\" class=\"headerlink\" title=\"数据压缩\"></a>数据压缩</h2></li>\n</ul>\n<p>参考： <a href=\"https://www.cnblogs.com/onepixel/articles/7674659.html\" title=\"十大经典排序算法（动图演示）\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/articles/7674659.html</a></p>"},{"title":"嵌入式开发一个月随笔","date":"2016-09-21T10:48:13.000Z","_content":"# 嵌入式开发一个月随笔\n\n从事嵌入式开发已经有一月有余，平心而论，我还是比较喜欢嵌入式开发的，不仅因为其涉及面广可以学习到很多知识，而且嵌入式开发对动手能力要求比较高，让我不觉得无聊。\n\n工作以来了解了嵌入式开发的相关流程，也实际动手做了几个需求。过程中遇到了很多问题也解决了很多问题，下面一一道来。\n\n调试，纯软件开发的调试可能没那么麻烦，IDE都会集成好调试工具，就算不使用IDE，也可以单独使用调试工具进行调试，像gdb之类的。这些调试工具可以进行断点设定、单步调试、多步调试、监视内存值等等十分有用的调试手段。但是呢，到了嵌入式板级调试，现在我们就主要使用的串口打印的方法进行调试，调试起来十分麻烦，想多测几个值就必须多写几句打印语句，用起来十分繁琐（当然嵌入式板级调试也有方法可以实现高效的调试手段，比如ARM提供的调试器，JTAG等，但是我对这些都不了解，以后提升开发效率可以从这些地方入手）。\n<!--more-->\nTW8836无RGB信号时的白画面问题，这是我接手的第一个问题，由于该项目换了显示器，现在显示器默认状态是背光高亮，这样人们就会看到白屏。在ACPH17中开机时，屏幕会有0.2s左右的白屏，导致用户看到的画面会有闪屏现象。一开始我是真的毫无头绪，后来知道了串口打印，就跟着开机流程中调用TW8836的函数一步步打印提示信息，这样大概熟悉了开机流程后，又跟着流程看代码，很多知识都不知道，所以是有点迷茫，好在最后在代码注释中发现了重要信息，一个过程会把TW8836设置为高阻态，同时关闭显示信号，所以此时屏幕接收不到信号，就以默认的情况显示，在此处增加了关闭背光的代码后，开机过程中就不会出现白屏现象，但是屏幕背光也一直处于关闭状态，因此还要添加背光打开的代码。在背光关闭后立刻打开背光是不行的，需要等到其他地方给8836输入信号，并且修改其高阻态后再打开背光，但是我并不知道具体打开的地方，因此在关闭背光后我增加了一个延时的过程，经过调试，发现延时100ms后屏幕不仅不会出现白闪，同时背光也能被打开，开机一切正常。\n\nILLUMINATION电压值读取，通过处理器的引脚输入一个电压值，然后PC端下命令给处理器，处理器返回输入的电压值。这个需求还是比较好写的，只需要读取到ADC芯片中的寄存器得值，然后通过公式(电压值=参考电压的值/ADC分辨率*ADC寄存器的值)。\n\nFAN PWM读取，PC下命令后，返回duty cycle和frequence一开始是读取风扇的配置，然后返回数据。后来要求频率能够接受到外部输入，最先想到的是PWM输入模式，但是FAN PWM输入的引脚并没有PWM INPUT功能。最后通过求助，实现通过输入引脚的外部中断检测下降沿的次数，然后开一个一秒钟的任务来计算频率。PWM就是脉冲宽度调制，两个主要的参数是频率和占空比，频率是一秒钟信号的次数，占空比是每个信号中高电平所占的比例。通过高低电平有规律的交错就可以达到控制风扇速度的目的。\n\n现在我正在做的是使用TW8836的dongle来将图片资源刷入到SPI Flash中。可是使用dongle时却遇到了问题，一开始dongle能够正常连接，第二天开始就一直报找不到设备，询问了很多人也没找到原因，甚至换机台，换电脑都不行。我怀疑是芯片在我热拔插过程中烧坏了。目前正在等台湾公司给我寄新的板子。嵌入式出问题的原因也可能很多，最不好定位了，但是在反复验证过程中却可以不断练习自己的动手能力。问题原因可能要后续给出了。\n\n今天修改了风扇的pwm值，但是发给Sven后，他那边一直不能测到波形，但是我这边一直能测到，Sven使用的下载方法和测量方法与我一致。最后反复思考，他应该是没有插上风扇。实测插上风扇才有波形。","source":"_posts/嵌入式开发一个月随笔.md","raw":"---\ntitle: 嵌入式开发一个月随笔\ndate: 2016-09-21 18:48:13\ntags:\n\t- 嵌入式\n\t- 随笔\ncategories:\n\t- 技术\n\t- 随笔\n---\n# 嵌入式开发一个月随笔\n\n从事嵌入式开发已经有一月有余，平心而论，我还是比较喜欢嵌入式开发的，不仅因为其涉及面广可以学习到很多知识，而且嵌入式开发对动手能力要求比较高，让我不觉得无聊。\n\n工作以来了解了嵌入式开发的相关流程，也实际动手做了几个需求。过程中遇到了很多问题也解决了很多问题，下面一一道来。\n\n调试，纯软件开发的调试可能没那么麻烦，IDE都会集成好调试工具，就算不使用IDE，也可以单独使用调试工具进行调试，像gdb之类的。这些调试工具可以进行断点设定、单步调试、多步调试、监视内存值等等十分有用的调试手段。但是呢，到了嵌入式板级调试，现在我们就主要使用的串口打印的方法进行调试，调试起来十分麻烦，想多测几个值就必须多写几句打印语句，用起来十分繁琐（当然嵌入式板级调试也有方法可以实现高效的调试手段，比如ARM提供的调试器，JTAG等，但是我对这些都不了解，以后提升开发效率可以从这些地方入手）。\n<!--more-->\nTW8836无RGB信号时的白画面问题，这是我接手的第一个问题，由于该项目换了显示器，现在显示器默认状态是背光高亮，这样人们就会看到白屏。在ACPH17中开机时，屏幕会有0.2s左右的白屏，导致用户看到的画面会有闪屏现象。一开始我是真的毫无头绪，后来知道了串口打印，就跟着开机流程中调用TW8836的函数一步步打印提示信息，这样大概熟悉了开机流程后，又跟着流程看代码，很多知识都不知道，所以是有点迷茫，好在最后在代码注释中发现了重要信息，一个过程会把TW8836设置为高阻态，同时关闭显示信号，所以此时屏幕接收不到信号，就以默认的情况显示，在此处增加了关闭背光的代码后，开机过程中就不会出现白屏现象，但是屏幕背光也一直处于关闭状态，因此还要添加背光打开的代码。在背光关闭后立刻打开背光是不行的，需要等到其他地方给8836输入信号，并且修改其高阻态后再打开背光，但是我并不知道具体打开的地方，因此在关闭背光后我增加了一个延时的过程，经过调试，发现延时100ms后屏幕不仅不会出现白闪，同时背光也能被打开，开机一切正常。\n\nILLUMINATION电压值读取，通过处理器的引脚输入一个电压值，然后PC端下命令给处理器，处理器返回输入的电压值。这个需求还是比较好写的，只需要读取到ADC芯片中的寄存器得值，然后通过公式(电压值=参考电压的值/ADC分辨率*ADC寄存器的值)。\n\nFAN PWM读取，PC下命令后，返回duty cycle和frequence一开始是读取风扇的配置，然后返回数据。后来要求频率能够接受到外部输入，最先想到的是PWM输入模式，但是FAN PWM输入的引脚并没有PWM INPUT功能。最后通过求助，实现通过输入引脚的外部中断检测下降沿的次数，然后开一个一秒钟的任务来计算频率。PWM就是脉冲宽度调制，两个主要的参数是频率和占空比，频率是一秒钟信号的次数，占空比是每个信号中高电平所占的比例。通过高低电平有规律的交错就可以达到控制风扇速度的目的。\n\n现在我正在做的是使用TW8836的dongle来将图片资源刷入到SPI Flash中。可是使用dongle时却遇到了问题，一开始dongle能够正常连接，第二天开始就一直报找不到设备，询问了很多人也没找到原因，甚至换机台，换电脑都不行。我怀疑是芯片在我热拔插过程中烧坏了。目前正在等台湾公司给我寄新的板子。嵌入式出问题的原因也可能很多，最不好定位了，但是在反复验证过程中却可以不断练习自己的动手能力。问题原因可能要后续给出了。\n\n今天修改了风扇的pwm值，但是发给Sven后，他那边一直不能测到波形，但是我这边一直能测到，Sven使用的下载方法和测量方法与我一致。最后反复思考，他应该是没有插上风扇。实测插上风扇才有波形。","slug":"嵌入式开发一个月随笔","published":1,"updated":"2019-03-17T09:46:41.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt308000jzs1k154m1o2z","content":"<h1 id=\"嵌入式开发一个月随笔\"><a href=\"#嵌入式开发一个月随笔\" class=\"headerlink\" title=\"嵌入式开发一个月随笔\"></a>嵌入式开发一个月随笔</h1><p>从事嵌入式开发已经有一月有余，平心而论，我还是比较喜欢嵌入式开发的，不仅因为其涉及面广可以学习到很多知识，而且嵌入式开发对动手能力要求比较高，让我不觉得无聊。</p>\n<p>工作以来了解了嵌入式开发的相关流程，也实际动手做了几个需求。过程中遇到了很多问题也解决了很多问题，下面一一道来。</p>\n<p>调试，纯软件开发的调试可能没那么麻烦，IDE都会集成好调试工具，就算不使用IDE，也可以单独使用调试工具进行调试，像gdb之类的。这些调试工具可以进行断点设定、单步调试、多步调试、监视内存值等等十分有用的调试手段。但是呢，到了嵌入式板级调试，现在我们就主要使用的串口打印的方法进行调试，调试起来十分麻烦，想多测几个值就必须多写几句打印语句，用起来十分繁琐（当然嵌入式板级调试也有方法可以实现高效的调试手段，比如ARM提供的调试器，JTAG等，但是我对这些都不了解，以后提升开发效率可以从这些地方入手）。<br><a id=\"more\"></a><br>TW8836无RGB信号时的白画面问题，这是我接手的第一个问题，由于该项目换了显示器，现在显示器默认状态是背光高亮，这样人们就会看到白屏。在ACPH17中开机时，屏幕会有0.2s左右的白屏，导致用户看到的画面会有闪屏现象。一开始我是真的毫无头绪，后来知道了串口打印，就跟着开机流程中调用TW8836的函数一步步打印提示信息，这样大概熟悉了开机流程后，又跟着流程看代码，很多知识都不知道，所以是有点迷茫，好在最后在代码注释中发现了重要信息，一个过程会把TW8836设置为高阻态，同时关闭显示信号，所以此时屏幕接收不到信号，就以默认的情况显示，在此处增加了关闭背光的代码后，开机过程中就不会出现白屏现象，但是屏幕背光也一直处于关闭状态，因此还要添加背光打开的代码。在背光关闭后立刻打开背光是不行的，需要等到其他地方给8836输入信号，并且修改其高阻态后再打开背光，但是我并不知道具体打开的地方，因此在关闭背光后我增加了一个延时的过程，经过调试，发现延时100ms后屏幕不仅不会出现白闪，同时背光也能被打开，开机一切正常。</p>\n<p>ILLUMINATION电压值读取，通过处理器的引脚输入一个电压值，然后PC端下命令给处理器，处理器返回输入的电压值。这个需求还是比较好写的，只需要读取到ADC芯片中的寄存器得值，然后通过公式(电压值=参考电压的值/ADC分辨率*ADC寄存器的值)。</p>\n<p>FAN PWM读取，PC下命令后，返回duty cycle和frequence一开始是读取风扇的配置，然后返回数据。后来要求频率能够接受到外部输入，最先想到的是PWM输入模式，但是FAN PWM输入的引脚并没有PWM INPUT功能。最后通过求助，实现通过输入引脚的外部中断检测下降沿的次数，然后开一个一秒钟的任务来计算频率。PWM就是脉冲宽度调制，两个主要的参数是频率和占空比，频率是一秒钟信号的次数，占空比是每个信号中高电平所占的比例。通过高低电平有规律的交错就可以达到控制风扇速度的目的。</p>\n<p>现在我正在做的是使用TW8836的dongle来将图片资源刷入到SPI Flash中。可是使用dongle时却遇到了问题，一开始dongle能够正常连接，第二天开始就一直报找不到设备，询问了很多人也没找到原因，甚至换机台，换电脑都不行。我怀疑是芯片在我热拔插过程中烧坏了。目前正在等台湾公司给我寄新的板子。嵌入式出问题的原因也可能很多，最不好定位了，但是在反复验证过程中却可以不断练习自己的动手能力。问题原因可能要后续给出了。</p>\n<p>今天修改了风扇的pwm值，但是发给Sven后，他那边一直不能测到波形，但是我这边一直能测到，Sven使用的下载方法和测量方法与我一致。最后反复思考，他应该是没有插上风扇。实测插上风扇才有波形。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"嵌入式开发一个月随笔\"><a href=\"#嵌入式开发一个月随笔\" class=\"headerlink\" title=\"嵌入式开发一个月随笔\"></a>嵌入式开发一个月随笔</h1><p>从事嵌入式开发已经有一月有余，平心而论，我还是比较喜欢嵌入式开发的，不仅因为其涉及面广可以学习到很多知识，而且嵌入式开发对动手能力要求比较高，让我不觉得无聊。</p>\n<p>工作以来了解了嵌入式开发的相关流程，也实际动手做了几个需求。过程中遇到了很多问题也解决了很多问题，下面一一道来。</p>\n<p>调试，纯软件开发的调试可能没那么麻烦，IDE都会集成好调试工具，就算不使用IDE，也可以单独使用调试工具进行调试，像gdb之类的。这些调试工具可以进行断点设定、单步调试、多步调试、监视内存值等等十分有用的调试手段。但是呢，到了嵌入式板级调试，现在我们就主要使用的串口打印的方法进行调试，调试起来十分麻烦，想多测几个值就必须多写几句打印语句，用起来十分繁琐（当然嵌入式板级调试也有方法可以实现高效的调试手段，比如ARM提供的调试器，JTAG等，但是我对这些都不了解，以后提升开发效率可以从这些地方入手）。<br>","more":"<br>TW8836无RGB信号时的白画面问题，这是我接手的第一个问题，由于该项目换了显示器，现在显示器默认状态是背光高亮，这样人们就会看到白屏。在ACPH17中开机时，屏幕会有0.2s左右的白屏，导致用户看到的画面会有闪屏现象。一开始我是真的毫无头绪，后来知道了串口打印，就跟着开机流程中调用TW8836的函数一步步打印提示信息，这样大概熟悉了开机流程后，又跟着流程看代码，很多知识都不知道，所以是有点迷茫，好在最后在代码注释中发现了重要信息，一个过程会把TW8836设置为高阻态，同时关闭显示信号，所以此时屏幕接收不到信号，就以默认的情况显示，在此处增加了关闭背光的代码后，开机过程中就不会出现白屏现象，但是屏幕背光也一直处于关闭状态，因此还要添加背光打开的代码。在背光关闭后立刻打开背光是不行的，需要等到其他地方给8836输入信号，并且修改其高阻态后再打开背光，但是我并不知道具体打开的地方，因此在关闭背光后我增加了一个延时的过程，经过调试，发现延时100ms后屏幕不仅不会出现白闪，同时背光也能被打开，开机一切正常。</p>\n<p>ILLUMINATION电压值读取，通过处理器的引脚输入一个电压值，然后PC端下命令给处理器，处理器返回输入的电压值。这个需求还是比较好写的，只需要读取到ADC芯片中的寄存器得值，然后通过公式(电压值=参考电压的值/ADC分辨率*ADC寄存器的值)。</p>\n<p>FAN PWM读取，PC下命令后，返回duty cycle和frequence一开始是读取风扇的配置，然后返回数据。后来要求频率能够接受到外部输入，最先想到的是PWM输入模式，但是FAN PWM输入的引脚并没有PWM INPUT功能。最后通过求助，实现通过输入引脚的外部中断检测下降沿的次数，然后开一个一秒钟的任务来计算频率。PWM就是脉冲宽度调制，两个主要的参数是频率和占空比，频率是一秒钟信号的次数，占空比是每个信号中高电平所占的比例。通过高低电平有规律的交错就可以达到控制风扇速度的目的。</p>\n<p>现在我正在做的是使用TW8836的dongle来将图片资源刷入到SPI Flash中。可是使用dongle时却遇到了问题，一开始dongle能够正常连接，第二天开始就一直报找不到设备，询问了很多人也没找到原因，甚至换机台，换电脑都不行。我怀疑是芯片在我热拔插过程中烧坏了。目前正在等台湾公司给我寄新的板子。嵌入式出问题的原因也可能很多，最不好定位了，但是在反复验证过程中却可以不断练习自己的动手能力。问题原因可能要后续给出了。</p>\n<p>今天修改了风扇的pwm值，但是发给Sven后，他那边一直不能测到波形，但是我这边一直能测到，Sven使用的下载方法和测量方法与我一致。最后反复思考，他应该是没有插上风扇。实测插上风扇才有波形。</p>"},{"title":"工作至今","date":"2018-09-05T04:36:23.000Z","_content":"# 2018年9月5日\n距离毕业已经三年零两月。\n三年的时间不算长，但是还是足够让我学到不少。直到昨天清除一个比较难解的bug之后，突然就想写点东西记录下三年走来的路。\n\n# 2014年11月18日\n记得那是个阴天，站在517的楼层，透过窗户看到的全是远处的雾。报到之后，被分配到了退改签组，从此开始了我的实习之旅。\n当时主要是使用C#负责后端业务层，数据库操作，MVC框架什么的，当时还是比较熟的，但是当时完全只是为了使用而学习，并没有深层次的理解过，所以现在几乎忘完了:(。项目中使用的是敏捷开发，所以基本上每周都会迭代，记得应该是每周都会有3到5个需求需要完成。\n我们旁边组就是前端组，他们人数不多，所以很多时候我们组有前端需求的时候，刚哥就会交给我，所以我在517的时候还学会了JS/Ajax/JQuery这些全端的知识。想想那个时候真的是白天黑夜，朝8晚9的。后来对于智能家居的向往，就离职了。开始朝着嵌入式的方向前进。那时候东哥给了我特别多的帮助，还有鲁班等等，不知道现在大家过得怎么样了。\n<!--more-->\n# 2015年3月\n从517离职后，就开始在学校待了两个月，完成了毕业设计。同时还一面找实习。当时对于找工作，没有其他的想法，就想着找个C++的工作，能积累点经验，这样才能进入嵌入式领域。期间还像佳明航电的官方邮箱发了封简历，但是石沉大海。后来收到了中软国际的电话面试，接着是面谈。那个时候一心就想把技术学好，所以对于工资什么的，没有过多的追求了，想想那个时候真的是单纯。\n\n# 2015年5月4日\n入职中软，Team Leader是郭姐，一位十分亲和的Leader，所在的项目组是工具组，负责华为无线测试组的工具需求开发。其他的不说，至少是用的C++，哈哈！凭借着当时的单纯，拿着1500的实习工资，每天骑自行车往返于学校和工资，乐此不疲。\n在工具组，学习到了STL，shell，Linux操作，socket编程，TCP/UDP，线程池。并且学习了华为C++编码规范。在工具组的日志痛并快乐着。俊哥，石文，然姐，财哥，虎林，郭姐大家一起快乐coding，欢快地写bug，哈哈！\n在工具组待了有一年，从实习时的1500，到转正后的4500，再到后来6500，我想月薪的变化也说明公司对我工作的认可吧。\n\n# 2016年6月\n在中软的待了一年后，选择在嵌入式的道路上更近一步。所以选择了裸辞。\n裸辞的一个月真的是很闲，看书，投简历，面试。在经历了3家公司的面试之后，最终选择了佳明航电（GARMIN）。\n\n# 2016年8月15日\n入职GARMIN后，所在的部门是AOEM，负责模块是车载导航系统平台Video相关。这期间接触到了BSP开发，模拟视频信号，数字视频信号，I2C，opencv，freetype2，HDTVI，Linux kernel开发，TW8836芯片操作等等。从以前惧怕寄存器读写，linux kernel什么的，到现在天天与它们打交道。\n在GARMIN的这些日子，我也逐渐成长了，明白了工作不应该是为了工作而工作，要敢于迎接难题，并把战胜难题的过程当成是一个学习的过程。时刻调整自己的状态，不要走入思维的死胡同。除了技术提升和对工作的认识，在GARMIN的这些日子，英语也得到了练习。以前看资料都想千方百计地找中文版，现在天天看英文版的Data Sheet也不怕了！\n\n**<font color=#56cbe8>目前仍在GARMIN这个有爱的大家庭，对未来充满憧憬，希望未来的日子能更好！</font>**","source":"_posts/工作至今.md","raw":"---\ntitle: 工作至今\ndate: 2018-09-05 12:36:23\ntags:\n\t- 感想\n\t- 随笔\ncategories:\n\t- 生活\n\t- 随笔\n---\n# 2018年9月5日\n距离毕业已经三年零两月。\n三年的时间不算长，但是还是足够让我学到不少。直到昨天清除一个比较难解的bug之后，突然就想写点东西记录下三年走来的路。\n\n# 2014年11月18日\n记得那是个阴天，站在517的楼层，透过窗户看到的全是远处的雾。报到之后，被分配到了退改签组，从此开始了我的实习之旅。\n当时主要是使用C#负责后端业务层，数据库操作，MVC框架什么的，当时还是比较熟的，但是当时完全只是为了使用而学习，并没有深层次的理解过，所以现在几乎忘完了:(。项目中使用的是敏捷开发，所以基本上每周都会迭代，记得应该是每周都会有3到5个需求需要完成。\n我们旁边组就是前端组，他们人数不多，所以很多时候我们组有前端需求的时候，刚哥就会交给我，所以我在517的时候还学会了JS/Ajax/JQuery这些全端的知识。想想那个时候真的是白天黑夜，朝8晚9的。后来对于智能家居的向往，就离职了。开始朝着嵌入式的方向前进。那时候东哥给了我特别多的帮助，还有鲁班等等，不知道现在大家过得怎么样了。\n<!--more-->\n# 2015年3月\n从517离职后，就开始在学校待了两个月，完成了毕业设计。同时还一面找实习。当时对于找工作，没有其他的想法，就想着找个C++的工作，能积累点经验，这样才能进入嵌入式领域。期间还像佳明航电的官方邮箱发了封简历，但是石沉大海。后来收到了中软国际的电话面试，接着是面谈。那个时候一心就想把技术学好，所以对于工资什么的，没有过多的追求了，想想那个时候真的是单纯。\n\n# 2015年5月4日\n入职中软，Team Leader是郭姐，一位十分亲和的Leader，所在的项目组是工具组，负责华为无线测试组的工具需求开发。其他的不说，至少是用的C++，哈哈！凭借着当时的单纯，拿着1500的实习工资，每天骑自行车往返于学校和工资，乐此不疲。\n在工具组，学习到了STL，shell，Linux操作，socket编程，TCP/UDP，线程池。并且学习了华为C++编码规范。在工具组的日志痛并快乐着。俊哥，石文，然姐，财哥，虎林，郭姐大家一起快乐coding，欢快地写bug，哈哈！\n在工具组待了有一年，从实习时的1500，到转正后的4500，再到后来6500，我想月薪的变化也说明公司对我工作的认可吧。\n\n# 2016年6月\n在中软的待了一年后，选择在嵌入式的道路上更近一步。所以选择了裸辞。\n裸辞的一个月真的是很闲，看书，投简历，面试。在经历了3家公司的面试之后，最终选择了佳明航电（GARMIN）。\n\n# 2016年8月15日\n入职GARMIN后，所在的部门是AOEM，负责模块是车载导航系统平台Video相关。这期间接触到了BSP开发，模拟视频信号，数字视频信号，I2C，opencv，freetype2，HDTVI，Linux kernel开发，TW8836芯片操作等等。从以前惧怕寄存器读写，linux kernel什么的，到现在天天与它们打交道。\n在GARMIN的这些日子，我也逐渐成长了，明白了工作不应该是为了工作而工作，要敢于迎接难题，并把战胜难题的过程当成是一个学习的过程。时刻调整自己的状态，不要走入思维的死胡同。除了技术提升和对工作的认识，在GARMIN的这些日子，英语也得到了练习。以前看资料都想千方百计地找中文版，现在天天看英文版的Data Sheet也不怕了！\n\n**<font color=#56cbe8>目前仍在GARMIN这个有爱的大家庭，对未来充满憧憬，希望未来的日子能更好！</font>**","slug":"工作至今","published":1,"updated":"2019-03-17T11:06:52.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt30b000kzs1khq677g9c","content":"<h1 id=\"2018年9月5日\"><a href=\"#2018年9月5日\" class=\"headerlink\" title=\"2018年9月5日\"></a>2018年9月5日</h1><p>距离毕业已经三年零两月。<br>三年的时间不算长，但是还是足够让我学到不少。直到昨天清除一个比较难解的bug之后，突然就想写点东西记录下三年走来的路。</p>\n<h1 id=\"2014年11月18日\"><a href=\"#2014年11月18日\" class=\"headerlink\" title=\"2014年11月18日\"></a>2014年11月18日</h1><p>记得那是个阴天，站在517的楼层，透过窗户看到的全是远处的雾。报到之后，被分配到了退改签组，从此开始了我的实习之旅。<br>当时主要是使用C#负责后端业务层，数据库操作，MVC框架什么的，当时还是比较熟的，但是当时完全只是为了使用而学习，并没有深层次的理解过，所以现在几乎忘完了:(。项目中使用的是敏捷开发，所以基本上每周都会迭代，记得应该是每周都会有3到5个需求需要完成。<br>我们旁边组就是前端组，他们人数不多，所以很多时候我们组有前端需求的时候，刚哥就会交给我，所以我在517的时候还学会了JS/Ajax/JQuery这些全端的知识。想想那个时候真的是白天黑夜，朝8晚9的。后来对于智能家居的向往，就离职了。开始朝着嵌入式的方向前进。那时候东哥给了我特别多的帮助，还有鲁班等等，不知道现在大家过得怎么样了。<br><a id=\"more\"></a></p>\n<h1 id=\"2015年3月\"><a href=\"#2015年3月\" class=\"headerlink\" title=\"2015年3月\"></a>2015年3月</h1><p>从517离职后，就开始在学校待了两个月，完成了毕业设计。同时还一面找实习。当时对于找工作，没有其他的想法，就想着找个C++的工作，能积累点经验，这样才能进入嵌入式领域。期间还像佳明航电的官方邮箱发了封简历，但是石沉大海。后来收到了中软国际的电话面试，接着是面谈。那个时候一心就想把技术学好，所以对于工资什么的，没有过多的追求了，想想那个时候真的是单纯。</p>\n<h1 id=\"2015年5月4日\"><a href=\"#2015年5月4日\" class=\"headerlink\" title=\"2015年5月4日\"></a>2015年5月4日</h1><p>入职中软，Team Leader是郭姐，一位十分亲和的Leader，所在的项目组是工具组，负责华为无线测试组的工具需求开发。其他的不说，至少是用的C++，哈哈！凭借着当时的单纯，拿着1500的实习工资，每天骑自行车往返于学校和工资，乐此不疲。<br>在工具组，学习到了STL，shell，Linux操作，socket编程，TCP/UDP，线程池。并且学习了华为C++编码规范。在工具组的日志痛并快乐着。俊哥，石文，然姐，财哥，虎林，郭姐大家一起快乐coding，欢快地写bug，哈哈！<br>在工具组待了有一年，从实习时的1500，到转正后的4500，再到后来6500，我想月薪的变化也说明公司对我工作的认可吧。</p>\n<h1 id=\"2016年6月\"><a href=\"#2016年6月\" class=\"headerlink\" title=\"2016年6月\"></a>2016年6月</h1><p>在中软的待了一年后，选择在嵌入式的道路上更近一步。所以选择了裸辞。<br>裸辞的一个月真的是很闲，看书，投简历，面试。在经历了3家公司的面试之后，最终选择了佳明航电（GARMIN）。</p>\n<h1 id=\"2016年8月15日\"><a href=\"#2016年8月15日\" class=\"headerlink\" title=\"2016年8月15日\"></a>2016年8月15日</h1><p>入职GARMIN后，所在的部门是AOEM，负责模块是车载导航系统平台Video相关。这期间接触到了BSP开发，模拟视频信号，数字视频信号，I2C，opencv，freetype2，HDTVI，Linux kernel开发，TW8836芯片操作等等。从以前惧怕寄存器读写，linux kernel什么的，到现在天天与它们打交道。<br>在GARMIN的这些日子，我也逐渐成长了，明白了工作不应该是为了工作而工作，要敢于迎接难题，并把战胜难题的过程当成是一个学习的过程。时刻调整自己的状态，不要走入思维的死胡同。除了技术提升和对工作的认识，在GARMIN的这些日子，英语也得到了练习。以前看资料都想千方百计地找中文版，现在天天看英文版的Data Sheet也不怕了！</p>\n<p><strong><font color=\"#56cbe8\">目前仍在GARMIN这个有爱的大家庭，对未来充满憧憬，希望未来的日子能更好！</font></strong></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"2018年9月5日\"><a href=\"#2018年9月5日\" class=\"headerlink\" title=\"2018年9月5日\"></a>2018年9月5日</h1><p>距离毕业已经三年零两月。<br>三年的时间不算长，但是还是足够让我学到不少。直到昨天清除一个比较难解的bug之后，突然就想写点东西记录下三年走来的路。</p>\n<h1 id=\"2014年11月18日\"><a href=\"#2014年11月18日\" class=\"headerlink\" title=\"2014年11月18日\"></a>2014年11月18日</h1><p>记得那是个阴天，站在517的楼层，透过窗户看到的全是远处的雾。报到之后，被分配到了退改签组，从此开始了我的实习之旅。<br>当时主要是使用C#负责后端业务层，数据库操作，MVC框架什么的，当时还是比较熟的，但是当时完全只是为了使用而学习，并没有深层次的理解过，所以现在几乎忘完了:(。项目中使用的是敏捷开发，所以基本上每周都会迭代，记得应该是每周都会有3到5个需求需要完成。<br>我们旁边组就是前端组，他们人数不多，所以很多时候我们组有前端需求的时候，刚哥就会交给我，所以我在517的时候还学会了JS/Ajax/JQuery这些全端的知识。想想那个时候真的是白天黑夜，朝8晚9的。后来对于智能家居的向往，就离职了。开始朝着嵌入式的方向前进。那时候东哥给了我特别多的帮助，还有鲁班等等，不知道现在大家过得怎么样了。<br>","more":"</p>\n<h1 id=\"2015年3月\"><a href=\"#2015年3月\" class=\"headerlink\" title=\"2015年3月\"></a>2015年3月</h1><p>从517离职后，就开始在学校待了两个月，完成了毕业设计。同时还一面找实习。当时对于找工作，没有其他的想法，就想着找个C++的工作，能积累点经验，这样才能进入嵌入式领域。期间还像佳明航电的官方邮箱发了封简历，但是石沉大海。后来收到了中软国际的电话面试，接着是面谈。那个时候一心就想把技术学好，所以对于工资什么的，没有过多的追求了，想想那个时候真的是单纯。</p>\n<h1 id=\"2015年5月4日\"><a href=\"#2015年5月4日\" class=\"headerlink\" title=\"2015年5月4日\"></a>2015年5月4日</h1><p>入职中软，Team Leader是郭姐，一位十分亲和的Leader，所在的项目组是工具组，负责华为无线测试组的工具需求开发。其他的不说，至少是用的C++，哈哈！凭借着当时的单纯，拿着1500的实习工资，每天骑自行车往返于学校和工资，乐此不疲。<br>在工具组，学习到了STL，shell，Linux操作，socket编程，TCP/UDP，线程池。并且学习了华为C++编码规范。在工具组的日志痛并快乐着。俊哥，石文，然姐，财哥，虎林，郭姐大家一起快乐coding，欢快地写bug，哈哈！<br>在工具组待了有一年，从实习时的1500，到转正后的4500，再到后来6500，我想月薪的变化也说明公司对我工作的认可吧。</p>\n<h1 id=\"2016年6月\"><a href=\"#2016年6月\" class=\"headerlink\" title=\"2016年6月\"></a>2016年6月</h1><p>在中软的待了一年后，选择在嵌入式的道路上更近一步。所以选择了裸辞。<br>裸辞的一个月真的是很闲，看书，投简历，面试。在经历了3家公司的面试之后，最终选择了佳明航电（GARMIN）。</p>\n<h1 id=\"2016年8月15日\"><a href=\"#2016年8月15日\" class=\"headerlink\" title=\"2016年8月15日\"></a>2016年8月15日</h1><p>入职GARMIN后，所在的部门是AOEM，负责模块是车载导航系统平台Video相关。这期间接触到了BSP开发，模拟视频信号，数字视频信号，I2C，opencv，freetype2，HDTVI，Linux kernel开发，TW8836芯片操作等等。从以前惧怕寄存器读写，linux kernel什么的，到现在天天与它们打交道。<br>在GARMIN的这些日子，我也逐渐成长了，明白了工作不应该是为了工作而工作，要敢于迎接难题，并把战胜难题的过程当成是一个学习的过程。时刻调整自己的状态，不要走入思维的死胡同。除了技术提升和对工作的认识，在GARMIN的这些日子，英语也得到了练习。以前看资料都想千方百计地找中文版，现在天天看英文版的Data Sheet也不怕了！</p>\n<p><strong><font color=\"#56cbe8\">目前仍在GARMIN这个有爱的大家庭，对未来充满憧憬，希望未来的日子能更好！</font></strong></p>"},{"title":"巧用std::shared_ptr全局对象释放单例内存","date":"2018-08-27T10:01:24.000Z","_content":"## 单例内存释放\n在程序中如果存在者单例，同时它们还需要执行delete等操作的话，我们通常在main的末尾去掉用单例的析构函数，或着利用编译器的属性，来设置main函数后执行的函数`__attribute((destructor)) `。\n但是如果单例并不是在main函数所在的文件中定义的，那么就还需要想办法在main函数中访问它们，显得相对麻烦。\n\n## 全局对象析构\n在系统中全局对象都是由系统负责析构的，所以全局变量的析构函数，会在程序停止运行后，由系统调用执行。\n``` cpp\n#include <iostream>\n\nclass Test\n{\npublic:\n    Test(int a)\n    {\n        std::cout << \"Test Input: \" << a << \".\" << std::endl;\n    }\n\n    ~Test()\n    {\n        std::cout << \"Test, destructor!\" << std::endl;\n    }\n};\n\nTest test(88);\n\nint main( void )\n{\n    std::cout << \"main....\" << std::endl;\n}\n```\n<!--more-->\n上面代码执行结果如下：\n```\nzhangbob@ubuntu:~/code/test$ ./main\nTest Input: 88.\nmain....\nTest, destructor!\n```\n所以我们可以利用全局变量的这个特性，来析构单例对象。\n\n## 巧用std::shared_ptr\n但是如果每一次都需要写一个全局变量来负责析构单例对象，那么还是比较麻烦，因此便有了利用全局变量由系统负载析构的特点，定义一个全局str::shared_ptr对象，对象指定对单例进行析构。\n因此不需要我们关心何时析构单例，也不需要添加很多代码，堪称方便。\n* SingleObject.hpp\n``` cpp\n#ifndef SINGLEOBJECT_H\n#define SINGLEOBJECT_H\n \nclass SingleObject\n{\npublic:\n    static SingleObject& GetInstance();\n    static SingleObject* GetInstancePtr();\n    static void DoSomeThing();\n    static void DelObj();\nprivate:\n    static void NewObj();\n    SingleObject();\n    ~SingleObject();\n     \n    static SingleObject* msObj;\n};\n \n#endif // SINGLEOBJECT_H\n```\n* SingleObject.cpp\n``` cpp\n#include \"SingleObject.hpp\"\n#include <iostream>\n#include <memory>\n \nstd::shared_ptr<SingleObject> SingleObjectDeletor( SingleObject::GetInstancePtr(), [](SingleObject *){ SingleObject::GetInstance().DelObj(); });\n \nSingleObject* SingleObject::msObj = NULL;\n \nSingleObject::SingleObject()\n{\n    std::cout << \"This is the constructor of SignleObject class!\\n\";\n}\n \nSingleObject::~SingleObject()\n{\n    std::cout << \"This is the destructor of SingleObject class!\\n\";\n}\n \nvoid SingleObject::NewObj()\n{\n    if( NULL == msObj )\n    {\n        // lock\n        msObj = new SingleObject();\n         \n        // unlock\n    }\n     \n    std::cout << \"New an object, address: \" << +msObj << std::endl;\n}\n \nvoid SingleObject::DelObj()\n{\n    if( NULL != msObj )\n    {\n        delete msObj;\n        std::cout << \"Delete an object!\\n\";\n    }\n}\n \nSingleObject* SingleObject::GetInstancePtr()\n{\n    if( NULL == msObj )\n    {\n        NewObj();\n    }\n     \n    return msObj;\n}\n \nSingleObject& SingleObject::GetInstance()\n{\n    if( NULL == msObj )\n    {\n        NewObj();\n    }\n     \n    return *msObj;\n}\n \nvoid SingleObject::DoSomeThing()\n{\n    std::cout << \"SingleObject do some thing!\\n\";\n}\n```\nmain.cpp\n``` cpp\n#include <iostream>\n#include \"SingleObject.hpp\"\n \nint main(int argc, char **argv)\n{\n    SingleObject::GetInstance().DoSomeThing();\n     \n    return 0;\n}\n```\n最后的输出结果参见下图：\n{% asset_img result.png %}","source":"_posts/巧用std-shared-ptr全局对象释放单例内存.md","raw":"---\ntitle: '巧用std::shared_ptr全局对象释放单例内存'\ndate: 2018-08-27 18:01:24\ntags:\n\t- C\n\t- C++\ncategories:\n\t- 技术\n\t- C++\n---\n## 单例内存释放\n在程序中如果存在者单例，同时它们还需要执行delete等操作的话，我们通常在main的末尾去掉用单例的析构函数，或着利用编译器的属性，来设置main函数后执行的函数`__attribute((destructor)) `。\n但是如果单例并不是在main函数所在的文件中定义的，那么就还需要想办法在main函数中访问它们，显得相对麻烦。\n\n## 全局对象析构\n在系统中全局对象都是由系统负责析构的，所以全局变量的析构函数，会在程序停止运行后，由系统调用执行。\n``` cpp\n#include <iostream>\n\nclass Test\n{\npublic:\n    Test(int a)\n    {\n        std::cout << \"Test Input: \" << a << \".\" << std::endl;\n    }\n\n    ~Test()\n    {\n        std::cout << \"Test, destructor!\" << std::endl;\n    }\n};\n\nTest test(88);\n\nint main( void )\n{\n    std::cout << \"main....\" << std::endl;\n}\n```\n<!--more-->\n上面代码执行结果如下：\n```\nzhangbob@ubuntu:~/code/test$ ./main\nTest Input: 88.\nmain....\nTest, destructor!\n```\n所以我们可以利用全局变量的这个特性，来析构单例对象。\n\n## 巧用std::shared_ptr\n但是如果每一次都需要写一个全局变量来负责析构单例对象，那么还是比较麻烦，因此便有了利用全局变量由系统负载析构的特点，定义一个全局str::shared_ptr对象，对象指定对单例进行析构。\n因此不需要我们关心何时析构单例，也不需要添加很多代码，堪称方便。\n* SingleObject.hpp\n``` cpp\n#ifndef SINGLEOBJECT_H\n#define SINGLEOBJECT_H\n \nclass SingleObject\n{\npublic:\n    static SingleObject& GetInstance();\n    static SingleObject* GetInstancePtr();\n    static void DoSomeThing();\n    static void DelObj();\nprivate:\n    static void NewObj();\n    SingleObject();\n    ~SingleObject();\n     \n    static SingleObject* msObj;\n};\n \n#endif // SINGLEOBJECT_H\n```\n* SingleObject.cpp\n``` cpp\n#include \"SingleObject.hpp\"\n#include <iostream>\n#include <memory>\n \nstd::shared_ptr<SingleObject> SingleObjectDeletor( SingleObject::GetInstancePtr(), [](SingleObject *){ SingleObject::GetInstance().DelObj(); });\n \nSingleObject* SingleObject::msObj = NULL;\n \nSingleObject::SingleObject()\n{\n    std::cout << \"This is the constructor of SignleObject class!\\n\";\n}\n \nSingleObject::~SingleObject()\n{\n    std::cout << \"This is the destructor of SingleObject class!\\n\";\n}\n \nvoid SingleObject::NewObj()\n{\n    if( NULL == msObj )\n    {\n        // lock\n        msObj = new SingleObject();\n         \n        // unlock\n    }\n     \n    std::cout << \"New an object, address: \" << +msObj << std::endl;\n}\n \nvoid SingleObject::DelObj()\n{\n    if( NULL != msObj )\n    {\n        delete msObj;\n        std::cout << \"Delete an object!\\n\";\n    }\n}\n \nSingleObject* SingleObject::GetInstancePtr()\n{\n    if( NULL == msObj )\n    {\n        NewObj();\n    }\n     \n    return msObj;\n}\n \nSingleObject& SingleObject::GetInstance()\n{\n    if( NULL == msObj )\n    {\n        NewObj();\n    }\n     \n    return *msObj;\n}\n \nvoid SingleObject::DoSomeThing()\n{\n    std::cout << \"SingleObject do some thing!\\n\";\n}\n```\nmain.cpp\n``` cpp\n#include <iostream>\n#include \"SingleObject.hpp\"\n \nint main(int argc, char **argv)\n{\n    SingleObject::GetInstance().DoSomeThing();\n     \n    return 0;\n}\n```\n最后的输出结果参见下图：\n{% asset_img result.png %}","slug":"巧用std-shared-ptr全局对象释放单例内存","published":1,"updated":"2019-03-25T15:31:33.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt30f000nzs1kakzajpxq","content":"<h2 id=\"单例内存释放\"><a href=\"#单例内存释放\" class=\"headerlink\" title=\"单例内存释放\"></a>单例内存释放</h2><p>在程序中如果存在者单例，同时它们还需要执行delete等操作的话，我们通常在main的末尾去掉用单例的析构函数，或着利用编译器的属性，来设置main函数后执行的函数<code>__attribute((destructor))</code>。<br>但是如果单例并不是在main函数所在的文件中定义的，那么就还需要想办法在main函数中访问它们，显得相对麻烦。</p>\n<h2 id=\"全局对象析构\"><a href=\"#全局对象析构\" class=\"headerlink\" title=\"全局对象析构\"></a>全局对象析构</h2><p>在系统中全局对象都是由系统负责析构的，所以全局变量的析构函数，会在程序停止运行后，由系统调用执行。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Test(<span class=\"keyword\">int</span> a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Test Input: \"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\".\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Test()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Test, destructor!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">test</span><span class=\"params\">(<span class=\"number\">88</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"main....\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>上面代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangbob@ubuntu:~/code/test$ ./main</span><br><span class=\"line\">Test Input: 88.</span><br><span class=\"line\">main....</span><br><span class=\"line\">Test, destructor!</span><br></pre></td></tr></table></figure></p>\n<p>所以我们可以利用全局变量的这个特性，来析构单例对象。</p>\n<h2 id=\"巧用std-shared-ptr\"><a href=\"#巧用std-shared-ptr\" class=\"headerlink\" title=\"巧用std::shared_ptr\"></a>巧用std::shared_ptr</h2><p>但是如果每一次都需要写一个全局变量来负责析构单例对象，那么还是比较麻烦，因此便有了利用全局变量由系统负载析构的特点，定义一个全局str::shared_ptr对象，对象指定对单例进行析构。<br>因此不需要我们关心何时析构单例，也不需要添加很多代码，堪称方便。</p>\n<ul>\n<li><p>SingleObject.hpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SINGLEOBJECT_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SINGLEOBJECT_H</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleObject</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> SingleObject&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> SingleObject* <span class=\"title\">GetInstancePtr</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomeThing</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DelObj</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">NewObj</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    SingleObject();</span><br><span class=\"line\">    ~SingleObject();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">static</span> SingleObject* msObj;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SINGLEOBJECT_H</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SingleObject.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"SingleObject.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;SingleObject&gt; SingleObjectDeletor( SingleObject::GetInstancePtr(), [](SingleObject *)&#123; SingleObject::GetInstance().DelObj(); &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject* SingleObject::msObj = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject::SingleObject()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"This is the constructor of SignleObject class!\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject::~SingleObject()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"This is the destructor of SingleObject class!\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">void</span> SingleObject::NewObj()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == msObj )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// lock</span></span><br><span class=\"line\">        msObj = <span class=\"keyword\">new</span> SingleObject();</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// unlock</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"New an object, address: \"</span> &lt;&lt; +msObj &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">void</span> SingleObject::DelObj()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> != msObj )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> msObj;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Delete an object!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject* SingleObject::GetInstancePtr()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == msObj )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        NewObj();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> msObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject&amp; SingleObject::GetInstance()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == msObj )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        NewObj();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> *msObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">void</span> SingleObject::DoSomeThing()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"SingleObject do some thing!\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>main.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"SingleObject.hpp\"</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SingleObject::GetInstance().DoSomeThing();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后的输出结果参见下图：<br><img src=\"/2018/08/27/巧用std-shared-ptr全局对象释放单例内存/result.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"单例内存释放\"><a href=\"#单例内存释放\" class=\"headerlink\" title=\"单例内存释放\"></a>单例内存释放</h2><p>在程序中如果存在者单例，同时它们还需要执行delete等操作的话，我们通常在main的末尾去掉用单例的析构函数，或着利用编译器的属性，来设置main函数后执行的函数<code>__attribute((destructor))</code>。<br>但是如果单例并不是在main函数所在的文件中定义的，那么就还需要想办法在main函数中访问它们，显得相对麻烦。</p>\n<h2 id=\"全局对象析构\"><a href=\"#全局对象析构\" class=\"headerlink\" title=\"全局对象析构\"></a>全局对象析构</h2><p>在系统中全局对象都是由系统负责析构的，所以全局变量的析构函数，会在程序停止运行后，由系统调用执行。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Test(<span class=\"keyword\">int</span> a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Test Input: \"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\".\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Test()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Test, destructor!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Test <span class=\"title\">test</span><span class=\"params\">(<span class=\"number\">88</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"main....\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>上面代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangbob@ubuntu:~/code/test$ ./main</span><br><span class=\"line\">Test Input: 88.</span><br><span class=\"line\">main....</span><br><span class=\"line\">Test, destructor!</span><br></pre></td></tr></table></figure></p>\n<p>所以我们可以利用全局变量的这个特性，来析构单例对象。</p>\n<h2 id=\"巧用std-shared-ptr\"><a href=\"#巧用std-shared-ptr\" class=\"headerlink\" title=\"巧用std::shared_ptr\"></a>巧用std::shared_ptr</h2><p>但是如果每一次都需要写一个全局变量来负责析构单例对象，那么还是比较麻烦，因此便有了利用全局变量由系统负载析构的特点，定义一个全局str::shared_ptr对象，对象指定对单例进行析构。<br>因此不需要我们关心何时析构单例，也不需要添加很多代码，堪称方便。</p>\n<ul>\n<li><p>SingleObject.hpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SINGLEOBJECT_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SINGLEOBJECT_H</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleObject</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> SingleObject&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> SingleObject* <span class=\"title\">GetInstancePtr</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomeThing</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DelObj</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">NewObj</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    SingleObject();</span><br><span class=\"line\">    ~SingleObject();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">static</span> SingleObject* msObj;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SINGLEOBJECT_H</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SingleObject.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"SingleObject.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;SingleObject&gt; SingleObjectDeletor( SingleObject::GetInstancePtr(), [](SingleObject *)&#123; SingleObject::GetInstance().DelObj(); &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject* SingleObject::msObj = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject::SingleObject()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"This is the constructor of SignleObject class!\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject::~SingleObject()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"This is the destructor of SingleObject class!\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">void</span> SingleObject::NewObj()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == msObj )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// lock</span></span><br><span class=\"line\">        msObj = <span class=\"keyword\">new</span> SingleObject();</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// unlock</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"New an object, address: \"</span> &lt;&lt; +msObj &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">void</span> SingleObject::DelObj()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> != msObj )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> msObj;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Delete an object!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject* SingleObject::GetInstancePtr()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == msObj )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        NewObj();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> msObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SingleObject&amp; SingleObject::GetInstance()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"literal\">NULL</span> == msObj )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        NewObj();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> *msObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">void</span> SingleObject::DoSomeThing()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"SingleObject do some thing!\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>main.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"SingleObject.hpp\"</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SingleObject::GetInstance().DoSomeThing();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后的输出结果参见下图：<br><img src=\"/2018/08/27/巧用std-shared-ptr全局对象释放单例内存/result.png\"></p>"},{"title":"自动喂鱼机","date":"2019-03-05T14:10:15.000Z","top":true,"_content":"# 自动喂鱼机\n自从上次成功驱动了报废光驱上拆下来的步进电机后，就一直想做一个能够自动定时喂鱼的装置，解决我周末或者长假回老家后鱼缸没人照料的窘境。一旦连续两天不喂食，那么必有最弱小的一条鱼会被啃得面目全非，所以我急需这样一个装置。\n所有有志者事竟成，一切伟大的思想和行动都有一个微不足道的开始，最终还是让我把这样一个“产品”给做出来了，先不多说了，上一张图来看看。\n\n{% asset_img feeder.gif %}\n\n下面详细讲解下实现的过程吧。\n<!--more-->\n# 硬件\n\n通过上面的动图，能够看出这个装置其实主要分为四个部分：\n\n{% asset_img feeder.png %}\n\n1. 饲料仓库\n2. 电机模块\n3. 电机驱动\n4. 主控板\n\n由主控板上的软件做好时间控制，在到达喂食时间点后，通过高低电平控制电机驱动板控制电机正转一定时长，使得饲料投放装置落下，饲料从出口落出，再控制电机反转，拉起饲料投放装置。\n\n## 饲料存储\n\n这个其实没有什么好说的，和整个装置的支撑架一样，都是手工制作的。\n\n{% asset_img feed_storage.png %}\n\n## 电机\n电机是从报废了的光驱上拆下来的两相双极性步进电机，可以参考之前的文章 {% post_link 两相双极性步进电机驱动 %}。\n\n{% asset_img motor.png %}\n\n## 电机驱动板\n电机驱动板，是很久很久以前，大概12年的时候，做智能巡线小车的时候留下来的L293D驱动芯片，通过输入不同的电平组，可以驱动电压输出到不同的口以及方向。最多可以同时驱动两个直流电机，这里我直接拿来驱动这一个步进电机了。\n\n{% asset_img drive_board.png %}\n\n## 主控板\n主控板就更简单了，直接花了几块钱在淘宝淘的一个最小C51单片机系统。\n\n{% asset_img main_board.png %}\n\n# 软件\n\n软件部分主要是使用了单片机的定时器来计时，然后到达指定时长后驱动电机正转反转，让饲料可以落下。\n\n## 流程图：\n\n{% asset_img flowchart.png %}\n\n## 代码\n\n[点击下载代码](https://github.com/SadCPPCoder/FishFeeder/blob/master/code/stepper.c)\n``` c\n/*****************************************************************\n* File Name: stepper.c\n* Description: This file is a stepper related function, includes\n*             time controller, stepper controller, task controller.\n* Date: 2018.11.14\n* Author: Bob, Zhang\n* E-mail: 156500117@qq.coom\n*****************************************************************/\n\n#include <reg52.h>\n\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned char bool;\n#define false ( 0 )\n#define true  ( !false )\n\n// stepper pins\nsbit steperA = P1^0;\nsbit steperB = P1^1;\nsbit steperA_ = P1^2;\nsbit steperB_ = P1^3;\n\n// count for 1 ms\n#define TIMER_VAL_FOR_1MS (0xFC18)\nint direction_change_flag = 0x00;\n\nvoid delay(int aUs)\n{\n    static int i;\n    static int us;\n\n    us = aUs;\n\n    while(us--)\n    {\n        i = 11;\n        while(--i);\n    }\n}\n\n// stepper left turn\nvoid MotorLeft()\n{\n    static int i = 3;\n   \n    switch( i-- )\n    {\n        case 0:\n\t\t    steperA = 1;\n\t\t    steperA_ = 0;\n\t\t    steperB = 0;\n\t\t    steperB_ = 0;\n\t\t    break;\n        case 1:\n\t\t    steperA = 0;\n\t\t    steperA_ = 0;\n\t\t    steperB = 1;\n\t\t    steperB_ = 0;\n\t\t    break;\n        case 2:\n\t\t\tsteperA = 0;\n\t\t\tsteperA_ = 1;\n    \t\tsteperB = 0;\n\t    \tsteperB_ = 0;\n\t\t    break;\n        case 3:\n\t\t    steperA = 0;\n\t\t    steperA_ = 0;\n\t\t    steperB = 0;\n\t\t    steperB_ = 1;\n\t    \tbreak;\n        default:\n\t\t    break;\n    }\n   \n    if( -1 >= i )\n        i = 3;\n }\n\n// stepper right turn\nvoid MotorRight()\n{\n    static int i = 0;\n   \n    switch( i++ )\n    {\n        case 0:\n\t\t    steperA = 1;\n\t\t    steperA_ = 0;\n\t\t    steperB = 0;\n\t\t    steperB_ = 0;\n\t\t    break;\n        case 1:\n\t\t    steperA = 0;\n\t\t    steperA_ = 0;\n\t\t    steperB = 1;\n\t\t    steperB_ = 0;\n\t\t    break;\n        case 2:\n\t\t\tsteperA = 0;\n\t\t\tsteperA_ = 1;\n    \t\tsteperB = 0;\n\t    \tsteperB_ = 0;\n\t\t    break;\n        case 3:\n\t\t    steperA = 0;\n\t\t    steperA_ = 0;\n\t\t    steperB = 0;\n\t\t    steperB_ = 1;\n\t    \tbreak;\n        default:\n\t\t    break;\n    }\n   \n    if( 4 <= i )\n        i = 0;\n}\n\n// init timer\nvoid InitTimer()\n{\n\tTMOD = 0x01;\n\tTH0 = TIMER_VAL_FOR_1MS >> 8;\t// 1 ms\n\tTL0 = TIMER_VAL_FOR_1MS & 0xFF;\n\tET0 = 0x01;\n\tEA = 0x01;\n\tTR0 = 0x01;\n}\n\n// state machine\ntypedef uint8_t task_state_t; enum\n{\n\tTASK_STATE_INIT_TIMER_STATE=0,\n\tTASK_STATE_FEED_FISH_MOTOR_LEFT_STATE,\n\tTASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE,\n\tTASK_STATE_WAIT_STATE,\n};\n\n#define FEED_FISH_TIME_PERIOD 3 //( 8*60*60 ) // 8h\nstatic const uint32_t feed_fish_period = FEED_FISH_TIME_PERIOD; // 8h\nstatic const uint32_t feed_first_period = FEED_FISH_TIME_PERIOD + 4; // 4s\nstatic const uint32_t feed_second_period = FEED_FISH_TIME_PERIOD + 4 + 4; // 4s\n\nstatic task_state_t next_state = TASK_STATE_INIT_TIMER_STATE;\n\nvoid TaskLoop()\n{\n\tswitch(next_state)\n\t{\n\t\tcase TASK_STATE_INIT_TIMER_STATE:\n\t\t\tInitTimer();\n\t\t\tnext_state = TASK_STATE_WAIT_STATE;\n\t\tbreak;\n\t\tcase TASK_STATE_FEED_FISH_MOTOR_LEFT_STATE:\n            MotorLeft();\n\t\tbreak;\n\t\tcase TASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE:\n            MotorRight();\n\t\tbreak;\n\t\tcase TASK_STATE_WAIT_STATE:\n\t\tbreak;\n\t}\n}\n\nvoid StateLoop()\n{\n\tstatic uint32_t fedd_fish_time_count = FEED_FISH_TIME_PERIOD;\n\n\tif( fedd_fish_time_count == feed_fish_period )\n\t{\n\t\tnext_state = TASK_STATE_FEED_FISH_MOTOR_LEFT_STATE;\n\t}\n\telse if( fedd_fish_time_count == feed_first_period )\n\t{\n\t\tnext_state = TASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE;\n\t}\n\telse if( fedd_fish_time_count == feed_second_period )\n\t{\n\t\tnext_state = TASK_STATE_WAIT_STATE;\n\t\tfedd_fish_time_count = 0;\n\t}\n\n\t++fedd_fish_time_count;\n}\n\n// timer interrupt function\n#define STATE_CHECK_TIME ( 1000 )\nvoid TimerIrq( void ) interrupt 1 using 1\n{\n\tstatic long time_count = 0;\n\n\t++time_count;\n\n\t// every second run once state check\n\tif( STATE_CHECK_TIME == time_count )\n\t{\n\t\tStateLoop();\n\t\ttime_count = 0;\n\t}\n\n\tTH0 = TIMER_VAL_FOR_1MS >> 8;\t// 1 ms\n\tTL0 = TIMER_VAL_FOR_1MS & 0xFF;\n\t\n}\n\nvoid main()\n{\t\n    do\n    {\n\t\tTaskLoop();\n        delay(100);\n    } while( 1 );\n}\n```","source":"_posts/自动喂鱼机.md","raw":"---\ntitle: 自动喂鱼机\ndate: 2019-03-05 22:10:15\ntags:\n\t- 嵌入式\n\t- 步进电机\n\t- C51\ncategories: \n\t- 技术\n\t- 嵌入式\n\t- C51\ntop: true\n---\n# 自动喂鱼机\n自从上次成功驱动了报废光驱上拆下来的步进电机后，就一直想做一个能够自动定时喂鱼的装置，解决我周末或者长假回老家后鱼缸没人照料的窘境。一旦连续两天不喂食，那么必有最弱小的一条鱼会被啃得面目全非，所以我急需这样一个装置。\n所有有志者事竟成，一切伟大的思想和行动都有一个微不足道的开始，最终还是让我把这样一个“产品”给做出来了，先不多说了，上一张图来看看。\n\n{% asset_img feeder.gif %}\n\n下面详细讲解下实现的过程吧。\n<!--more-->\n# 硬件\n\n通过上面的动图，能够看出这个装置其实主要分为四个部分：\n\n{% asset_img feeder.png %}\n\n1. 饲料仓库\n2. 电机模块\n3. 电机驱动\n4. 主控板\n\n由主控板上的软件做好时间控制，在到达喂食时间点后，通过高低电平控制电机驱动板控制电机正转一定时长，使得饲料投放装置落下，饲料从出口落出，再控制电机反转，拉起饲料投放装置。\n\n## 饲料存储\n\n这个其实没有什么好说的，和整个装置的支撑架一样，都是手工制作的。\n\n{% asset_img feed_storage.png %}\n\n## 电机\n电机是从报废了的光驱上拆下来的两相双极性步进电机，可以参考之前的文章 {% post_link 两相双极性步进电机驱动 %}。\n\n{% asset_img motor.png %}\n\n## 电机驱动板\n电机驱动板，是很久很久以前，大概12年的时候，做智能巡线小车的时候留下来的L293D驱动芯片，通过输入不同的电平组，可以驱动电压输出到不同的口以及方向。最多可以同时驱动两个直流电机，这里我直接拿来驱动这一个步进电机了。\n\n{% asset_img drive_board.png %}\n\n## 主控板\n主控板就更简单了，直接花了几块钱在淘宝淘的一个最小C51单片机系统。\n\n{% asset_img main_board.png %}\n\n# 软件\n\n软件部分主要是使用了单片机的定时器来计时，然后到达指定时长后驱动电机正转反转，让饲料可以落下。\n\n## 流程图：\n\n{% asset_img flowchart.png %}\n\n## 代码\n\n[点击下载代码](https://github.com/SadCPPCoder/FishFeeder/blob/master/code/stepper.c)\n``` c\n/*****************************************************************\n* File Name: stepper.c\n* Description: This file is a stepper related function, includes\n*             time controller, stepper controller, task controller.\n* Date: 2018.11.14\n* Author: Bob, Zhang\n* E-mail: 156500117@qq.coom\n*****************************************************************/\n\n#include <reg52.h>\n\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned char bool;\n#define false ( 0 )\n#define true  ( !false )\n\n// stepper pins\nsbit steperA = P1^0;\nsbit steperB = P1^1;\nsbit steperA_ = P1^2;\nsbit steperB_ = P1^3;\n\n// count for 1 ms\n#define TIMER_VAL_FOR_1MS (0xFC18)\nint direction_change_flag = 0x00;\n\nvoid delay(int aUs)\n{\n    static int i;\n    static int us;\n\n    us = aUs;\n\n    while(us--)\n    {\n        i = 11;\n        while(--i);\n    }\n}\n\n// stepper left turn\nvoid MotorLeft()\n{\n    static int i = 3;\n   \n    switch( i-- )\n    {\n        case 0:\n\t\t    steperA = 1;\n\t\t    steperA_ = 0;\n\t\t    steperB = 0;\n\t\t    steperB_ = 0;\n\t\t    break;\n        case 1:\n\t\t    steperA = 0;\n\t\t    steperA_ = 0;\n\t\t    steperB = 1;\n\t\t    steperB_ = 0;\n\t\t    break;\n        case 2:\n\t\t\tsteperA = 0;\n\t\t\tsteperA_ = 1;\n    \t\tsteperB = 0;\n\t    \tsteperB_ = 0;\n\t\t    break;\n        case 3:\n\t\t    steperA = 0;\n\t\t    steperA_ = 0;\n\t\t    steperB = 0;\n\t\t    steperB_ = 1;\n\t    \tbreak;\n        default:\n\t\t    break;\n    }\n   \n    if( -1 >= i )\n        i = 3;\n }\n\n// stepper right turn\nvoid MotorRight()\n{\n    static int i = 0;\n   \n    switch( i++ )\n    {\n        case 0:\n\t\t    steperA = 1;\n\t\t    steperA_ = 0;\n\t\t    steperB = 0;\n\t\t    steperB_ = 0;\n\t\t    break;\n        case 1:\n\t\t    steperA = 0;\n\t\t    steperA_ = 0;\n\t\t    steperB = 1;\n\t\t    steperB_ = 0;\n\t\t    break;\n        case 2:\n\t\t\tsteperA = 0;\n\t\t\tsteperA_ = 1;\n    \t\tsteperB = 0;\n\t    \tsteperB_ = 0;\n\t\t    break;\n        case 3:\n\t\t    steperA = 0;\n\t\t    steperA_ = 0;\n\t\t    steperB = 0;\n\t\t    steperB_ = 1;\n\t    \tbreak;\n        default:\n\t\t    break;\n    }\n   \n    if( 4 <= i )\n        i = 0;\n}\n\n// init timer\nvoid InitTimer()\n{\n\tTMOD = 0x01;\n\tTH0 = TIMER_VAL_FOR_1MS >> 8;\t// 1 ms\n\tTL0 = TIMER_VAL_FOR_1MS & 0xFF;\n\tET0 = 0x01;\n\tEA = 0x01;\n\tTR0 = 0x01;\n}\n\n// state machine\ntypedef uint8_t task_state_t; enum\n{\n\tTASK_STATE_INIT_TIMER_STATE=0,\n\tTASK_STATE_FEED_FISH_MOTOR_LEFT_STATE,\n\tTASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE,\n\tTASK_STATE_WAIT_STATE,\n};\n\n#define FEED_FISH_TIME_PERIOD 3 //( 8*60*60 ) // 8h\nstatic const uint32_t feed_fish_period = FEED_FISH_TIME_PERIOD; // 8h\nstatic const uint32_t feed_first_period = FEED_FISH_TIME_PERIOD + 4; // 4s\nstatic const uint32_t feed_second_period = FEED_FISH_TIME_PERIOD + 4 + 4; // 4s\n\nstatic task_state_t next_state = TASK_STATE_INIT_TIMER_STATE;\n\nvoid TaskLoop()\n{\n\tswitch(next_state)\n\t{\n\t\tcase TASK_STATE_INIT_TIMER_STATE:\n\t\t\tInitTimer();\n\t\t\tnext_state = TASK_STATE_WAIT_STATE;\n\t\tbreak;\n\t\tcase TASK_STATE_FEED_FISH_MOTOR_LEFT_STATE:\n            MotorLeft();\n\t\tbreak;\n\t\tcase TASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE:\n            MotorRight();\n\t\tbreak;\n\t\tcase TASK_STATE_WAIT_STATE:\n\t\tbreak;\n\t}\n}\n\nvoid StateLoop()\n{\n\tstatic uint32_t fedd_fish_time_count = FEED_FISH_TIME_PERIOD;\n\n\tif( fedd_fish_time_count == feed_fish_period )\n\t{\n\t\tnext_state = TASK_STATE_FEED_FISH_MOTOR_LEFT_STATE;\n\t}\n\telse if( fedd_fish_time_count == feed_first_period )\n\t{\n\t\tnext_state = TASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE;\n\t}\n\telse if( fedd_fish_time_count == feed_second_period )\n\t{\n\t\tnext_state = TASK_STATE_WAIT_STATE;\n\t\tfedd_fish_time_count = 0;\n\t}\n\n\t++fedd_fish_time_count;\n}\n\n// timer interrupt function\n#define STATE_CHECK_TIME ( 1000 )\nvoid TimerIrq( void ) interrupt 1 using 1\n{\n\tstatic long time_count = 0;\n\n\t++time_count;\n\n\t// every second run once state check\n\tif( STATE_CHECK_TIME == time_count )\n\t{\n\t\tStateLoop();\n\t\ttime_count = 0;\n\t}\n\n\tTH0 = TIMER_VAL_FOR_1MS >> 8;\t// 1 ms\n\tTL0 = TIMER_VAL_FOR_1MS & 0xFF;\n\t\n}\n\nvoid main()\n{\t\n    do\n    {\n\t\tTaskLoop();\n        delay(100);\n    } while( 1 );\n}\n```","slug":"自动喂鱼机","published":1,"updated":"2019-03-25T15:34:16.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt30i000qzs1kqp6uo86q","content":"<h1 id=\"自动喂鱼机\"><a href=\"#自动喂鱼机\" class=\"headerlink\" title=\"自动喂鱼机\"></a>自动喂鱼机</h1><p>自从上次成功驱动了报废光驱上拆下来的步进电机后，就一直想做一个能够自动定时喂鱼的装置，解决我周末或者长假回老家后鱼缸没人照料的窘境。一旦连续两天不喂食，那么必有最弱小的一条鱼会被啃得面目全非，所以我急需这样一个装置。<br>所有有志者事竟成，一切伟大的思想和行动都有一个微不足道的开始，最终还是让我把这样一个“产品”给做出来了，先不多说了，上一张图来看看。</p>\n<img src=\"/2019/03/05/自动喂鱼机/feeder.gif\">\n<p>下面详细讲解下实现的过程吧。<br><a id=\"more\"></a></p>\n<h1 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h1><p>通过上面的动图，能够看出这个装置其实主要分为四个部分：</p>\n<img src=\"/2019/03/05/自动喂鱼机/feeder.png\">\n<ol>\n<li>饲料仓库</li>\n<li>电机模块</li>\n<li>电机驱动</li>\n<li>主控板</li>\n</ol>\n<p>由主控板上的软件做好时间控制，在到达喂食时间点后，通过高低电平控制电机驱动板控制电机正转一定时长，使得饲料投放装置落下，饲料从出口落出，再控制电机反转，拉起饲料投放装置。</p>\n<h2 id=\"饲料存储\"><a href=\"#饲料存储\" class=\"headerlink\" title=\"饲料存储\"></a>饲料存储</h2><p>这个其实没有什么好说的，和整个装置的支撑架一样，都是手工制作的。</p>\n<img src=\"/2019/03/05/自动喂鱼机/feed_storage.png\">\n<h2 id=\"电机\"><a href=\"#电机\" class=\"headerlink\" title=\"电机\"></a>电机</h2><p>电机是从报废了的光驱上拆下来的两相双极性步进电机，可以参考之前的文章 <a href=\"/2018/04/06/两相双极性步进电机驱动/\" title=\"两相双极性步进电机驱动\">两相双极性步进电机驱动</a>。</p>\n<img src=\"/2019/03/05/自动喂鱼机/motor.png\">\n<h2 id=\"电机驱动板\"><a href=\"#电机驱动板\" class=\"headerlink\" title=\"电机驱动板\"></a>电机驱动板</h2><p>电机驱动板，是很久很久以前，大概12年的时候，做智能巡线小车的时候留下来的L293D驱动芯片，通过输入不同的电平组，可以驱动电压输出到不同的口以及方向。最多可以同时驱动两个直流电机，这里我直接拿来驱动这一个步进电机了。</p>\n<img src=\"/2019/03/05/自动喂鱼机/drive_board.png\">\n<h2 id=\"主控板\"><a href=\"#主控板\" class=\"headerlink\" title=\"主控板\"></a>主控板</h2><p>主控板就更简单了，直接花了几块钱在淘宝淘的一个最小C51单片机系统。</p>\n<img src=\"/2019/03/05/自动喂鱼机/main_board.png\">\n<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><p>软件部分主要是使用了单片机的定时器来计时，然后到达指定时长后驱动电机正转反转，让饲料可以落下。</p>\n<h2 id=\"流程图：\"><a href=\"#流程图：\" class=\"headerlink\" title=\"流程图：\"></a>流程图：</h2><img src=\"/2019/03/05/自动喂鱼机/flowchart.png\">\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/SadCPPCoder/FishFeeder/blob/master/code/stepper.c\" target=\"_blank\" rel=\"noopener\">点击下载代码</a><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*****************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">* File Name: stepper.c</span></span><br><span class=\"line\"><span class=\"comment\">* Description: This file is a stepper related function, includes</span></span><br><span class=\"line\"><span class=\"comment\">*             time controller, stepper controller, task controller.</span></span><br><span class=\"line\"><span class=\"comment\">* Date: 2018.11.14</span></span><br><span class=\"line\"><span class=\"comment\">* Author: Bob, Zhang</span></span><br><span class=\"line\"><span class=\"comment\">* E-mail: 156500117@qq.coom</span></span><br><span class=\"line\"><span class=\"comment\">*****************************************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;reg52.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"keyword\">uint8_t</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> <span class=\"keyword\">uint16_t</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"keyword\">uint32_t</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"keyword\">bool</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> false ( 0 )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> true  ( !false )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stepper pins</span></span><br><span class=\"line\">sbit steperA = P1^<span class=\"number\">0</span>;</span><br><span class=\"line\">sbit steperB = P1^<span class=\"number\">1</span>;</span><br><span class=\"line\">sbit steperA_ = P1^<span class=\"number\">2</span>;</span><br><span class=\"line\">sbit steperB_ = P1^<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// count for 1 ms</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TIMER_VAL_FOR_1MS (0xFC18)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> direction_change_flag = <span class=\"number\">0x00</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delay</span><span class=\"params\">(<span class=\"keyword\">int</span> aUs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> us;</span><br><span class=\"line\"></span><br><span class=\"line\">    us = aUs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(us--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i = <span class=\"number\">11</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(--i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stepper left turn</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MotorLeft</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">switch</span>( i-- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tsteperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tsteperA_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t\tsteperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t    \tsteperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"number\">-1</span> &gt;= i )</span><br><span class=\"line\">        i = <span class=\"number\">3</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stepper right turn</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MotorRight</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">switch</span>( i++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tsteperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tsteperA_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t\tsteperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t    \tsteperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"number\">4</span> &lt;= i )</span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// init timer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InitTimer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tTMOD = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">\tTH0 = TIMER_VAL_FOR_1MS &gt;&gt; <span class=\"number\">8</span>;\t<span class=\"comment\">// 1 ms</span></span><br><span class=\"line\">\tTL0 = TIMER_VAL_FOR_1MS &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">\tET0 = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">\tEA = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">\tTR0 = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// state machine</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint8_t</span> <span class=\"keyword\">task_state_t</span>; <span class=\"keyword\">enum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTASK_STATE_INIT_TIMER_STATE=<span class=\"number\">0</span>,</span><br><span class=\"line\">\tTASK_STATE_FEED_FISH_MOTOR_LEFT_STATE,</span><br><span class=\"line\">\tTASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE,</span><br><span class=\"line\">\tTASK_STATE_WAIT_STATE,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FEED_FISH_TIME_PERIOD 3 <span class=\"comment\">//( 8*60*60 ) // 8h</span></span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> feed_fish_period = FEED_FISH_TIME_PERIOD; <span class=\"comment\">// 8h</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> feed_first_period = FEED_FISH_TIME_PERIOD + <span class=\"number\">4</span>; <span class=\"comment\">// 4s</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> feed_second_period = FEED_FISH_TIME_PERIOD + <span class=\"number\">4</span> + <span class=\"number\">4</span>; <span class=\"comment\">// 4s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">task_state_t</span> next_state = TASK_STATE_INIT_TIMER_STATE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TaskLoop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(next_state)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TASK_STATE_INIT_TIMER_STATE:</span><br><span class=\"line\">\t\t\tInitTimer();</span><br><span class=\"line\">\t\t\tnext_state = TASK_STATE_WAIT_STATE;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TASK_STATE_FEED_FISH_MOTOR_LEFT_STATE:</span><br><span class=\"line\">            MotorLeft();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE:</span><br><span class=\"line\">            MotorRight();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TASK_STATE_WAIT_STATE:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StateLoop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> fedd_fish_time_count = FEED_FISH_TIME_PERIOD;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( fedd_fish_time_count == feed_fish_period )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnext_state = TASK_STATE_FEED_FISH_MOTOR_LEFT_STATE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( fedd_fish_time_count == feed_first_period )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnext_state = TASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( fedd_fish_time_count == feed_second_period )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnext_state = TASK_STATE_WAIT_STATE;</span><br><span class=\"line\">\t\tfedd_fish_time_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t++fedd_fish_time_count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// timer interrupt function</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STATE_CHECK_TIME ( 1000 )</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TimerIrq</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> interrupt 1 <span class=\"keyword\">using</span> 1</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span> time_count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t++time_count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// every second run once state check</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( STATE_CHECK_TIME == time_count )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tStateLoop();</span><br><span class=\"line\">\t\ttime_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTH0 = TIMER_VAL_FOR_1MS &gt;&gt; <span class=\"number\">8</span>;\t<span class=\"comment\">// 1 ms</span></span><br><span class=\"line\">\tTL0 = TIMER_VAL_FOR_1MS &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tTaskLoop();</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>( <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"自动喂鱼机\"><a href=\"#自动喂鱼机\" class=\"headerlink\" title=\"自动喂鱼机\"></a>自动喂鱼机</h1><p>自从上次成功驱动了报废光驱上拆下来的步进电机后，就一直想做一个能够自动定时喂鱼的装置，解决我周末或者长假回老家后鱼缸没人照料的窘境。一旦连续两天不喂食，那么必有最弱小的一条鱼会被啃得面目全非，所以我急需这样一个装置。<br>所有有志者事竟成，一切伟大的思想和行动都有一个微不足道的开始，最终还是让我把这样一个“产品”给做出来了，先不多说了，上一张图来看看。</p>\n<img src=\"/2019/03/05/自动喂鱼机/feeder.gif\">\n<p>下面详细讲解下实现的过程吧。<br>","more":"</p>\n<h1 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h1><p>通过上面的动图，能够看出这个装置其实主要分为四个部分：</p>\n<img src=\"/2019/03/05/自动喂鱼机/feeder.png\">\n<ol>\n<li>饲料仓库</li>\n<li>电机模块</li>\n<li>电机驱动</li>\n<li>主控板</li>\n</ol>\n<p>由主控板上的软件做好时间控制，在到达喂食时间点后，通过高低电平控制电机驱动板控制电机正转一定时长，使得饲料投放装置落下，饲料从出口落出，再控制电机反转，拉起饲料投放装置。</p>\n<h2 id=\"饲料存储\"><a href=\"#饲料存储\" class=\"headerlink\" title=\"饲料存储\"></a>饲料存储</h2><p>这个其实没有什么好说的，和整个装置的支撑架一样，都是手工制作的。</p>\n<img src=\"/2019/03/05/自动喂鱼机/feed_storage.png\">\n<h2 id=\"电机\"><a href=\"#电机\" class=\"headerlink\" title=\"电机\"></a>电机</h2><p>电机是从报废了的光驱上拆下来的两相双极性步进电机，可以参考之前的文章 <a href=\"/2018/04/06/两相双极性步进电机驱动/\" title=\"两相双极性步进电机驱动\">两相双极性步进电机驱动</a>。</p>\n<img src=\"/2019/03/05/自动喂鱼机/motor.png\">\n<h2 id=\"电机驱动板\"><a href=\"#电机驱动板\" class=\"headerlink\" title=\"电机驱动板\"></a>电机驱动板</h2><p>电机驱动板，是很久很久以前，大概12年的时候，做智能巡线小车的时候留下来的L293D驱动芯片，通过输入不同的电平组，可以驱动电压输出到不同的口以及方向。最多可以同时驱动两个直流电机，这里我直接拿来驱动这一个步进电机了。</p>\n<img src=\"/2019/03/05/自动喂鱼机/drive_board.png\">\n<h2 id=\"主控板\"><a href=\"#主控板\" class=\"headerlink\" title=\"主控板\"></a>主控板</h2><p>主控板就更简单了，直接花了几块钱在淘宝淘的一个最小C51单片机系统。</p>\n<img src=\"/2019/03/05/自动喂鱼机/main_board.png\">\n<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><p>软件部分主要是使用了单片机的定时器来计时，然后到达指定时长后驱动电机正转反转，让饲料可以落下。</p>\n<h2 id=\"流程图：\"><a href=\"#流程图：\" class=\"headerlink\" title=\"流程图：\"></a>流程图：</h2><img src=\"/2019/03/05/自动喂鱼机/flowchart.png\">\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p><a href=\"https://github.com/SadCPPCoder/FishFeeder/blob/master/code/stepper.c\" target=\"_blank\" rel=\"noopener\">点击下载代码</a><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*****************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">* File Name: stepper.c</span></span><br><span class=\"line\"><span class=\"comment\">* Description: This file is a stepper related function, includes</span></span><br><span class=\"line\"><span class=\"comment\">*             time controller, stepper controller, task controller.</span></span><br><span class=\"line\"><span class=\"comment\">* Date: 2018.11.14</span></span><br><span class=\"line\"><span class=\"comment\">* Author: Bob, Zhang</span></span><br><span class=\"line\"><span class=\"comment\">* E-mail: 156500117@qq.coom</span></span><br><span class=\"line\"><span class=\"comment\">*****************************************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;reg52.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"keyword\">uint8_t</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> <span class=\"keyword\">uint16_t</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"keyword\">uint32_t</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> <span class=\"keyword\">bool</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> false ( 0 )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> true  ( !false )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stepper pins</span></span><br><span class=\"line\">sbit steperA = P1^<span class=\"number\">0</span>;</span><br><span class=\"line\">sbit steperB = P1^<span class=\"number\">1</span>;</span><br><span class=\"line\">sbit steperA_ = P1^<span class=\"number\">2</span>;</span><br><span class=\"line\">sbit steperB_ = P1^<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// count for 1 ms</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TIMER_VAL_FOR_1MS (0xFC18)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> direction_change_flag = <span class=\"number\">0x00</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delay</span><span class=\"params\">(<span class=\"keyword\">int</span> aUs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> us;</span><br><span class=\"line\"></span><br><span class=\"line\">    us = aUs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(us--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i = <span class=\"number\">11</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(--i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stepper left turn</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MotorLeft</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">switch</span>( i-- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tsteperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tsteperA_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t\tsteperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t    \tsteperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"number\">-1</span> &gt;= i )</span><br><span class=\"line\">        i = <span class=\"number\">3</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stepper right turn</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MotorRight</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">switch</span>( i++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tsteperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tsteperA_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t\tsteperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t    \tsteperB_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t    steperA = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperA_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t    steperB_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t    \t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"number\">4</span> &lt;= i )</span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// init timer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InitTimer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tTMOD = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">\tTH0 = TIMER_VAL_FOR_1MS &gt;&gt; <span class=\"number\">8</span>;\t<span class=\"comment\">// 1 ms</span></span><br><span class=\"line\">\tTL0 = TIMER_VAL_FOR_1MS &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">\tET0 = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">\tEA = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">\tTR0 = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// state machine</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint8_t</span> <span class=\"keyword\">task_state_t</span>; <span class=\"keyword\">enum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTASK_STATE_INIT_TIMER_STATE=<span class=\"number\">0</span>,</span><br><span class=\"line\">\tTASK_STATE_FEED_FISH_MOTOR_LEFT_STATE,</span><br><span class=\"line\">\tTASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE,</span><br><span class=\"line\">\tTASK_STATE_WAIT_STATE,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FEED_FISH_TIME_PERIOD 3 <span class=\"comment\">//( 8*60*60 ) // 8h</span></span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> feed_fish_period = FEED_FISH_TIME_PERIOD; <span class=\"comment\">// 8h</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> feed_first_period = FEED_FISH_TIME_PERIOD + <span class=\"number\">4</span>; <span class=\"comment\">// 4s</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">uint32_t</span> feed_second_period = FEED_FISH_TIME_PERIOD + <span class=\"number\">4</span> + <span class=\"number\">4</span>; <span class=\"comment\">// 4s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">task_state_t</span> next_state = TASK_STATE_INIT_TIMER_STATE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TaskLoop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(next_state)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TASK_STATE_INIT_TIMER_STATE:</span><br><span class=\"line\">\t\t\tInitTimer();</span><br><span class=\"line\">\t\t\tnext_state = TASK_STATE_WAIT_STATE;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TASK_STATE_FEED_FISH_MOTOR_LEFT_STATE:</span><br><span class=\"line\">            MotorLeft();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE:</span><br><span class=\"line\">            MotorRight();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TASK_STATE_WAIT_STATE:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StateLoop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> fedd_fish_time_count = FEED_FISH_TIME_PERIOD;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( fedd_fish_time_count == feed_fish_period )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnext_state = TASK_STATE_FEED_FISH_MOTOR_LEFT_STATE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( fedd_fish_time_count == feed_first_period )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnext_state = TASK_STATE_FEED_FISH_MOTOR_RIGHT_STATE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( fedd_fish_time_count == feed_second_period )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnext_state = TASK_STATE_WAIT_STATE;</span><br><span class=\"line\">\t\tfedd_fish_time_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t++fedd_fish_time_count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// timer interrupt function</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STATE_CHECK_TIME ( 1000 )</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TimerIrq</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span> interrupt 1 <span class=\"keyword\">using</span> 1</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">long</span> time_count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t++time_count;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// every second run once state check</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( STATE_CHECK_TIME == time_count )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tStateLoop();</span><br><span class=\"line\">\t\ttime_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tTH0 = TIMER_VAL_FOR_1MS &gt;&gt; <span class=\"number\">8</span>;\t<span class=\"comment\">// 1 ms</span></span><br><span class=\"line\">\tTL0 = TIMER_VAL_FOR_1MS &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tTaskLoop();</span><br><span class=\"line\">        delay(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>( <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"读取文件时，使用file.eof()判断结尾注意事项","date":"2017-06-21T01:24:50.000Z","_content":"# 读取文件时，使用file.eof()判断结尾注意事项\n\n今天写一个小功能需要读取文件，在判断文件结尾时使用了以下语句：\n``` cpp\nwhile(infile.eof() && infile.good())\n{\n    infile.read((char*)&data, 1);\n    encodeData = data ^ CODE;\n    outfile.write((char*)&encodeData, 1);\n}\n```\n**结果最后一个字符会读取两次，后来换了种方式，事先读取文件长度，再循环，就能争取读取文件**：\n``` cpp\nfor(int i=3; i<file_len; ++i)\n{\n    infile.read((char*)&data, 1);\n    encodeData = data ^ CODE;\n    outfile.write((char*)&encodeData, 1);\n}\n```\n<font color=#ff0000>最后了解到，是因为read函数需要读取失败时才将eofbit置位，所以置位时，循环还会执行一次。修改代码就没有问题了：</font>\n``` cpp\nwhile(infile.read((char*)&data, 1) && !infile.eof() && infile.good())\n{\n    encodeData = data ^ CODE;\n    outfile.write((char*)&encodeData, 1);\n}\n```","source":"_posts/读取文件时，使用file-eof-判断结尾注意事项.md","raw":"---\ntitle: 读取文件时，使用file.eof()判断结尾注意事项\ndate: 2017-06-21 09:24:50\ntags:\n\t- C++\n\t- IO\ncategories:\n\t- 技术\n\t- C++\n---\n# 读取文件时，使用file.eof()判断结尾注意事项\n\n今天写一个小功能需要读取文件，在判断文件结尾时使用了以下语句：\n``` cpp\nwhile(infile.eof() && infile.good())\n{\n    infile.read((char*)&data, 1);\n    encodeData = data ^ CODE;\n    outfile.write((char*)&encodeData, 1);\n}\n```\n**结果最后一个字符会读取两次，后来换了种方式，事先读取文件长度，再循环，就能争取读取文件**：\n``` cpp\nfor(int i=3; i<file_len; ++i)\n{\n    infile.read((char*)&data, 1);\n    encodeData = data ^ CODE;\n    outfile.write((char*)&encodeData, 1);\n}\n```\n<font color=#ff0000>最后了解到，是因为read函数需要读取失败时才将eofbit置位，所以置位时，循环还会执行一次。修改代码就没有问题了：</font>\n``` cpp\nwhile(infile.read((char*)&data, 1) && !infile.eof() && infile.good())\n{\n    encodeData = data ^ CODE;\n    outfile.write((char*)&encodeData, 1);\n}\n```","slug":"读取文件时，使用file-eof-判断结尾注意事项","published":1,"updated":"2019-03-19T15:21:54.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt30o000uzs1k2qbcuvai","content":"<h1 id=\"读取文件时，使用file-eof-判断结尾注意事项\"><a href=\"#读取文件时，使用file-eof-判断结尾注意事项\" class=\"headerlink\" title=\"读取文件时，使用file.eof()判断结尾注意事项\"></a>读取文件时，使用file.eof()判断结尾注意事项</h1><p>今天写一个小功能需要读取文件，在判断文件结尾时使用了以下语句：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(infile.eof() &amp;&amp; infile.good())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    infile.read((<span class=\"keyword\">char</span>*)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\">    encodeData = data ^ CODE;</span><br><span class=\"line\">    outfile.write((<span class=\"keyword\">char</span>*)&amp;encodeData, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>结果最后一个字符会读取两次，后来换了种方式，事先读取文件长度，再循环，就能争取读取文件</strong>：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>; i&lt;file_len; ++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    infile.read((<span class=\"keyword\">char</span>*)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\">    encodeData = data ^ CODE;</span><br><span class=\"line\">    outfile.write((<span class=\"keyword\">char</span>*)&amp;encodeData, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><font color=\"#ff0000\">最后了解到，是因为read函数需要读取失败时才将eofbit置位，所以置位时，循环还会执行一次。修改代码就没有问题了：</font><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(infile.read((<span class=\"keyword\">char</span>*)&amp;data, <span class=\"number\">1</span>) &amp;&amp; !infile.eof() &amp;&amp; infile.good())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    encodeData = data ^ CODE;</span><br><span class=\"line\">    outfile.write((<span class=\"keyword\">char</span>*)&amp;encodeData, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"读取文件时，使用file-eof-判断结尾注意事项\"><a href=\"#读取文件时，使用file-eof-判断结尾注意事项\" class=\"headerlink\" title=\"读取文件时，使用file.eof()判断结尾注意事项\"></a>读取文件时，使用file.eof()判断结尾注意事项</h1><p>今天写一个小功能需要读取文件，在判断文件结尾时使用了以下语句：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(infile.eof() &amp;&amp; infile.good())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    infile.read((<span class=\"keyword\">char</span>*)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\">    encodeData = data ^ CODE;</span><br><span class=\"line\">    outfile.write((<span class=\"keyword\">char</span>*)&amp;encodeData, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>结果最后一个字符会读取两次，后来换了种方式，事先读取文件长度，再循环，就能争取读取文件</strong>：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>; i&lt;file_len; ++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    infile.read((<span class=\"keyword\">char</span>*)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\">    encodeData = data ^ CODE;</span><br><span class=\"line\">    outfile.write((<span class=\"keyword\">char</span>*)&amp;encodeData, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><font color=\"#ff0000\">最后了解到，是因为read函数需要读取失败时才将eofbit置位，所以置位时，循环还会执行一次。修改代码就没有问题了：</font><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(infile.read((<span class=\"keyword\">char</span>*)&amp;data, <span class=\"number\">1</span>) &amp;&amp; !infile.eof() &amp;&amp; infile.good())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    encodeData = data ^ CODE;</span><br><span class=\"line\">    outfile.write((<span class=\"keyword\">char</span>*)&amp;encodeData, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Hide Data into bitmap with ARGB8888 format","date":"2017-12-21T07:38:25.000Z","_content":"# Hide Data into bitmap with ARGB8888 format\n\n最近工作上接触Bitmap比较多，再加上之前就看到说如何利用图片的透明标志位来存放私密信息。\n所以今天就动手写了这么个小工具，可以将一定长度的文本文件的内容隐藏到图片中保存起来，需要使用时再从图片中解码提取出来。\n\nbitmap.h: 声明Bitmap的文件头结构，Bitmap类和数据隐藏类。\n``` cpp\n#ifndef BMP_H\n#define BMP_H\n \n#include <fstream>\n#include <string>\n#include <iostream>\n \n#define DEBUG 0\n \n#define LOG std::cout\n#define HEX std::hex\n#define DEC std::dec\n \n#define FLAG_0 (0xFF)\n#define FLAG_1 (0xEE)\n#define FLAG_2 (0xDD)\n#define FLAG_3 (0xCC)\n \n#define DATA_CODE (0xCC)\n \n#define BYTE_PER_PIXEL (4)\n \n#pragma pack(push, 1)\ntypedef struct\n{\n    uint16_t bfType; // Type of bitmap, in windows, always 'BM'\n    uint32_t bfSize; // Size of the bitmap file\n    uint16_t bfReserved1; // reserved feild\n    uint16_t bfReserved2; // reserved feild\n    uint32_t bfOffBits; // the start address of the bitmap data\n}BMP_FILE_HEADER;\n \ntypedef struct\n{\n    uint32_t biSize; // size of this struct\n    uint32_t biWidth; // image width, unit is pixel\n    uint32_t biHeight; // image height, unit is pixel\n    uint16_t biPlanes; // alsways 1\n    uint16_t biBitCount; // color depth of the image, 1, 4, 8, 16, 24 and 32\n    uint32_t biCompression; // compression type, 0=no compress, 1=RLE8 compress\n                            // 2=RLE4 compress, 3=pixel color mask\n    uint32_t biSizeImage; // pixel data size of the image\n    uint32_t biXPelsPerMeter; // H resolution, pixel per meter\n    uint32_t biYPelsPerMeter; // V resolution, pixel per meter\n    uint32_t biClrUsed; // color number that used, 0=all color\n    uint32_t biClrImportant; // important color amount, 0=all color important\n}BMP_INFO_HEADER;\n#pragma pacn(pop)\n \nclass Bitmap\n{\nprivate:\n    BMP_FILE_HEADER m_fileHeader;\n    BMP_INFO_HEADER m_infoHeader;\n \n    std::string m_bmpPath;\n    bool m_parseFlag;\npublic:\n    Bitmap(std::string path);\n    ~Bitmap();\n    bool bmpParse();\n    uint32_t getBmpSize();\n    uint32_t getBmpDataAddr();\n    std::string getBmpPath();\n    uint32_t getBmpPixelNum();\n};\n \nclass DataHider\n{\nprivate:\n    uint8_t m_flags[4];\n    uint8_t m_length[4];\n    Bitmap m_bitmapHeader;\n    std::string m_dataFilePath;\n \n    bool isAHider();\n    uint32_t getFileSize(std::ifstream &in);\n    bool readTransByte(std::fstream &file, uint8_t &val, int pos);\n    bool writeTransByte(std::fstream &file, uint8_t val, int pos);\n    void length2Byte(uint32_t length);\n    uint32_t byte2Length();\npublic:\n    DataHider(std::string dataPath, std::string bmpPath);\n    ~DataHider();\n    bool doEncode();\n    bool doDecode();\n};\n \n#endif // BMP_H\n```\n<!--more-->\nbitmap.cpp: 实现上述声明。\n``` cpp\n#include \"bitmap.h\"\n \nBitmap::Bitmap(std::string path)\n: m_fileHeader(), m_infoHeader(), m_bmpPath(path), m_parseFlag(false)\n{\n}\n \nBitmap::~Bitmap()\n{\n}\n \nbool Bitmap::bmpParse()\n{\n    std::ifstream in;\n    in.open(m_bmpPath, std::ios::binary);\n \n    in.read((char *)&m_fileHeader, sizeof(m_fileHeader));\n    /*char * p = (char *)&m_fileHeader;\n    for(uint32_t i=0; i<sizeof(m_fileHeader); ++i)\n    {\n        in.read(p, 1);\n        LOG << HEX << (int)*p << \" \";\n        ++p;\n    }*/\n    if( !in.good() )\n    {\n        LOG << \"read bitmap file head error!\\n\";\n        in.close();\n        return false;\n    }\n \n    in.read((char *)&m_infoHeader, sizeof(m_infoHeader));\n    /*    LOG << \"read bitmap information header!\\n\";\n    p = (char *)&m_infoHeader;\n    for(uint32_t i=0; i<sizeof(m_infoHeader); ++i)\n    {\n        in.read(p, 1);\n        LOG << HEX << (int)*p << \" \";\n        ++p;\n    }*/\n    if( !in.good() )\n    {\n        LOG << \"read bitmap information header error!\\n\";\n        in.close();\n        return false;\n    }\n \n    in.close();\n    m_parseFlag = true;\n \n    #if 1 == DEBUG\n        LOG << \"Bitmap file header:\"\n            << \"\\nbfType: \" << HEX << (int)m_fileHeader.bfType\n            << \"\\nbfSize: \" << (int)m_fileHeader.bfSize\n            << \"\\nbfReserved1: \" << (int)m_fileHeader.bfReserved1\n            << \"\\nbfReserved2: \" << (int)m_fileHeader.bfReserved2\n            << \"\\nbfOffBits: \" << (int)m_fileHeader.bfOffBits\n            << \"\\nBitmap information header:\"\n            << \"\\nbiSize: \" << (int)m_infoHeader.biSize << DEC << \"\\n\";\n    #endif\n \n    return true;\n}\n \nuint32_t Bitmap::getBmpSize()\n{\n    if(!m_parseFlag)\n    {\n        LOG << \"please do bitmap parse first!\\n\";\n    }\n    return m_fileHeader.bfSize;\n}\n \nstd::string Bitmap::getBmpPath()\n{\n    return m_bmpPath;\n}\n \nuint32_t Bitmap::getBmpDataAddr()\n{\n    if(!m_parseFlag)\n    {\n        LOG << \"please do bitmap parse first!\\n\";\n    }\n    return m_fileHeader.bfOffBits;\n}\n \nuint32_t Bitmap::getBmpPixelNum()\n{\n    return m_infoHeader.biWidth * m_infoHeader.biHeight;\n}\n \nDataHider::DataHider(std::string dataPath, std::string bmpPath)\n: m_bitmapHeader(bmpPath), m_dataFilePath(dataPath)\n{\n}\n \nDataHider::~DataHider()\n{\n}\n \nbool DataHider::isAHider()\n{\n    return (m_flags[0] == FLAG_0) &\n            (m_flags[1] == FLAG_1) &\n            (m_flags[2] == FLAG_2) &\n            (m_flags[3] == FLAG_3);\n}\n \nuint32_t DataHider::getFileSize(std::ifstream &in)\n{\n    if(!in.good())\n    {\n        LOG << \"the data file has some error.\\n\";\n        return false;\n    }\n \n    uint32_t pos =  in.tellg();\n    in.seekg(0, std::ios_base::end);\n    uint32_t size = in.tellg();\n    in.seekg(pos, std::ios_base::beg);\n \n    return size;\n}\n \nbool DataHider::readTransByte(std::fstream &file, uint8_t &val, int pos)\n{\n    file.seekg(m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos, std::ios_base::beg);\n    #if DEBUG == 1\n        LOG << \"pos \" << HEX << m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos << \"\\n\";\n    #endif\n    file.read((char *)&val, 1);\n    return file.good();\n}\n \nbool DataHider::writeTransByte(std::fstream &file, uint8_t val, int pos)\n{\n    file.seekp(m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos, std::ios_base::beg);\n    file.write((char *)&val, 1);\n    return file.good();   \n}\n \nvoid DataHider::length2Byte(uint32_t length)\n{\n    for(uint32_t i=0; i<4; ++i)\n        m_length[i] = (uint8_t)(length >> (i*8)) & 0xFF;\n    #if DEBUG == 1\n        LOG << \"length: \" << length << \"\\n\"\n            << (int)m_length[0] << \" \"\n            << (int)m_length[1] << \" \"\n            << (int)m_length[2] << \" \"\n            << (int)m_length[3] << \"\\n\";\n    #endif\n}\n \nuint32_t DataHider::byte2Length()\n{\n    uint32_t length = 0;\n    uint32_t temp;\n    for(uint32_t i=0; i<4; ++i)\n    {\n        temp = m_length[i];\n    #if DEBUG == 1\n        LOG << \"temp: \" << temp << \"\\n\";\n    #endif\n        temp <<= (i*8);\n    #if DEBUG == 1\n        LOG << \"temp: \" << temp << \"\\n\";\n    #endif\n        length += temp;\n    }\n \n    #if DEBUG == 1\n        LOG << \"length: \" << length << \"\\n\";\n    #endif\n \n    return length;\n}\n \nbool DataHider::doEncode()\n{\n    m_bitmapHeader.bmpParse();\n     \n    std::ifstream dataFile;\n    dataFile.open(m_dataFilePath, std::ios::binary);\n    if(!dataFile.good())\n    {\n        LOG << \"open \" << m_dataFilePath << \" failed!\\n\";\n        return false;\n    }\n    uint32_t dataSize = getFileSize(dataFile);\n    if(dataSize > m_bitmapHeader.getBmpPixelNum() + 8) // flag size add length size\n    {\n        LOG << \"data is too big to save into the bitmap!\\n\";\n        dataFile.close();\n        return false;\n    }\n \n    std::fstream bmpFile;\n    bmpFile.open(m_bitmapHeader.getBmpPath(), std::ios_base::binary|\n                    std::ios_base::out|std::ios_base::in);\n                    // |std::ios_base::ate|std::ios_base::app\n    if(!bmpFile.good())\n    {\n        LOG << \"open \" << m_bitmapHeader.getBmpPath() << \" failed!\\n\";\n        dataFile.close();\n        return false;\n    }\n    dataFile.seekg(0, std::ios_base::beg);\n \n    // flags\n    m_flags[0] = FLAG_0;\n    m_flags[1] = FLAG_1;\n    m_flags[2] = FLAG_2;\n    m_flags[3] = FLAG_3;\n \n    for(uint32_t i=0; i<4; ++i)\n        writeTransByte(bmpFile, m_flags[i], i);\n \n    // length\n    length2Byte(dataSize);\n \n    for(uint32_t i=0; i<4; ++i)\n        writeTransByte(bmpFile, m_length[i], i+4);\n \n    // pos start at the 8th pixel\n    int pos = 0;\n    uint8_t data;\n    while(pos < dataSize)\n    {\n        dataFile.read((char *)&data, 1);\n        #if DEBUG == 1\n            LOG << HEX << (int)data << \" \";\n        #endif\n        data ^= DATA_CODE;\n        writeTransByte(bmpFile, data, pos+8);\n        ++pos;\n    }\n \n    bmpFile.close();\n    dataFile.close();\n    return true;\n}\n \nbool DataHider::doDecode()\n{\n    m_bitmapHeader.bmpParse();\n     \n    std::fstream bmpFile;\n    bmpFile.open(m_bitmapHeader.getBmpPath(), std::ios_base::binary|std::ios_base::in);\n    if(!bmpFile.good())\n    {\n        LOG << \"open \" << m_bitmapHeader.getBmpPath() << \" failed!\\n\";\n        return false;\n    }\n    bmpFile.seekg(0, std::ios_base::beg);\n \n \n    // flags\n    for(uint32_t i=0; i<4; ++i)\n    {\n        readTransByte(bmpFile, m_flags[i], i);\n        #if DEBUG\n            LOG << HEX << (int)m_flags[i] << \" \";\n        #endif\n    }\n \n    if( !isAHider() )\n    {\n        LOG << \"this bitmap is not a hider file!\\n\";\n        bmpFile.close();\n        return false;\n    }\n \n    // length\n    for(uint32_t i=0; i<4; ++i)\n        readTransByte(bmpFile, m_length[i], i+4);\n \n    #if DEBUG == 1\n        LOG << (int)m_length[0] << \" \"\n            << (int)m_length[1] << \" \"\n            << (int)m_length[2] << \" \"\n            << (int)m_length[3] << \"\\n\";\n    #endif\n \n    uint32_t dataSize = byte2Length();\n \n    std::ofstream dataFile;\n    dataFile.open(m_dataFilePath, std::ios::binary);\n    if(!dataFile.good())\n    {\n        LOG << \"open \" << m_dataFilePath << \" failed!\\n\";\n        bmpFile.close();\n        return false;\n    }\n    // pos start at the 8th pixel\n    int pos = 0;\n    uint8_t data;\n    while(pos < dataSize)\n    {\n        readTransByte(bmpFile, data, pos+8);\n        data ^= DATA_CODE;\n        dataFile.write((char *)&data, 1);\n        ++pos;\n         \n    }\n \n    bmpFile.close();\n    dataFile.close();\n    return true;\n}\n```\n\nmain.cpp: 主函数\n``` cpp\n#include <iostream>\n#include \"bitmap.h\"\nusing namespace std;\n \nint main(int argc, char **argv)\n{\n    cout << \"Hello world!\" << endl;\n \n    if(argc < 4)\n    {\n        cout << \"please type the right command!\\n\"\n             << \"DataHider encode ./data.txt ./ARGB8888.bmp\\n\"\n             << \"or DataHider decode ./data_out.txt ./ARGB8888.bmp\\n\";\n        return -1;\n    }\n \n    string mode =  argv[1];\n    string dataFile = argv[2];\n    string bmpFile = argv[3];\n \n    if(mode == \"encode\")\n    {\n        cout << \"encoder\\n\";\n        DataHider encoder(dataFile, bmpFile);\n        encoder.doEncode();\n    }\n    else if(mode == \"decode\")\n    {\n        cout << \"decoder\\n\";\n        DataHider decoder(dataFile, bmpFile);\n        decoder.doDecode();\n    }\n \n    return 0;\n}\n```","source":"_posts/Hide-Data-into-bitmap-with-ARGB8888-format.md","raw":"---\ntitle: Hide Data into bitmap with ARGB8888 format\ndate: 2017-12-21 15:38:25\ntags:\n\t- C++\ncategories:\n\t- 技术\n\t- C++\n---\n# Hide Data into bitmap with ARGB8888 format\n\n最近工作上接触Bitmap比较多，再加上之前就看到说如何利用图片的透明标志位来存放私密信息。\n所以今天就动手写了这么个小工具，可以将一定长度的文本文件的内容隐藏到图片中保存起来，需要使用时再从图片中解码提取出来。\n\nbitmap.h: 声明Bitmap的文件头结构，Bitmap类和数据隐藏类。\n``` cpp\n#ifndef BMP_H\n#define BMP_H\n \n#include <fstream>\n#include <string>\n#include <iostream>\n \n#define DEBUG 0\n \n#define LOG std::cout\n#define HEX std::hex\n#define DEC std::dec\n \n#define FLAG_0 (0xFF)\n#define FLAG_1 (0xEE)\n#define FLAG_2 (0xDD)\n#define FLAG_3 (0xCC)\n \n#define DATA_CODE (0xCC)\n \n#define BYTE_PER_PIXEL (4)\n \n#pragma pack(push, 1)\ntypedef struct\n{\n    uint16_t bfType; // Type of bitmap, in windows, always 'BM'\n    uint32_t bfSize; // Size of the bitmap file\n    uint16_t bfReserved1; // reserved feild\n    uint16_t bfReserved2; // reserved feild\n    uint32_t bfOffBits; // the start address of the bitmap data\n}BMP_FILE_HEADER;\n \ntypedef struct\n{\n    uint32_t biSize; // size of this struct\n    uint32_t biWidth; // image width, unit is pixel\n    uint32_t biHeight; // image height, unit is pixel\n    uint16_t biPlanes; // alsways 1\n    uint16_t biBitCount; // color depth of the image, 1, 4, 8, 16, 24 and 32\n    uint32_t biCompression; // compression type, 0=no compress, 1=RLE8 compress\n                            // 2=RLE4 compress, 3=pixel color mask\n    uint32_t biSizeImage; // pixel data size of the image\n    uint32_t biXPelsPerMeter; // H resolution, pixel per meter\n    uint32_t biYPelsPerMeter; // V resolution, pixel per meter\n    uint32_t biClrUsed; // color number that used, 0=all color\n    uint32_t biClrImportant; // important color amount, 0=all color important\n}BMP_INFO_HEADER;\n#pragma pacn(pop)\n \nclass Bitmap\n{\nprivate:\n    BMP_FILE_HEADER m_fileHeader;\n    BMP_INFO_HEADER m_infoHeader;\n \n    std::string m_bmpPath;\n    bool m_parseFlag;\npublic:\n    Bitmap(std::string path);\n    ~Bitmap();\n    bool bmpParse();\n    uint32_t getBmpSize();\n    uint32_t getBmpDataAddr();\n    std::string getBmpPath();\n    uint32_t getBmpPixelNum();\n};\n \nclass DataHider\n{\nprivate:\n    uint8_t m_flags[4];\n    uint8_t m_length[4];\n    Bitmap m_bitmapHeader;\n    std::string m_dataFilePath;\n \n    bool isAHider();\n    uint32_t getFileSize(std::ifstream &in);\n    bool readTransByte(std::fstream &file, uint8_t &val, int pos);\n    bool writeTransByte(std::fstream &file, uint8_t val, int pos);\n    void length2Byte(uint32_t length);\n    uint32_t byte2Length();\npublic:\n    DataHider(std::string dataPath, std::string bmpPath);\n    ~DataHider();\n    bool doEncode();\n    bool doDecode();\n};\n \n#endif // BMP_H\n```\n<!--more-->\nbitmap.cpp: 实现上述声明。\n``` cpp\n#include \"bitmap.h\"\n \nBitmap::Bitmap(std::string path)\n: m_fileHeader(), m_infoHeader(), m_bmpPath(path), m_parseFlag(false)\n{\n}\n \nBitmap::~Bitmap()\n{\n}\n \nbool Bitmap::bmpParse()\n{\n    std::ifstream in;\n    in.open(m_bmpPath, std::ios::binary);\n \n    in.read((char *)&m_fileHeader, sizeof(m_fileHeader));\n    /*char * p = (char *)&m_fileHeader;\n    for(uint32_t i=0; i<sizeof(m_fileHeader); ++i)\n    {\n        in.read(p, 1);\n        LOG << HEX << (int)*p << \" \";\n        ++p;\n    }*/\n    if( !in.good() )\n    {\n        LOG << \"read bitmap file head error!\\n\";\n        in.close();\n        return false;\n    }\n \n    in.read((char *)&m_infoHeader, sizeof(m_infoHeader));\n    /*    LOG << \"read bitmap information header!\\n\";\n    p = (char *)&m_infoHeader;\n    for(uint32_t i=0; i<sizeof(m_infoHeader); ++i)\n    {\n        in.read(p, 1);\n        LOG << HEX << (int)*p << \" \";\n        ++p;\n    }*/\n    if( !in.good() )\n    {\n        LOG << \"read bitmap information header error!\\n\";\n        in.close();\n        return false;\n    }\n \n    in.close();\n    m_parseFlag = true;\n \n    #if 1 == DEBUG\n        LOG << \"Bitmap file header:\"\n            << \"\\nbfType: \" << HEX << (int)m_fileHeader.bfType\n            << \"\\nbfSize: \" << (int)m_fileHeader.bfSize\n            << \"\\nbfReserved1: \" << (int)m_fileHeader.bfReserved1\n            << \"\\nbfReserved2: \" << (int)m_fileHeader.bfReserved2\n            << \"\\nbfOffBits: \" << (int)m_fileHeader.bfOffBits\n            << \"\\nBitmap information header:\"\n            << \"\\nbiSize: \" << (int)m_infoHeader.biSize << DEC << \"\\n\";\n    #endif\n \n    return true;\n}\n \nuint32_t Bitmap::getBmpSize()\n{\n    if(!m_parseFlag)\n    {\n        LOG << \"please do bitmap parse first!\\n\";\n    }\n    return m_fileHeader.bfSize;\n}\n \nstd::string Bitmap::getBmpPath()\n{\n    return m_bmpPath;\n}\n \nuint32_t Bitmap::getBmpDataAddr()\n{\n    if(!m_parseFlag)\n    {\n        LOG << \"please do bitmap parse first!\\n\";\n    }\n    return m_fileHeader.bfOffBits;\n}\n \nuint32_t Bitmap::getBmpPixelNum()\n{\n    return m_infoHeader.biWidth * m_infoHeader.biHeight;\n}\n \nDataHider::DataHider(std::string dataPath, std::string bmpPath)\n: m_bitmapHeader(bmpPath), m_dataFilePath(dataPath)\n{\n}\n \nDataHider::~DataHider()\n{\n}\n \nbool DataHider::isAHider()\n{\n    return (m_flags[0] == FLAG_0) &\n            (m_flags[1] == FLAG_1) &\n            (m_flags[2] == FLAG_2) &\n            (m_flags[3] == FLAG_3);\n}\n \nuint32_t DataHider::getFileSize(std::ifstream &in)\n{\n    if(!in.good())\n    {\n        LOG << \"the data file has some error.\\n\";\n        return false;\n    }\n \n    uint32_t pos =  in.tellg();\n    in.seekg(0, std::ios_base::end);\n    uint32_t size = in.tellg();\n    in.seekg(pos, std::ios_base::beg);\n \n    return size;\n}\n \nbool DataHider::readTransByte(std::fstream &file, uint8_t &val, int pos)\n{\n    file.seekg(m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos, std::ios_base::beg);\n    #if DEBUG == 1\n        LOG << \"pos \" << HEX << m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos << \"\\n\";\n    #endif\n    file.read((char *)&val, 1);\n    return file.good();\n}\n \nbool DataHider::writeTransByte(std::fstream &file, uint8_t val, int pos)\n{\n    file.seekp(m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos, std::ios_base::beg);\n    file.write((char *)&val, 1);\n    return file.good();   \n}\n \nvoid DataHider::length2Byte(uint32_t length)\n{\n    for(uint32_t i=0; i<4; ++i)\n        m_length[i] = (uint8_t)(length >> (i*8)) & 0xFF;\n    #if DEBUG == 1\n        LOG << \"length: \" << length << \"\\n\"\n            << (int)m_length[0] << \" \"\n            << (int)m_length[1] << \" \"\n            << (int)m_length[2] << \" \"\n            << (int)m_length[3] << \"\\n\";\n    #endif\n}\n \nuint32_t DataHider::byte2Length()\n{\n    uint32_t length = 0;\n    uint32_t temp;\n    for(uint32_t i=0; i<4; ++i)\n    {\n        temp = m_length[i];\n    #if DEBUG == 1\n        LOG << \"temp: \" << temp << \"\\n\";\n    #endif\n        temp <<= (i*8);\n    #if DEBUG == 1\n        LOG << \"temp: \" << temp << \"\\n\";\n    #endif\n        length += temp;\n    }\n \n    #if DEBUG == 1\n        LOG << \"length: \" << length << \"\\n\";\n    #endif\n \n    return length;\n}\n \nbool DataHider::doEncode()\n{\n    m_bitmapHeader.bmpParse();\n     \n    std::ifstream dataFile;\n    dataFile.open(m_dataFilePath, std::ios::binary);\n    if(!dataFile.good())\n    {\n        LOG << \"open \" << m_dataFilePath << \" failed!\\n\";\n        return false;\n    }\n    uint32_t dataSize = getFileSize(dataFile);\n    if(dataSize > m_bitmapHeader.getBmpPixelNum() + 8) // flag size add length size\n    {\n        LOG << \"data is too big to save into the bitmap!\\n\";\n        dataFile.close();\n        return false;\n    }\n \n    std::fstream bmpFile;\n    bmpFile.open(m_bitmapHeader.getBmpPath(), std::ios_base::binary|\n                    std::ios_base::out|std::ios_base::in);\n                    // |std::ios_base::ate|std::ios_base::app\n    if(!bmpFile.good())\n    {\n        LOG << \"open \" << m_bitmapHeader.getBmpPath() << \" failed!\\n\";\n        dataFile.close();\n        return false;\n    }\n    dataFile.seekg(0, std::ios_base::beg);\n \n    // flags\n    m_flags[0] = FLAG_0;\n    m_flags[1] = FLAG_1;\n    m_flags[2] = FLAG_2;\n    m_flags[3] = FLAG_3;\n \n    for(uint32_t i=0; i<4; ++i)\n        writeTransByte(bmpFile, m_flags[i], i);\n \n    // length\n    length2Byte(dataSize);\n \n    for(uint32_t i=0; i<4; ++i)\n        writeTransByte(bmpFile, m_length[i], i+4);\n \n    // pos start at the 8th pixel\n    int pos = 0;\n    uint8_t data;\n    while(pos < dataSize)\n    {\n        dataFile.read((char *)&data, 1);\n        #if DEBUG == 1\n            LOG << HEX << (int)data << \" \";\n        #endif\n        data ^= DATA_CODE;\n        writeTransByte(bmpFile, data, pos+8);\n        ++pos;\n    }\n \n    bmpFile.close();\n    dataFile.close();\n    return true;\n}\n \nbool DataHider::doDecode()\n{\n    m_bitmapHeader.bmpParse();\n     \n    std::fstream bmpFile;\n    bmpFile.open(m_bitmapHeader.getBmpPath(), std::ios_base::binary|std::ios_base::in);\n    if(!bmpFile.good())\n    {\n        LOG << \"open \" << m_bitmapHeader.getBmpPath() << \" failed!\\n\";\n        return false;\n    }\n    bmpFile.seekg(0, std::ios_base::beg);\n \n \n    // flags\n    for(uint32_t i=0; i<4; ++i)\n    {\n        readTransByte(bmpFile, m_flags[i], i);\n        #if DEBUG\n            LOG << HEX << (int)m_flags[i] << \" \";\n        #endif\n    }\n \n    if( !isAHider() )\n    {\n        LOG << \"this bitmap is not a hider file!\\n\";\n        bmpFile.close();\n        return false;\n    }\n \n    // length\n    for(uint32_t i=0; i<4; ++i)\n        readTransByte(bmpFile, m_length[i], i+4);\n \n    #if DEBUG == 1\n        LOG << (int)m_length[0] << \" \"\n            << (int)m_length[1] << \" \"\n            << (int)m_length[2] << \" \"\n            << (int)m_length[3] << \"\\n\";\n    #endif\n \n    uint32_t dataSize = byte2Length();\n \n    std::ofstream dataFile;\n    dataFile.open(m_dataFilePath, std::ios::binary);\n    if(!dataFile.good())\n    {\n        LOG << \"open \" << m_dataFilePath << \" failed!\\n\";\n        bmpFile.close();\n        return false;\n    }\n    // pos start at the 8th pixel\n    int pos = 0;\n    uint8_t data;\n    while(pos < dataSize)\n    {\n        readTransByte(bmpFile, data, pos+8);\n        data ^= DATA_CODE;\n        dataFile.write((char *)&data, 1);\n        ++pos;\n         \n    }\n \n    bmpFile.close();\n    dataFile.close();\n    return true;\n}\n```\n\nmain.cpp: 主函数\n``` cpp\n#include <iostream>\n#include \"bitmap.h\"\nusing namespace std;\n \nint main(int argc, char **argv)\n{\n    cout << \"Hello world!\" << endl;\n \n    if(argc < 4)\n    {\n        cout << \"please type the right command!\\n\"\n             << \"DataHider encode ./data.txt ./ARGB8888.bmp\\n\"\n             << \"or DataHider decode ./data_out.txt ./ARGB8888.bmp\\n\";\n        return -1;\n    }\n \n    string mode =  argv[1];\n    string dataFile = argv[2];\n    string bmpFile = argv[3];\n \n    if(mode == \"encode\")\n    {\n        cout << \"encoder\\n\";\n        DataHider encoder(dataFile, bmpFile);\n        encoder.doEncode();\n    }\n    else if(mode == \"decode\")\n    {\n        cout << \"decoder\\n\";\n        DataHider decoder(dataFile, bmpFile);\n        decoder.doDecode();\n    }\n \n    return 0;\n}\n```","slug":"Hide-Data-into-bitmap-with-ARGB8888-format","published":1,"updated":"2019-03-18T14:46:08.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxsmt32y003dzs1kcqm41ska","content":"<h1 id=\"Hide-Data-into-bitmap-with-ARGB8888-format\"><a href=\"#Hide-Data-into-bitmap-with-ARGB8888-format\" class=\"headerlink\" title=\"Hide Data into bitmap with ARGB8888 format\"></a>Hide Data into bitmap with ARGB8888 format</h1><p>最近工作上接触Bitmap比较多，再加上之前就看到说如何利用图片的透明标志位来存放私密信息。<br>所以今天就动手写了这么个小工具，可以将一定长度的文本文件的内容隐藏到图片中保存起来，需要使用时再从图片中解码提取出来。</p>\n<p>bitmap.h: 声明Bitmap的文件头结构，Bitmap类和数据隐藏类。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> BMP_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BMP_H</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG 0</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG std::cout</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HEX std::hex</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEC std::dec</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_0 (0xFF)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_1 (0xEE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_2 (0xDD)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_3 (0xCC)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DATA_CODE (0xCC)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE_PER_PIXEL (4)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> pack(push, 1)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> bfType; <span class=\"comment\">// Type of bitmap, in windows, always 'BM'</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> bfSize; <span class=\"comment\">// Size of the bitmap file</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> bfReserved1; <span class=\"comment\">// reserved feild</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> bfReserved2; <span class=\"comment\">// reserved feild</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> bfOffBits; <span class=\"comment\">// the start address of the bitmap data</span></span><br><span class=\"line\">&#125;BMP_FILE_HEADER;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biSize; <span class=\"comment\">// size of this struct</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biWidth; <span class=\"comment\">// image width, unit is pixel</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biHeight; <span class=\"comment\">// image height, unit is pixel</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> biPlanes; <span class=\"comment\">// alsways 1</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> biBitCount; <span class=\"comment\">// color depth of the image, 1, 4, 8, 16, 24 and 32</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biCompression; <span class=\"comment\">// compression type, 0=no compress, 1=RLE8 compress</span></span><br><span class=\"line\">                            <span class=\"comment\">// 2=RLE4 compress, 3=pixel color mask</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biSizeImage; <span class=\"comment\">// pixel data size of the image</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biXPelsPerMeter; <span class=\"comment\">// H resolution, pixel per meter</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biYPelsPerMeter; <span class=\"comment\">// V resolution, pixel per meter</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biClrUsed; <span class=\"comment\">// color number that used, 0=all color</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biClrImportant; <span class=\"comment\">// important color amount, 0=all color important</span></span><br><span class=\"line\">&#125;BMP_INFO_HEADER;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> pacn(pop)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bitmap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    BMP_FILE_HEADER m_fileHeader;</span><br><span class=\"line\">    BMP_INFO_HEADER m_infoHeader;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_bmpPath;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> m_parseFlag;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Bitmap(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> path);</span><br><span class=\"line\">    ~Bitmap();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bmpParse</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> getBmpSize();</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> getBmpDataAddr();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getBmpPath</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> getBmpPixelNum();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataHider</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> m_flags[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> m_length[<span class=\"number\">4</span>];</span><br><span class=\"line\">    Bitmap m_bitmapHeader;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_dataFilePath;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isAHider</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> getFileSize(<span class=\"built_in\">std</span>::ifstream &amp;in);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">readTransByte</span><span class=\"params\">(<span class=\"built_in\">std</span>::fstream &amp;file, <span class=\"keyword\">uint8_t</span> &amp;val, <span class=\"keyword\">int</span> pos)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">writeTransByte</span><span class=\"params\">(<span class=\"built_in\">std</span>::fstream &amp;file, <span class=\"keyword\">uint8_t</span> val, <span class=\"keyword\">int</span> pos)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">length2Byte</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> length)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> byte2Length();</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    DataHider(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> dataPath, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> bmpPath);</span><br><span class=\"line\">    ~DataHider();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">doEncode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">doDecode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// BMP_H</span></span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>bitmap.cpp: 实现上述声明。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"bitmap.h\"</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">Bitmap::Bitmap(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> path)</span><br><span class=\"line\">: m_fileHeader(), m_infoHeader(), m_bmpPath(path), m_parseFlag(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Bitmap::~Bitmap()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> Bitmap::bmpParse()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::ifstream in;</span><br><span class=\"line\">    in.open(m_bmpPath, <span class=\"built_in\">std</span>::ios::binary);</span><br><span class=\"line\"> </span><br><span class=\"line\">    in.read((<span class=\"keyword\">char</span> *)&amp;m_fileHeader, <span class=\"keyword\">sizeof</span>(m_fileHeader));</span><br><span class=\"line\">    <span class=\"comment\">/*char * p = (char *)&amp;m_fileHeader;</span></span><br><span class=\"line\"><span class=\"comment\">    for(uint32_t i=0; i&lt;sizeof(m_fileHeader); ++i)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        in.read(p, 1);</span></span><br><span class=\"line\"><span class=\"comment\">        LOG &lt;&lt; HEX &lt;&lt; (int)*p &lt;&lt; \" \";</span></span><br><span class=\"line\"><span class=\"comment\">        ++p;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !in.good() )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"read bitmap file head error!\\n\"</span>;</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    in.read((<span class=\"keyword\">char</span> *)&amp;m_infoHeader, <span class=\"keyword\">sizeof</span>(m_infoHeader));</span><br><span class=\"line\">    <span class=\"comment\">/*    LOG &lt;&lt; \"read bitmap information header!\\n\";</span></span><br><span class=\"line\"><span class=\"comment\">    p = (char *)&amp;m_infoHeader;</span></span><br><span class=\"line\"><span class=\"comment\">    for(uint32_t i=0; i&lt;sizeof(m_infoHeader); ++i)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        in.read(p, 1);</span></span><br><span class=\"line\"><span class=\"comment\">        LOG &lt;&lt; HEX &lt;&lt; (int)*p &lt;&lt; \" \";</span></span><br><span class=\"line\"><span class=\"comment\">        ++p;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !in.good() )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"read bitmap information header error!\\n\"</span>;</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">    m_parseFlag = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1 == DEBUG</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"Bitmap file header:\"</span></span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfType: \"</span> &lt;&lt; HEX &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfType</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfSize: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfSize</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfReserved1: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfReserved1</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfReserved2: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfReserved2</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfOffBits: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfOffBits</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nBitmap information header:\"</span></span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbiSize: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_infoHeader.biSize &lt;&lt; DEC &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> Bitmap::getBmpSize()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!m_parseFlag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"please do bitmap parse first!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_fileHeader.bfSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> Bitmap::getBmpPath()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_bmpPath;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> Bitmap::getBmpDataAddr()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!m_parseFlag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"please do bitmap parse first!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_fileHeader.bfOffBits;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> Bitmap::getBmpPixelNum()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_infoHeader.biWidth * m_infoHeader.biHeight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">DataHider::DataHider(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> dataPath, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> bmpPath)</span><br><span class=\"line\">: m_bitmapHeader(bmpPath), m_dataFilePath(dataPath)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">DataHider::~DataHider()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::isAHider()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (m_flags[<span class=\"number\">0</span>] == FLAG_0) &amp;</span><br><span class=\"line\">            (m_flags[<span class=\"number\">1</span>] == FLAG_1) &amp;</span><br><span class=\"line\">            (m_flags[<span class=\"number\">2</span>] == FLAG_2) &amp;</span><br><span class=\"line\">            (m_flags[<span class=\"number\">3</span>] == FLAG_3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> DataHider::getFileSize(<span class=\"built_in\">std</span>::ifstream &amp;in)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!in.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"the data file has some error.\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> pos =  in.tellg();</span><br><span class=\"line\">    in.seekg(<span class=\"number\">0</span>, <span class=\"built_in\">std</span>::ios_base::end);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> size = in.tellg();</span><br><span class=\"line\">    in.seekg(pos, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::readTransByte(<span class=\"built_in\">std</span>::fstream &amp;file, <span class=\"keyword\">uint8_t</span> &amp;val, <span class=\"keyword\">int</span> pos)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    file.seekg(m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"pos \"</span> &lt;&lt; HEX &lt;&lt; m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    file.read((<span class=\"keyword\">char</span> *)&amp;val, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> file.good();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::writeTransByte(<span class=\"built_in\">std</span>::fstream &amp;file, <span class=\"keyword\">uint8_t</span> val, <span class=\"keyword\">int</span> pos)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    file.seekp(m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\">    file.write((<span class=\"keyword\">char</span> *)&amp;val, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> file.good();   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">void</span> DataHider::length2Byte(<span class=\"keyword\">uint32_t</span> length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        m_length[i] = (<span class=\"keyword\">uint8_t</span>)(length &gt;&gt; (i*<span class=\"number\">8</span>)) &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"length: \"</span> &lt;&lt; length &lt;&lt; <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">2</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">3</span>] &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> DataHider::byte2Length()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp = m_length[i];</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"temp: \"</span> &lt;&lt; temp &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        temp &lt;&lt;= (i*<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"temp: \"</span> &lt;&lt; temp &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        length += temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"length: \"</span> &lt;&lt; length &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::doEncode()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_bitmapHeader.bmpParse();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::ifstream dataFile;</span><br><span class=\"line\">    dataFile.open(m_dataFilePath, <span class=\"built_in\">std</span>::ios::binary);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!dataFile.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"open \"</span> &lt;&lt; m_dataFilePath &lt;&lt; <span class=\"string\">\" failed!\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> dataSize = getFileSize(dataFile);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dataSize &gt; m_bitmapHeader.getBmpPixelNum() + <span class=\"number\">8</span>) <span class=\"comment\">// flag size add length size</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"data is too big to save into the bitmap!\\n\"</span>;</span><br><span class=\"line\">        dataFile.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::fstream bmpFile;</span><br><span class=\"line\">    bmpFile.open(m_bitmapHeader.getBmpPath(), <span class=\"built_in\">std</span>::ios_base::binary|</span><br><span class=\"line\">                    <span class=\"built_in\">std</span>::ios_base::out|<span class=\"built_in\">std</span>::ios_base::in);</span><br><span class=\"line\">                    <span class=\"comment\">// |std::ios_base::ate|std::ios_base::app</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!bmpFile.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"open \"</span> &lt;&lt; m_bitmapHeader.getBmpPath() &lt;&lt; <span class=\"string\">\" failed!\\n\"</span>;</span><br><span class=\"line\">        dataFile.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dataFile.seekg(<span class=\"number\">0</span>, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// flags</span></span><br><span class=\"line\">    m_flags[<span class=\"number\">0</span>] = FLAG_0;</span><br><span class=\"line\">    m_flags[<span class=\"number\">1</span>] = FLAG_1;</span><br><span class=\"line\">    m_flags[<span class=\"number\">2</span>] = FLAG_2;</span><br><span class=\"line\">    m_flags[<span class=\"number\">3</span>] = FLAG_3;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        writeTransByte(bmpFile, m_flags[i], i);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// length</span></span><br><span class=\"line\">    length2Byte(dataSize);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        writeTransByte(bmpFile, m_length[i], i+<span class=\"number\">4</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// pos start at the 8th pixel</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pos &lt; dataSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dataFile.read((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">            LOG &lt;&lt; HEX &lt;&lt; (<span class=\"keyword\">int</span>)data &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        data ^= DATA_CODE;</span><br><span class=\"line\">        writeTransByte(bmpFile, data, pos+<span class=\"number\">8</span>);</span><br><span class=\"line\">        ++pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    bmpFile.close();</span><br><span class=\"line\">    dataFile.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::doDecode()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_bitmapHeader.bmpParse();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::fstream bmpFile;</span><br><span class=\"line\">    bmpFile.open(m_bitmapHeader.getBmpPath(), <span class=\"built_in\">std</span>::ios_base::binary|<span class=\"built_in\">std</span>::ios_base::in);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!bmpFile.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"open \"</span> &lt;&lt; m_bitmapHeader.getBmpPath() &lt;&lt; <span class=\"string\">\" failed!\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bmpFile.seekg(<span class=\"number\">0</span>, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// flags</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        readTransByte(bmpFile, m_flags[i], i);</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG</span></span><br><span class=\"line\">            LOG &lt;&lt; HEX &lt;&lt; (<span class=\"keyword\">int</span>)m_flags[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !isAHider() )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"this bitmap is not a hider file!\\n\"</span>;</span><br><span class=\"line\">        bmpFile.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// length</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        readTransByte(bmpFile, m_length[i], i+<span class=\"number\">4</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">2</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">3</span>] &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> dataSize = byte2Length();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::ofstream dataFile;</span><br><span class=\"line\">    dataFile.open(m_dataFilePath, <span class=\"built_in\">std</span>::ios::binary);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!dataFile.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"open \"</span> &lt;&lt; m_dataFilePath &lt;&lt; <span class=\"string\">\" failed!\\n\"</span>;</span><br><span class=\"line\">        bmpFile.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// pos start at the 8th pixel</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pos &lt; dataSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        readTransByte(bmpFile, data, pos+<span class=\"number\">8</span>);</span><br><span class=\"line\">        data ^= DATA_CODE;</span><br><span class=\"line\">        dataFile.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\">        ++pos;</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    bmpFile.close();</span><br><span class=\"line\">    dataFile.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>main.cpp: 主函数<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"bitmap.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello world!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argc &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"please type the right command!\\n\"</span></span><br><span class=\"line\">             &lt;&lt; <span class=\"string\">\"DataHider encode ./data.txt ./ARGB8888.bmp\\n\"</span></span><br><span class=\"line\">             &lt;&lt; <span class=\"string\">\"or DataHider decode ./data_out.txt ./ARGB8888.bmp\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">string</span> mode =  argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">string</span> dataFile = argv[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"built_in\">string</span> bmpFile = argv[<span class=\"number\">3</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mode == <span class=\"string\">\"encode\"</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"encoder\\n\"</span>;</span><br><span class=\"line\">        <span class=\"function\">DataHider <span class=\"title\">encoder</span><span class=\"params\">(dataFile, bmpFile)</span></span>;</span><br><span class=\"line\">        encoder.doEncode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mode == <span class=\"string\">\"decode\"</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"decoder\\n\"</span>;</span><br><span class=\"line\">        <span class=\"function\">DataHider <span class=\"title\">decoder</span><span class=\"params\">(dataFile, bmpFile)</span></span>;</span><br><span class=\"line\">        decoder.doDecode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Hide-Data-into-bitmap-with-ARGB8888-format\"><a href=\"#Hide-Data-into-bitmap-with-ARGB8888-format\" class=\"headerlink\" title=\"Hide Data into bitmap with ARGB8888 format\"></a>Hide Data into bitmap with ARGB8888 format</h1><p>最近工作上接触Bitmap比较多，再加上之前就看到说如何利用图片的透明标志位来存放私密信息。<br>所以今天就动手写了这么个小工具，可以将一定长度的文本文件的内容隐藏到图片中保存起来，需要使用时再从图片中解码提取出来。</p>\n<p>bitmap.h: 声明Bitmap的文件头结构，Bitmap类和数据隐藏类。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> BMP_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BMP_H</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG 0</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOG std::cout</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HEX std::hex</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEC std::dec</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_0 (0xFF)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_1 (0xEE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_2 (0xDD)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FLAG_3 (0xCC)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DATA_CODE (0xCC)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BYTE_PER_PIXEL (4)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> pack(push, 1)</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> bfType; <span class=\"comment\">// Type of bitmap, in windows, always 'BM'</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> bfSize; <span class=\"comment\">// Size of the bitmap file</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> bfReserved1; <span class=\"comment\">// reserved feild</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> bfReserved2; <span class=\"comment\">// reserved feild</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> bfOffBits; <span class=\"comment\">// the start address of the bitmap data</span></span><br><span class=\"line\">&#125;BMP_FILE_HEADER;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biSize; <span class=\"comment\">// size of this struct</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biWidth; <span class=\"comment\">// image width, unit is pixel</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biHeight; <span class=\"comment\">// image height, unit is pixel</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> biPlanes; <span class=\"comment\">// alsways 1</span></span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> biBitCount; <span class=\"comment\">// color depth of the image, 1, 4, 8, 16, 24 and 32</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biCompression; <span class=\"comment\">// compression type, 0=no compress, 1=RLE8 compress</span></span><br><span class=\"line\">                            <span class=\"comment\">// 2=RLE4 compress, 3=pixel color mask</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biSizeImage; <span class=\"comment\">// pixel data size of the image</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biXPelsPerMeter; <span class=\"comment\">// H resolution, pixel per meter</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biYPelsPerMeter; <span class=\"comment\">// V resolution, pixel per meter</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biClrUsed; <span class=\"comment\">// color number that used, 0=all color</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> biClrImportant; <span class=\"comment\">// important color amount, 0=all color important</span></span><br><span class=\"line\">&#125;BMP_INFO_HEADER;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> pacn(pop)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bitmap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    BMP_FILE_HEADER m_fileHeader;</span><br><span class=\"line\">    BMP_INFO_HEADER m_infoHeader;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_bmpPath;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> m_parseFlag;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Bitmap(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> path);</span><br><span class=\"line\">    ~Bitmap();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bmpParse</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> getBmpSize();</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> getBmpDataAddr();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getBmpPath</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> getBmpPixelNum();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataHider</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> m_flags[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> m_length[<span class=\"number\">4</span>];</span><br><span class=\"line\">    Bitmap m_bitmapHeader;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_dataFilePath;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isAHider</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> getFileSize(<span class=\"built_in\">std</span>::ifstream &amp;in);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">readTransByte</span><span class=\"params\">(<span class=\"built_in\">std</span>::fstream &amp;file, <span class=\"keyword\">uint8_t</span> &amp;val, <span class=\"keyword\">int</span> pos)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">writeTransByte</span><span class=\"params\">(<span class=\"built_in\">std</span>::fstream &amp;file, <span class=\"keyword\">uint8_t</span> val, <span class=\"keyword\">int</span> pos)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">length2Byte</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> length)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> byte2Length();</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    DataHider(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> dataPath, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> bmpPath);</span><br><span class=\"line\">    ~DataHider();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">doEncode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">doDecode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// BMP_H</span></span></span><br></pre></td></tr></table></figure></p>","more":"<p>bitmap.cpp: 实现上述声明。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"bitmap.h\"</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">Bitmap::Bitmap(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> path)</span><br><span class=\"line\">: m_fileHeader(), m_infoHeader(), m_bmpPath(path), m_parseFlag(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">Bitmap::~Bitmap()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> Bitmap::bmpParse()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::ifstream in;</span><br><span class=\"line\">    in.open(m_bmpPath, <span class=\"built_in\">std</span>::ios::binary);</span><br><span class=\"line\"> </span><br><span class=\"line\">    in.read((<span class=\"keyword\">char</span> *)&amp;m_fileHeader, <span class=\"keyword\">sizeof</span>(m_fileHeader));</span><br><span class=\"line\">    <span class=\"comment\">/*char * p = (char *)&amp;m_fileHeader;</span></span><br><span class=\"line\"><span class=\"comment\">    for(uint32_t i=0; i&lt;sizeof(m_fileHeader); ++i)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        in.read(p, 1);</span></span><br><span class=\"line\"><span class=\"comment\">        LOG &lt;&lt; HEX &lt;&lt; (int)*p &lt;&lt; \" \";</span></span><br><span class=\"line\"><span class=\"comment\">        ++p;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !in.good() )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"read bitmap file head error!\\n\"</span>;</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    in.read((<span class=\"keyword\">char</span> *)&amp;m_infoHeader, <span class=\"keyword\">sizeof</span>(m_infoHeader));</span><br><span class=\"line\">    <span class=\"comment\">/*    LOG &lt;&lt; \"read bitmap information header!\\n\";</span></span><br><span class=\"line\"><span class=\"comment\">    p = (char *)&amp;m_infoHeader;</span></span><br><span class=\"line\"><span class=\"comment\">    for(uint32_t i=0; i&lt;sizeof(m_infoHeader); ++i)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        in.read(p, 1);</span></span><br><span class=\"line\"><span class=\"comment\">        LOG &lt;&lt; HEX &lt;&lt; (int)*p &lt;&lt; \" \";</span></span><br><span class=\"line\"><span class=\"comment\">        ++p;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !in.good() )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"read bitmap information header error!\\n\"</span>;</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">    m_parseFlag = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1 == DEBUG</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"Bitmap file header:\"</span></span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfType: \"</span> &lt;&lt; HEX &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfType</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfSize: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfSize</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfReserved1: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfReserved1</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfReserved2: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfReserved2</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbfOffBits: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_fileHeader.bfOffBits</span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nBitmap information header:\"</span></span><br><span class=\"line\">            &lt;&lt; <span class=\"string\">\"\\nbiSize: \"</span> &lt;&lt; (<span class=\"keyword\">int</span>)m_infoHeader.biSize &lt;&lt; DEC &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> Bitmap::getBmpSize()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!m_parseFlag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"please do bitmap parse first!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_fileHeader.bfSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> Bitmap::getBmpPath()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_bmpPath;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> Bitmap::getBmpDataAddr()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!m_parseFlag)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"please do bitmap parse first!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_fileHeader.bfOffBits;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> Bitmap::getBmpPixelNum()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_infoHeader.biWidth * m_infoHeader.biHeight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">DataHider::DataHider(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> dataPath, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> bmpPath)</span><br><span class=\"line\">: m_bitmapHeader(bmpPath), m_dataFilePath(dataPath)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">DataHider::~DataHider()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::isAHider()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (m_flags[<span class=\"number\">0</span>] == FLAG_0) &amp;</span><br><span class=\"line\">            (m_flags[<span class=\"number\">1</span>] == FLAG_1) &amp;</span><br><span class=\"line\">            (m_flags[<span class=\"number\">2</span>] == FLAG_2) &amp;</span><br><span class=\"line\">            (m_flags[<span class=\"number\">3</span>] == FLAG_3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> DataHider::getFileSize(<span class=\"built_in\">std</span>::ifstream &amp;in)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!in.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"the data file has some error.\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> pos =  in.tellg();</span><br><span class=\"line\">    in.seekg(<span class=\"number\">0</span>, <span class=\"built_in\">std</span>::ios_base::end);</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> size = in.tellg();</span><br><span class=\"line\">    in.seekg(pos, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::readTransByte(<span class=\"built_in\">std</span>::fstream &amp;file, <span class=\"keyword\">uint8_t</span> &amp;val, <span class=\"keyword\">int</span> pos)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    file.seekg(m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"pos \"</span> &lt;&lt; HEX &lt;&lt; m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    file.read((<span class=\"keyword\">char</span> *)&amp;val, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> file.good();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::writeTransByte(<span class=\"built_in\">std</span>::fstream &amp;file, <span class=\"keyword\">uint8_t</span> val, <span class=\"keyword\">int</span> pos)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    file.seekp(m_bitmapHeader.getBmpDataAddr()+BYTE_PER_PIXEL*pos, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\">    file.write((<span class=\"keyword\">char</span> *)&amp;val, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> file.good();   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">void</span> DataHider::length2Byte(<span class=\"keyword\">uint32_t</span> length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        m_length[i] = (<span class=\"keyword\">uint8_t</span>)(length &gt;&gt; (i*<span class=\"number\">8</span>)) &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"length: \"</span> &lt;&lt; length &lt;&lt; <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">2</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">3</span>] &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> DataHider::byte2Length()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp = m_length[i];</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"temp: \"</span> &lt;&lt; temp &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        temp &lt;&lt;= (i*<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"temp: \"</span> &lt;&lt; temp &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        length += temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"length: \"</span> &lt;&lt; length &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::doEncode()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_bitmapHeader.bmpParse();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::ifstream dataFile;</span><br><span class=\"line\">    dataFile.open(m_dataFilePath, <span class=\"built_in\">std</span>::ios::binary);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!dataFile.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"open \"</span> &lt;&lt; m_dataFilePath &lt;&lt; <span class=\"string\">\" failed!\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> dataSize = getFileSize(dataFile);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dataSize &gt; m_bitmapHeader.getBmpPixelNum() + <span class=\"number\">8</span>) <span class=\"comment\">// flag size add length size</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"data is too big to save into the bitmap!\\n\"</span>;</span><br><span class=\"line\">        dataFile.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::fstream bmpFile;</span><br><span class=\"line\">    bmpFile.open(m_bitmapHeader.getBmpPath(), <span class=\"built_in\">std</span>::ios_base::binary|</span><br><span class=\"line\">                    <span class=\"built_in\">std</span>::ios_base::out|<span class=\"built_in\">std</span>::ios_base::in);</span><br><span class=\"line\">                    <span class=\"comment\">// |std::ios_base::ate|std::ios_base::app</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!bmpFile.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"open \"</span> &lt;&lt; m_bitmapHeader.getBmpPath() &lt;&lt; <span class=\"string\">\" failed!\\n\"</span>;</span><br><span class=\"line\">        dataFile.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dataFile.seekg(<span class=\"number\">0</span>, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// flags</span></span><br><span class=\"line\">    m_flags[<span class=\"number\">0</span>] = FLAG_0;</span><br><span class=\"line\">    m_flags[<span class=\"number\">1</span>] = FLAG_1;</span><br><span class=\"line\">    m_flags[<span class=\"number\">2</span>] = FLAG_2;</span><br><span class=\"line\">    m_flags[<span class=\"number\">3</span>] = FLAG_3;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        writeTransByte(bmpFile, m_flags[i], i);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// length</span></span><br><span class=\"line\">    length2Byte(dataSize);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        writeTransByte(bmpFile, m_length[i], i+<span class=\"number\">4</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// pos start at the 8th pixel</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pos &lt; dataSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dataFile.read((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">            LOG &lt;&lt; HEX &lt;&lt; (<span class=\"keyword\">int</span>)data &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        data ^= DATA_CODE;</span><br><span class=\"line\">        writeTransByte(bmpFile, data, pos+<span class=\"number\">8</span>);</span><br><span class=\"line\">        ++pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    bmpFile.close();</span><br><span class=\"line\">    dataFile.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">bool</span> DataHider::doDecode()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_bitmapHeader.bmpParse();</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::fstream bmpFile;</span><br><span class=\"line\">    bmpFile.open(m_bitmapHeader.getBmpPath(), <span class=\"built_in\">std</span>::ios_base::binary|<span class=\"built_in\">std</span>::ios_base::in);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!bmpFile.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"open \"</span> &lt;&lt; m_bitmapHeader.getBmpPath() &lt;&lt; <span class=\"string\">\" failed!\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bmpFile.seekg(<span class=\"number\">0</span>, <span class=\"built_in\">std</span>::ios_base::beg);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// flags</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        readTransByte(bmpFile, m_flags[i], i);</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG</span></span><br><span class=\"line\">            LOG &lt;&lt; HEX &lt;&lt; (<span class=\"keyword\">int</span>)m_flags[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !isAHider() )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"this bitmap is not a hider file!\\n\"</span>;</span><br><span class=\"line\">        bmpFile.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// length</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">uint32_t</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        readTransByte(bmpFile, m_length[i], i+<span class=\"number\">4</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG == 1</span></span><br><span class=\"line\">        LOG &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">2</span>] &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">            &lt;&lt; (<span class=\"keyword\">int</span>)m_length[<span class=\"number\">3</span>] &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> dataSize = byte2Length();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::ofstream dataFile;</span><br><span class=\"line\">    dataFile.open(m_dataFilePath, <span class=\"built_in\">std</span>::ios::binary);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!dataFile.good())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOG &lt;&lt; <span class=\"string\">\"open \"</span> &lt;&lt; m_dataFilePath &lt;&lt; <span class=\"string\">\" failed!\\n\"</span>;</span><br><span class=\"line\">        bmpFile.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// pos start at the 8th pixel</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pos &lt; dataSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        readTransByte(bmpFile, data, pos+<span class=\"number\">8</span>);</span><br><span class=\"line\">        data ^= DATA_CODE;</span><br><span class=\"line\">        dataFile.write((<span class=\"keyword\">char</span> *)&amp;data, <span class=\"number\">1</span>);</span><br><span class=\"line\">        ++pos;</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    bmpFile.close();</span><br><span class=\"line\">    dataFile.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>main.cpp: 主函数<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"bitmap.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello world!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(argc &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"please type the right command!\\n\"</span></span><br><span class=\"line\">             &lt;&lt; <span class=\"string\">\"DataHider encode ./data.txt ./ARGB8888.bmp\\n\"</span></span><br><span class=\"line\">             &lt;&lt; <span class=\"string\">\"or DataHider decode ./data_out.txt ./ARGB8888.bmp\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">string</span> mode =  argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">string</span> dataFile = argv[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"built_in\">string</span> bmpFile = argv[<span class=\"number\">3</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mode == <span class=\"string\">\"encode\"</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"encoder\\n\"</span>;</span><br><span class=\"line\">        <span class=\"function\">DataHider <span class=\"title\">encoder</span><span class=\"params\">(dataFile, bmpFile)</span></span>;</span><br><span class=\"line\">        encoder.doEncode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mode == <span class=\"string\">\"decode\"</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"decoder\\n\"</span>;</span><br><span class=\"line\">        <span class=\"function\">DataHider <span class=\"title\">decoder</span><span class=\"params\">(dataFile, bmpFile)</span></span>;</span><br><span class=\"line\">        decoder.doDecode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[{"_id":"source/_posts/两相双极性步进电机驱动/steper.png","slug":"steper.png","post":"cjxsmt301000dzs1knvz93cxw","modified":1,"renderable":0},{"_id":"source/_posts/基础算法总结/RadixSort.gif","slug":"RadixSort.gif","post":"cjxsmt303000fzs1k4jv4amx2","modified":1,"renderable":0},{"_id":"source/_posts/自动喂鱼机/feed_storage.png","slug":"feed_storage.png","post":"cjxsmt30i000qzs1kqp6uo86q","modified":1,"renderable":0},{"_id":"source/_posts/自动喂鱼机/main_board.png","slug":"main_board.png","post":"cjxsmt30i000qzs1kqp6uo86q","modified":1,"renderable":0},{"_id":"source/_posts/Bitmap每个像素值由指定的掩码决定/compare.png","post":"cjxsmt2yi0001zs1kdbw88x8x","slug":"compare.png","modified":1,"renderable":1},{"_id":"source/_posts/My-First-Linux-Module/example.png","post":"cjxsmt2yt0004zs1kxnmduy0o","slug":"example.png","modified":1,"renderable":1},{"_id":"source/_posts/巧用std-shared-ptr全局对象释放单例内存/result.png","post":"cjxsmt30f000nzs1kakzajpxq","slug":"result.png","modified":1,"renderable":1},{"_id":"source/_posts/Socket编程基础/shake_hands.png","post":"cjxsmt2yx0005zs1ksb4j8xb1","slug":"shake_hands.png","modified":1,"renderable":1},{"_id":"source/_posts/Socket编程基础/socket_process.png","post":"cjxsmt2yx0005zs1ksb4j8xb1","slug":"socket_process.png","modified":1,"renderable":1},{"_id":"source/_posts/三星S8-刷机记录/GMS1.jpg","post":"cjxsmt2zi0009zs1k0karidjj","slug":"GMS1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/三星S8-刷机记录/GMS2.jpg","post":"cjxsmt2zi0009zs1k0karidjj","slug":"GMS2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/三星S8-刷机记录/battery.jpg","post":"cjxsmt2zi0009zs1k0karidjj","slug":"battery.jpg","modified":1,"renderable":1},{"_id":"source/_posts/三星S8相机黑画面解决/camera_error.jpg","post":"cjxsmt2zw000azs1kxfuwzuu9","slug":"camera_error.jpg","modified":1,"renderable":1},{"_id":"source/_posts/三星S8相机黑画面解决/light_error.jpg","post":"cjxsmt2zw000azs1kxfuwzuu9","slug":"light_error.jpg","modified":1,"renderable":1},{"_id":"source/_posts/三星S8相机黑画面解决/log1.jpg","post":"cjxsmt2zw000azs1kxfuwzuu9","slug":"log1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/三星S8相机黑画面解决/log2.jpg","post":"cjxsmt2zw000azs1kxfuwzuu9","slug":"log2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/两相双极性步进电机驱动/steper_run.png","post":"cjxsmt301000dzs1knvz93cxw","slug":"steper_run.png","modified":1,"renderable":1},{"_id":"source/_posts/两相双极性步进电机驱动/steper_schematic.gif","post":"cjxsmt301000dzs1knvz93cxw","slug":"steper_schematic.gif","modified":1,"renderable":1},{"_id":"source/_posts/两相双极性步进电机驱动/steper_schematic_static.png","post":"cjxsmt301000dzs1knvz93cxw","slug":"steper_schematic_static.png","modified":1,"renderable":1},{"_id":"source/_posts/自动喂鱼机/drive_board.png","post":"cjxsmt30i000qzs1kqp6uo86q","slug":"drive_board.png","modified":1,"renderable":1},{"_id":"source/_posts/自动喂鱼机/feeder.gif","slug":"feeder.gif","post":"cjxsmt30i000qzs1kqp6uo86q","modified":1,"renderable":0},{"_id":"source/_posts/自动喂鱼机/feeder.png","slug":"feeder.png","post":"cjxsmt30i000qzs1kqp6uo86q","modified":1,"renderable":0},{"_id":"source/_posts/自动喂鱼机/flowchart.png","post":"cjxsmt30i000qzs1kqp6uo86q","slug":"flowchart.png","modified":1,"renderable":1},{"_id":"source/_posts/自动喂鱼机/motor.png","post":"cjxsmt30i000qzs1kqp6uo86q","slug":"motor.png","modified":1,"renderable":1},{"_id":"source/_posts/基础算法总结/CountSort.gif","post":"cjxsmt303000fzs1k4jv4amx2","slug":"CountSort.gif","modified":1,"renderable":1},{"_id":"source/_posts/基础算法总结/BubbleSort.gif","slug":"BubbleSort.gif","post":"cjxsmt303000fzs1k4jv4amx2","modified":1,"renderable":0},{"_id":"source/_posts/基础算法总结/BucketSort.png","post":"cjxsmt303000fzs1k4jv4amx2","slug":"BucketSort.png","modified":1,"renderable":1},{"_id":"source/_posts/基础算法总结/HeapSort.gif","slug":"HeapSort.gif","post":"cjxsmt303000fzs1k4jv4amx2","modified":1,"renderable":0},{"_id":"source/_posts/基础算法总结/InsertSort.gif","slug":"InsertSort.gif","post":"cjxsmt303000fzs1k4jv4amx2","modified":1,"renderable":0},{"_id":"source/_posts/基础算法总结/MergeSort.gif","slug":"MergeSort.gif","post":"cjxsmt303000fzs1k4jv4amx2","modified":1,"renderable":0},{"_id":"source/_posts/基础算法总结/QuickSort.gif","slug":"QuickSort.gif","post":"cjxsmt303000fzs1k4jv4amx2","modified":1,"renderable":0},{"_id":"source/_posts/基础算法总结/SelectSort.gif","slug":"SelectSort.gif","post":"cjxsmt303000fzs1k4jv4amx2","modified":1,"renderable":0},{"_id":"source/_posts/基础算法总结/ShellSort.gif","slug":"ShellSort.gif","post":"cjxsmt303000fzs1k4jv4amx2","modified":1,"renderable":0},{"_id":"source/_posts/基础算法总结/sort.png","post":"cjxsmt303000fzs1k4jv4amx2","slug":"sort.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjxsmt303000fzs1k4jv4amx2","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt30h000ozs1kzpxto22y"},{"post_id":"cjxsmt30o000uzs1k2qbcuvai","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt30v000yzs1kpx8z7zaf"},{"post_id":"cjxsmt30o000uzs1k2qbcuvai","category_id":"cjxsmt30m000szs1k8ojjmrjh","_id":"cjxsmt30x0012zs1k69rrgrup"},{"post_id":"cjxsmt2z30006zs1kzru3p7ij","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt30y0013zs1k4z3am8dm"},{"post_id":"cjxsmt2z30006zs1kzru3p7ij","category_id":"cjxsmt30m000szs1k8ojjmrjh","_id":"cjxsmt3100016zs1kdrb8zbx9"},{"post_id":"cjxsmt2zi0009zs1k0karidjj","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt3110018zs1kbm0gzjya"},{"post_id":"cjxsmt2zi0009zs1k0karidjj","category_id":"cjxsmt30s000vzs1k5ykn01jx","_id":"cjxsmt312001azs1klegk38uz"},{"post_id":"cjxsmt2zw000azs1kxfuwzuu9","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt315001fzs1kgs69aydl"},{"post_id":"cjxsmt2zw000azs1kxfuwzuu9","category_id":"cjxsmt30z0014zs1kjxkpglc7","_id":"cjxsmt317001izs1kaihmb9t1"},{"post_id":"cjxsmt2yt0004zs1kxnmduy0o","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt31b001nzs1k9wgfncai"},{"post_id":"cjxsmt2yt0004zs1kxnmduy0o","category_id":"cjxsmt315001gzs1k1jd6xw4o","_id":"cjxsmt31c001qzs1kiyniojgh"},{"post_id":"cjxsmt308000jzs1k154m1o2z","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt31d001rzs1k7vlft8aw"},{"post_id":"cjxsmt308000jzs1k154m1o2z","category_id":"cjxsmt319001lzs1koz2cuc0h","_id":"cjxsmt31e001uzs1kfhy8ndzm"},{"post_id":"cjxsmt2yx0005zs1ksb4j8xb1","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt31f001vzs1k1w9l3rze"},{"post_id":"cjxsmt2yx0005zs1ksb4j8xb1","category_id":"cjxsmt305000gzs1kcj4st5v5","_id":"cjxsmt31i001zzs1kygnr0sah"},{"post_id":"cjxsmt2yx0005zs1ksb4j8xb1","category_id":"cjxsmt31c001pzs1k9d9lyk0i","_id":"cjxsmt31j0021zs1kodzj5h7h"},{"post_id":"cjxsmt30f000nzs1kakzajpxq","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt31l0025zs1kgqj55fpq"},{"post_id":"cjxsmt30f000nzs1kakzajpxq","category_id":"cjxsmt30m000szs1k8ojjmrjh","_id":"cjxsmt31t0028zs1kzpimoref"},{"post_id":"cjxsmt2y70000zs1kirsdro73","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt31v002czs1kpc4a3duq"},{"post_id":"cjxsmt2y70000zs1kirsdro73","category_id":"cjxsmt30d000lzs1k80byx7qm","_id":"cjxsmt31w002ezs1kh3tivtk9"},{"post_id":"cjxsmt2y70000zs1kirsdro73","category_id":"cjxsmt31j0022zs1kq1r1ivwb","_id":"cjxsmt31y002gzs1ks714gb45"},{"post_id":"cjxsmt2yi0001zs1kdbw88x8x","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt31z002jzs1kyhuh9uub"},{"post_id":"cjxsmt2yi0001zs1kdbw88x8x","category_id":"cjxsmt30d000lzs1k80byx7qm","_id":"cjxsmt322002nzs1k4ez6x416"},{"post_id":"cjxsmt2yi0001zs1kdbw88x8x","category_id":"cjxsmt31j0022zs1kq1r1ivwb","_id":"cjxsmt324002ozs1kfsovn1wf"},{"post_id":"cjxsmt301000dzs1knvz93cxw","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt327002rzs1k0rgtkwy0"},{"post_id":"cjxsmt301000dzs1knvz93cxw","category_id":"cjxsmt312001bzs1kvsy5ua38","_id":"cjxsmt328002tzs1k6i59xlly"},{"post_id":"cjxsmt301000dzs1knvz93cxw","category_id":"cjxsmt31x002fzs1k2mczw4s9","_id":"cjxsmt329002wzs1k107iopye"},{"post_id":"cjxsmt30b000kzs1khq677g9c","category_id":"cjxsmt31e001tzs1knryfz603","_id":"cjxsmt32b002yzs1knzyrt3af"},{"post_id":"cjxsmt30b000kzs1khq677g9c","category_id":"cjxsmt320002lzs1kjh6q0rxz","_id":"cjxsmt32c0031zs1kvtb5ysmj"},{"post_id":"cjxsmt30i000qzs1kqp6uo86q","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt32d0032zs1kv4hbpuvt"},{"post_id":"cjxsmt30i000qzs1kqp6uo86q","category_id":"cjxsmt312001bzs1kvsy5ua38","_id":"cjxsmt32e0034zs1kdhp0v5lx"},{"post_id":"cjxsmt30i000qzs1kqp6uo86q","category_id":"cjxsmt31x002fzs1k2mczw4s9","_id":"cjxsmt32f0035zs1k14mlrht6"},{"post_id":"cjxsmt32y003dzs1kcqm41ska","category_id":"cjxsmt2yo0002zs1kg0tauxwl","_id":"cjxsmt332003fzs1kzzl9gp23"},{"post_id":"cjxsmt32y003dzs1kcqm41ska","category_id":"cjxsmt30m000szs1k8ojjmrjh","_id":"cjxsmt333003gzs1kcyuz5p0f"}],"PostTag":[{"post_id":"cjxsmt2y70000zs1kirsdro73","tag_id":"cjxsmt2ys0003zs1ks0ap1uvn","_id":"cjxsmt302000ezs1kj0ndfz38"},{"post_id":"cjxsmt2y70000zs1kirsdro73","tag_id":"cjxsmt2z60008zs1kx2zeywdg","_id":"cjxsmt306000hzs1kw47ez592"},{"post_id":"cjxsmt2yi0001zs1kdbw88x8x","tag_id":"cjxsmt2ys0003zs1ks0ap1uvn","_id":"cjxsmt30h000pzs1kssvvnun0"},{"post_id":"cjxsmt2yi0001zs1kdbw88x8x","tag_id":"cjxsmt2z60008zs1kx2zeywdg","_id":"cjxsmt30k000rzs1k4wa9ot0b"},{"post_id":"cjxsmt2yt0004zs1kxnmduy0o","tag_id":"cjxsmt30e000mzs1khswptt7z","_id":"cjxsmt30v000xzs1kar01b3jx"},{"post_id":"cjxsmt2yt0004zs1kxnmduy0o","tag_id":"cjxsmt30n000tzs1k7vaszadz","_id":"cjxsmt30w000zzs1k9i9slwkx"},{"post_id":"cjxsmt2yx0005zs1ksb4j8xb1","tag_id":"cjxsmt30e000mzs1khswptt7z","_id":"cjxsmt3110017zs1kv1nhsuw5"},{"post_id":"cjxsmt2yx0005zs1ksb4j8xb1","tag_id":"cjxsmt30w0010zs1kytgf9k9l","_id":"cjxsmt3120019zs1k4d0xj0nz"},{"post_id":"cjxsmt2z30006zs1kzru3p7ij","tag_id":"cjxsmt2ys0003zs1ks0ap1uvn","_id":"cjxsmt314001dzs1kivze2u47"},{"post_id":"cjxsmt2z30006zs1kzru3p7ij","tag_id":"cjxsmt30z0015zs1kks9b3dyf","_id":"cjxsmt314001ezs1kj8qm6uq5"},{"post_id":"cjxsmt2zi0009zs1k0karidjj","tag_id":"cjxsmt313001czs1k3spirlx7","_id":"cjxsmt317001jzs1kuglp8fca"},{"post_id":"cjxsmt2zw000azs1kxfuwzuu9","tag_id":"cjxsmt313001czs1k3spirlx7","_id":"cjxsmt31a001mzs1kj4gum56n"},{"post_id":"cjxsmt301000dzs1knvz93cxw","tag_id":"cjxsmt318001kzs1kkn27nnil","_id":"cjxsmt31h001yzs1k345v1uxz"},{"post_id":"cjxsmt301000dzs1knvz93cxw","tag_id":"cjxsmt31b001ozs1k17laixs6","_id":"cjxsmt31i0020zs1k6vd4mx26"},{"post_id":"cjxsmt301000dzs1knvz93cxw","tag_id":"cjxsmt31d001szs1k6n8zf66k","_id":"cjxsmt31k0024zs1k7rpu9drs"},{"post_id":"cjxsmt303000fzs1k4jv4amx2","tag_id":"cjxsmt31g001wzs1kjvkx6wi0","_id":"cjxsmt31t0029zs1krdyszozm"},{"post_id":"cjxsmt303000fzs1k4jv4amx2","tag_id":"cjxsmt31k0023zs1kbg92lq27","_id":"cjxsmt31u002azs1kvigxypeo"},{"post_id":"cjxsmt308000jzs1k154m1o2z","tag_id":"cjxsmt318001kzs1kkn27nnil","_id":"cjxsmt31z002izs1k2tqqp1fd"},{"post_id":"cjxsmt308000jzs1k154m1o2z","tag_id":"cjxsmt31v002dzs1kc46qjgb7","_id":"cjxsmt320002kzs1kihgyx1qs"},{"post_id":"cjxsmt30b000kzs1khq677g9c","tag_id":"cjxsmt31y002hzs1kuk37ai3d","_id":"cjxsmt327002szs1kn2kq2y5s"},{"post_id":"cjxsmt30b000kzs1khq677g9c","tag_id":"cjxsmt31v002dzs1kc46qjgb7","_id":"cjxsmt328002uzs1kztuc0zpp"},{"post_id":"cjxsmt30f000nzs1kakzajpxq","tag_id":"cjxsmt326002qzs1k7bc2xliz","_id":"cjxsmt32a002xzs1kpw9j3u2a"},{"post_id":"cjxsmt30f000nzs1kakzajpxq","tag_id":"cjxsmt2ys0003zs1ks0ap1uvn","_id":"cjxsmt32c002zzs1kb4a62ldv"},{"post_id":"cjxsmt30i000qzs1kqp6uo86q","tag_id":"cjxsmt318001kzs1kkn27nnil","_id":"cjxsmt32g0037zs1ka21ln4zc"},{"post_id":"cjxsmt30i000qzs1kqp6uo86q","tag_id":"cjxsmt31b001ozs1k17laixs6","_id":"cjxsmt32g0038zs1kvwayrcvv"},{"post_id":"cjxsmt30i000qzs1kqp6uo86q","tag_id":"cjxsmt31d001szs1k6n8zf66k","_id":"cjxsmt32h0039zs1kkq6qo4jn"},{"post_id":"cjxsmt30o000uzs1k2qbcuvai","tag_id":"cjxsmt2ys0003zs1ks0ap1uvn","_id":"cjxsmt32h003azs1k2c1zfv25"},{"post_id":"cjxsmt30o000uzs1k2qbcuvai","tag_id":"cjxsmt32f0036zs1kp6zugie4","_id":"cjxsmt32i003bzs1kjtn3wz8s"},{"post_id":"cjxsmt32y003dzs1kcqm41ska","tag_id":"cjxsmt2ys0003zs1ks0ap1uvn","_id":"cjxsmt331003ezs1kk0bkzog4"}],"Tag":[{"name":"C++","_id":"cjxsmt2ys0003zs1ks0ap1uvn"},{"name":"Bitmap","_id":"cjxsmt2z60008zs1kx2zeywdg"},{"name":"Linux","_id":"cjxsmt30e000mzs1khswptt7z"},{"name":"Kernel Module","_id":"cjxsmt30n000tzs1k7vaszadz"},{"name":"Socket","_id":"cjxsmt30w0010zs1kytgf9k9l"},{"name":"Input/Output","_id":"cjxsmt30z0015zs1kks9b3dyf"},{"name":"玩弄手机","_id":"cjxsmt313001czs1k3spirlx7"},{"name":"嵌入式","_id":"cjxsmt318001kzs1kkn27nnil"},{"name":"步进电机","_id":"cjxsmt31b001ozs1k17laixs6"},{"name":"C51","_id":"cjxsmt31d001szs1k6n8zf66k"},{"name":"算法","_id":"cjxsmt31g001wzs1kjvkx6wi0"},{"name":"总结","_id":"cjxsmt31k0023zs1kbg92lq27"},{"name":"随笔","_id":"cjxsmt31v002dzs1kc46qjgb7"},{"name":"感想","_id":"cjxsmt31y002hzs1kuk37ai3d"},{"name":"C","_id":"cjxsmt326002qzs1k7bc2xliz"},{"name":"IO","_id":"cjxsmt32f0036zs1kp6zugie4"}]}}